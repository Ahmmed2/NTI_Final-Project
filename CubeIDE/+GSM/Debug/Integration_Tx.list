
Integration_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005964  08005964  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005964  08005964  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005964  08005964  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800596c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000078  080059e4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080059e4  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe6d  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026d8  00000000  00000000  0002ff51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00032630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd6  00000000  00000000  00033558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001869b  00000000  00000000  0003412e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011986  00000000  00000000  0004c7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c2fa  00000000  00000000  0005e14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd0  00000000  00000000  000ea44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a6  00000000  00000000  000ee41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080058cc 	.word	0x080058cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080058cc 	.word	0x080058cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <GSM_VidInit>:
 * @brief: Init and check the GSM module.
 *         Sends AT commands and checks responses for connection status,
 * @return: void
 */
void GSM_VidInit()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	// Send AT command to check connection status
	while (Glb_u8GSMBuff[5] != 'O' && Glb_u8GSMBuff[6] != 'K')
 8000770:	e00d      	b.n	800078e <GSM_VidInit+0x22>
	{
		HAL_UART_Transmit(&GSM_UART, Glb_u8CheckCmd, GSM_CHECKCMD_SIZE, GSM_TIMEOUT);
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	2204      	movs	r2, #4
 8000778:	490a      	ldr	r1, [pc, #40]	; (80007a4 <GSM_VidInit+0x38>)
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <GSM_VidInit+0x3c>)
 800077c:	f004 f9bf 	bl	8004afe <HAL_UART_Transmit>
		HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	2246      	movs	r2, #70	; 0x46
 8000786:	4909      	ldr	r1, [pc, #36]	; (80007ac <GSM_VidInit+0x40>)
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <GSM_VidInit+0x3c>)
 800078a:	f004 fa3b 	bl	8004c04 <HAL_UART_Receive>
	while (Glb_u8GSMBuff[5] != 'O' && Glb_u8GSMBuff[6] != 'K')
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <GSM_VidInit+0x40>)
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	2b4f      	cmp	r3, #79	; 0x4f
 8000794:	d003      	beq.n	800079e <GSM_VidInit+0x32>
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <GSM_VidInit+0x40>)
 8000798:	799b      	ldrb	r3, [r3, #6]
 800079a:	2b4b      	cmp	r3, #75	; 0x4b
 800079c:	d1e9      	bne.n	8000772 <GSM_VidInit+0x6>
	}
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000254 	.word	0x20000254
 80007ac:	20000094 	.word	0x20000094

080007b0 <GSM_VidCheckConnection>:
 *        Sends AT commands and checks responses for connection status,
 *        signal quality, and network registration.
 * @return uint8_t Status of Connection
 */
uint8_t GSM_VidCheckConnection(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
	uint8_t Loc_u8StatusConnection = GSM_FALSE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	71fb      	strb	r3, [r7, #7]
	// Send AT command to check connection status

    for (uint8_t i = 0; i < 2; i++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	71bb      	strb	r3, [r7, #6]
 80007be:	e01d      	b.n	80007fc <GSM_VidCheckConnection+0x4c>
    {
    	HAL_UART_Transmit(&GSM_UART, Glb_u8CheckCmd, GSM_CHECKCMD_SIZE, GSM_TIMEOUT);
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	2204      	movs	r2, #4
 80007c6:	4936      	ldr	r1, [pc, #216]	; (80008a0 <GSM_VidCheckConnection+0xf0>)
 80007c8:	4836      	ldr	r0, [pc, #216]	; (80008a4 <GSM_VidCheckConnection+0xf4>)
 80007ca:	f004 f998 	bl	8004afe <HAL_UART_Transmit>
    	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	2246      	movs	r2, #70	; 0x46
 80007d4:	4934      	ldr	r1, [pc, #208]	; (80008a8 <GSM_VidCheckConnection+0xf8>)
 80007d6:	4833      	ldr	r0, [pc, #204]	; (80008a4 <GSM_VidCheckConnection+0xf4>)
 80007d8:	f004 fa14 	bl	8004c04 <HAL_UART_Receive>
        if (Glb_u8GSMBuff[5] == 'O' && Glb_u8GSMBuff[6] == 'K')
 80007dc:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <GSM_VidCheckConnection+0xf8>)
 80007de:	795b      	ldrb	r3, [r3, #5]
 80007e0:	2b4f      	cmp	r3, #79	; 0x4f
 80007e2:	d106      	bne.n	80007f2 <GSM_VidCheckConnection+0x42>
 80007e4:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <GSM_VidCheckConnection+0xf8>)
 80007e6:	799b      	ldrb	r3, [r3, #6]
 80007e8:	2b4b      	cmp	r3, #75	; 0x4b
 80007ea:	d102      	bne.n	80007f2 <GSM_VidCheckConnection+0x42>
        {
        	Loc_u8StatusConnection = GSM_TRUE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	71fb      	strb	r3, [r7, #7]
            break;
 80007f0:	e007      	b.n	8000802 <GSM_VidCheckConnection+0x52>
        }
        else
        {
            // If connection status check fails, try again later
            // and send a notification to the dashboard after a set period of time
        	Loc_u8StatusConnection = GSM_FALSE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 2; i++)
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	3301      	adds	r3, #1
 80007fa:	71bb      	strb	r3, [r7, #6]
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d9de      	bls.n	80007c0 <GSM_VidCheckConnection+0x10>
    }



    // Check signal quality by sending AT+CSQ command
    for (uint8_t i = 0; i < 2; i++)
 8000802:	2300      	movs	r3, #0
 8000804:	717b      	strb	r3, [r7, #5]
 8000806:	e01d      	b.n	8000844 <GSM_VidCheckConnection+0x94>
    {

    	HAL_UART_Transmit(&GSM_UART, Glb_u8CheckSignalCmd, GSM_CHECKSIG_SIZE, GSM_TIMEOUT);
 8000808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080c:	2208      	movs	r2, #8
 800080e:	4927      	ldr	r1, [pc, #156]	; (80008ac <GSM_VidCheckConnection+0xfc>)
 8000810:	4824      	ldr	r0, [pc, #144]	; (80008a4 <GSM_VidCheckConnection+0xf4>)
 8000812:	f004 f974 	bl	8004afe <HAL_UART_Transmit>
    	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	2246      	movs	r2, #70	; 0x46
 800081c:	4922      	ldr	r1, [pc, #136]	; (80008a8 <GSM_VidCheckConnection+0xf8>)
 800081e:	4821      	ldr	r0, [pc, #132]	; (80008a4 <GSM_VidCheckConnection+0xf4>)
 8000820:	f004 f9f0 	bl	8004c04 <HAL_UART_Receive>

        if (Glb_u8GSMBuff[23] == 'O' && Glb_u8GSMBuff[24] == 'K')
 8000824:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <GSM_VidCheckConnection+0xf8>)
 8000826:	7ddb      	ldrb	r3, [r3, #23]
 8000828:	2b4f      	cmp	r3, #79	; 0x4f
 800082a:	d106      	bne.n	800083a <GSM_VidCheckConnection+0x8a>
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <GSM_VidCheckConnection+0xf8>)
 800082e:	7e1b      	ldrb	r3, [r3, #24]
 8000830:	2b4b      	cmp	r3, #75	; 0x4b
 8000832:	d102      	bne.n	800083a <GSM_VidCheckConnection+0x8a>
        {

        	Loc_u8StatusConnection = GSM_TRUE;
 8000834:	2301      	movs	r3, #1
 8000836:	71fb      	strb	r3, [r7, #7]
            break;
 8000838:	e007      	b.n	800084a <GSM_VidCheckConnection+0x9a>
        }
        else
        {
            // If signal quality check fails, try again later
            // and send a notification to the Dash-board after a set period of time
        	Loc_u8StatusConnection = GSM_FALSE;
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 2; i++)
 800083e:	797b      	ldrb	r3, [r7, #5]
 8000840:	3301      	adds	r3, #1
 8000842:	717b      	strb	r3, [r7, #5]
 8000844:	797b      	ldrb	r3, [r7, #5]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d9de      	bls.n	8000808 <GSM_VidCheckConnection+0x58>
        }
    }


    // Check network registration by sending AT+COPS? command
    for (uint8_t i = 0; i < 2; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	713b      	strb	r3, [r7, #4]
 800084e:	e01f      	b.n	8000890 <GSM_VidCheckConnection+0xe0>
    {
    	HAL_UART_Transmit(&GSM_UART, Glb_u8NetRegCmd, GSM_CHECKNETREG_SIZE, GSM_TIMEOUT);
 8000850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000854:	220a      	movs	r2, #10
 8000856:	4916      	ldr	r1, [pc, #88]	; (80008b0 <GSM_VidCheckConnection+0x100>)
 8000858:	4812      	ldr	r0, [pc, #72]	; (80008a4 <GSM_VidCheckConnection+0xf4>)
 800085a:	f004 f950 	bl	8004afe <HAL_UART_Transmit>
    	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	2246      	movs	r2, #70	; 0x46
 8000864:	4910      	ldr	r1, [pc, #64]	; (80008a8 <GSM_VidCheckConnection+0xf8>)
 8000866:	480f      	ldr	r0, [pc, #60]	; (80008a4 <GSM_VidCheckConnection+0xf4>)
 8000868:	f004 f9cc 	bl	8004c04 <HAL_UART_Receive>

        if (Glb_u8GSMBuff[36] == 'O' && Glb_u8GSMBuff[37] == 'K')
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <GSM_VidCheckConnection+0xf8>)
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000872:	2b4f      	cmp	r3, #79	; 0x4f
 8000874:	d107      	bne.n	8000886 <GSM_VidCheckConnection+0xd6>
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <GSM_VidCheckConnection+0xf8>)
 8000878:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800087c:	2b4b      	cmp	r3, #75	; 0x4b
 800087e:	d102      	bne.n	8000886 <GSM_VidCheckConnection+0xd6>
        {
        	Loc_u8StatusConnection = GSM_TRUE;
 8000880:	2301      	movs	r3, #1
 8000882:	71fb      	strb	r3, [r7, #7]
            break;
 8000884:	e007      	b.n	8000896 <GSM_VidCheckConnection+0xe6>
        }
        else
        {
            // If network registration check fails, try again later
            // and send a notification to the Dash-board after a set period of time
        	Loc_u8StatusConnection = GSM_FALSE;
 8000886:	2300      	movs	r3, #0
 8000888:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 2; i++)
 800088a:	793b      	ldrb	r3, [r7, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	713b      	strb	r3, [r7, #4]
 8000890:	793b      	ldrb	r3, [r7, #4]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d9dc      	bls.n	8000850 <GSM_VidCheckConnection+0xa0>
        }
    }

    return Loc_u8StatusConnection;
 8000896:	79fb      	ldrb	r3, [r7, #7]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000254 	.word	0x20000254
 80008a8:	20000094 	.word	0x20000094
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000014 	.word	0x20000014

080008b4 <GSM_VidSendSMS>:
 * @param message: Pointer to a string containing the message to be sent
 * @return uint8_t Status of Sending SMS
 */

uint8_t GSM_VidSendSMS(uint8_t *Ptr_u8PhoneNumber, uint8_t *Ptr_u8Message)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	//Capturing the size of the phone number and the message
	uint8_t Loc_u8PhoneNumSize = strlen((const char*)Ptr_u8PhoneNumber);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fc46 	bl	8000150 <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	73fb      	strb	r3, [r7, #15]
	uint8_t Loc_u8MessageSize = strlen((const char*)Ptr_u8Message);
 80008c8:	6838      	ldr	r0, [r7, #0]
 80008ca:	f7ff fc41 	bl	8000150 <strlen>
 80008ce:	4603      	mov	r3, r0
 80008d0:	73bb      	strb	r3, [r7, #14]

	// Check the connection
	HAL_UART_Transmit(&GSM_UART, Glb_u8CheckCmd, GSM_CHECKCMD_SIZE, GSM_TIMEOUT);
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	2204      	movs	r2, #4
 80008d8:	493d      	ldr	r1, [pc, #244]	; (80009d0 <GSM_VidSendSMS+0x11c>)
 80008da:	483e      	ldr	r0, [pc, #248]	; (80009d4 <GSM_VidSendSMS+0x120>)
 80008dc:	f004 f90f 	bl	8004afe <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 80008e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e4:	2246      	movs	r2, #70	; 0x46
 80008e6:	493c      	ldr	r1, [pc, #240]	; (80009d8 <GSM_VidSendSMS+0x124>)
 80008e8:	483a      	ldr	r0, [pc, #232]	; (80009d4 <GSM_VidSendSMS+0x120>)
 80008ea:	f004 f98b 	bl	8004c04 <HAL_UART_Receive>
	HAL_Delay(100);
 80008ee:	2064      	movs	r0, #100	; 0x64
 80008f0:	f001 fb5e 	bl	8001fb0 <HAL_Delay>
	// Set text mode for SMS
	HAL_UART_Transmit(&GSM_UART, Glb_u8TxtModeCmd, GSM_TXTMODECMD_SIZE, GSM_TIMEOUT);
 80008f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f8:	220b      	movs	r2, #11
 80008fa:	4938      	ldr	r1, [pc, #224]	; (80009dc <GSM_VidSendSMS+0x128>)
 80008fc:	4835      	ldr	r0, [pc, #212]	; (80009d4 <GSM_VidSendSMS+0x120>)
 80008fe:	f004 f8fe 	bl	8004afe <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	2246      	movs	r2, #70	; 0x46
 8000908:	4933      	ldr	r1, [pc, #204]	; (80009d8 <GSM_VidSendSMS+0x124>)
 800090a:	4832      	ldr	r0, [pc, #200]	; (80009d4 <GSM_VidSendSMS+0x120>)
 800090c:	f004 f97a 	bl	8004c04 <HAL_UART_Receive>
	HAL_Delay(100);
 8000910:	2064      	movs	r0, #100	; 0x64
 8000912:	f001 fb4d 	bl	8001fb0 <HAL_Delay>
	//SMS opening
	HAL_UART_Transmit(&GSM_UART, Glb_u8SMSOPCmd, GSM_SMSOP_SIZE, GSM_TIMEOUT);
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	2209      	movs	r2, #9
 800091c:	4930      	ldr	r1, [pc, #192]	; (80009e0 <GSM_VidSendSMS+0x12c>)
 800091e:	482d      	ldr	r0, [pc, #180]	; (80009d4 <GSM_VidSendSMS+0x120>)
 8000920:	f004 f8ed 	bl	8004afe <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000928:	2246      	movs	r2, #70	; 0x46
 800092a:	492b      	ldr	r1, [pc, #172]	; (80009d8 <GSM_VidSendSMS+0x124>)
 800092c:	4829      	ldr	r0, [pc, #164]	; (80009d4 <GSM_VidSendSMS+0x120>)
 800092e:	f004 f969 	bl	8004c04 <HAL_UART_Receive>
	HAL_Delay(100);
 8000932:	2064      	movs	r0, #100	; 0x64
 8000934:	f001 fb3c 	bl	8001fb0 <HAL_Delay>
	//Entering Phone Number
	HAL_UART_Transmit(&GSM_UART, (uint8_t*)Ptr_u8PhoneNumber, Loc_u8PhoneNumSize, GSM_TIMEOUT);
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	b29a      	uxth	r2, r3
 800093c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	4824      	ldr	r0, [pc, #144]	; (80009d4 <GSM_VidSendSMS+0x120>)
 8000944:	f004 f8db 	bl	8004afe <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094c:	2246      	movs	r2, #70	; 0x46
 800094e:	4922      	ldr	r1, [pc, #136]	; (80009d8 <GSM_VidSendSMS+0x124>)
 8000950:	4820      	ldr	r0, [pc, #128]	; (80009d4 <GSM_VidSendSMS+0x120>)
 8000952:	f004 f957 	bl	8004c04 <HAL_UART_Receive>
	HAL_Delay(100);
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f001 fb2a 	bl	8001fb0 <HAL_Delay>
	//Closing Number format
	HAL_UART_Transmit(&GSM_UART, Glb_u8SMSCLCmd, GSM_SMSCL_SIZE, GSM_TIMEOUT);
 800095c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000960:	2203      	movs	r2, #3
 8000962:	4920      	ldr	r1, [pc, #128]	; (80009e4 <GSM_VidSendSMS+0x130>)
 8000964:	481b      	ldr	r0, [pc, #108]	; (80009d4 <GSM_VidSendSMS+0x120>)
 8000966:	f004 f8ca 	bl	8004afe <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	2246      	movs	r2, #70	; 0x46
 8000970:	4919      	ldr	r1, [pc, #100]	; (80009d8 <GSM_VidSendSMS+0x124>)
 8000972:	4818      	ldr	r0, [pc, #96]	; (80009d4 <GSM_VidSendSMS+0x120>)
 8000974:	f004 f946 	bl	8004c04 <HAL_UART_Receive>
	HAL_Delay(100);
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f001 fb19 	bl	8001fb0 <HAL_Delay>
	//Entering Message
	HAL_UART_Transmit(&GSM_UART, (uint8_t*)Ptr_u8Message, Loc_u8MessageSize, GSM_TIMEOUT);
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	b29a      	uxth	r2, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	6839      	ldr	r1, [r7, #0]
 8000988:	4812      	ldr	r0, [pc, #72]	; (80009d4 <GSM_VidSendSMS+0x120>)
 800098a:	f004 f8b8 	bl	8004afe <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	2246      	movs	r2, #70	; 0x46
 8000994:	4910      	ldr	r1, [pc, #64]	; (80009d8 <GSM_VidSendSMS+0x124>)
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <GSM_VidSendSMS+0x120>)
 8000998:	f004 f934 	bl	8004c04 <HAL_UART_Receive>
	HAL_Delay(100);
 800099c:	2064      	movs	r0, #100	; 0x64
 800099e:	f001 fb07 	bl	8001fb0 <HAL_Delay>
	//Sending Message
	HAL_UART_Transmit(&GSM_UART, (uint8_t*)"\x1A", 1, GSM_TIMEOUT);
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	2201      	movs	r2, #1
 80009a8:	490f      	ldr	r1, [pc, #60]	; (80009e8 <GSM_VidSendSMS+0x134>)
 80009aa:	480a      	ldr	r0, [pc, #40]	; (80009d4 <GSM_VidSendSMS+0x120>)
 80009ac:	f004 f8a7 	bl	8004afe <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 80009b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b4:	2246      	movs	r2, #70	; 0x46
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <GSM_VidSendSMS+0x124>)
 80009b8:	4806      	ldr	r0, [pc, #24]	; (80009d4 <GSM_VidSendSMS+0x120>)
 80009ba:	f004 f923 	bl	8004c04 <HAL_UART_Receive>
	HAL_Delay(100);
 80009be:	2064      	movs	r0, #100	; 0x64
 80009c0:	f001 faf6 	bl	8001fb0 <HAL_Delay>

	return GSM_TRUE;
 80009c4:	2301      	movs	r3, #1


}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000254 	.word	0x20000254
 80009d8:	20000094 	.word	0x20000094
 80009dc:	20000020 	.word	0x20000020
 80009e0:	2000002c 	.word	0x2000002c
 80009e4:	20000038 	.word	0x20000038
 80009e8:	080058e4 	.word	0x080058e4

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f0:	f001 fa7c 	bl	8001eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f4:	f000 f83c 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f8:	f000 fa1c 	bl	8000e34 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009fc:	f000 f8a8 	bl	8000b50 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a00:	f000 f9c4 	bl	8000d8c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000a04:	f000 f974 	bl	8000cf0 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000a08:	f000 f86c 	bl	8000ae4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a0c:	f000 f924 	bl	8000c58 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000a10:	f000 f9e6 	bl	8000de0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_voidUltraSonicInit() ;
 8000a14:	f001 f960 	bl	8001cd8 <HAL_voidUltraSonicInit>
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 8000a18:	2201      	movs	r2, #1
 8000a1a:	490f      	ldr	r1, [pc, #60]	; (8000a58 <main+0x6c>)
 8000a1c:	480f      	ldr	r0, [pc, #60]	; (8000a5c <main+0x70>)
 8000a1e:	f004 f983 	bl	8004d28 <HAL_UART_Receive_IT>
  NRF_voidInit();
 8000a22:	f000 ff9f 	bl	8001964 <NRF_voidInit>
  GSM_VidInit();
 8000a26:	f7ff fea1 	bl	800076c <GSM_VidInit>
  GSM_VidCheckConnection();
 8000a2a:	f7ff fec1 	bl	80007b0 <GSM_VidCheckConnection>
  NRF_voidTransmitterMode (TxAddress ,10 );
 8000a2e:	210a      	movs	r1, #10
 8000a30:	480b      	ldr	r0, [pc, #44]	; (8000a60 <main+0x74>)
 8000a32:	f000 ffbb 	bl	80019ac <NRF_voidTransmitterMode>

  Data_Tx.Speed 	 = 0 						;  /* Input from MOTION Branch     */
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <main+0x78>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
  Data_Tx.Direction  = FORWARD 					;  /* Input from MOTION Branch     */
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <main+0x78>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	705a      	strb	r2, [r3, #1]
  Data_Tx.Distance 	 = 0						;  /* Input from ULTRASONIC Branch */
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <main+0x78>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	709a      	strb	r2, [r3, #2]
  Data_Tx.Indication = INDICATION_NORMAL 	    ;  /* Input from Emergency		   */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <main+0x78>)
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	70da      	strb	r2, [r3, #3]

  Data_Sent[6]     = Data_States[3]				;  /* Indication */
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <main+0x7c>)
 8000a50:	78da      	ldrb	r2, [r3, #3]
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <main+0x80>)
 8000a54:	719a      	strb	r2, [r3, #6]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <main+0x6a>
 8000a58:	2000029f 	.word	0x2000029f
 8000a5c:	2000020c 	.word	0x2000020c
 8000a60:	20000048 	.word	0x20000048
 8000a64:	200002ac 	.word	0x200002ac
 8000a68:	20000050 	.word	0x20000050
 8000a6c:	200002a4 	.word	0x200002a4

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	; 0x40
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	2228      	movs	r2, #40	; 0x28
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 fef8 	bl	8005874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 fe1b 	bl	80026e0 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000ab0:	f000 fbd6 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 f889 	bl	8002be4 <HAL_RCC_ClockConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000ad8:	f000 fbc2 	bl	8001260 <Error_Handler>
  }
}
 8000adc:	bf00      	nop
 8000ade:	3740      	adds	r7, #64	; 0x40
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000aea:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <MX_SPI1_Init+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b18:	2208      	movs	r2, #8
 8000b1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b30:	220a      	movs	r2, #10
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b36:	f002 f9e3 	bl	8002f00 <HAL_SPI_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b40:	f000 fb8e 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000dc 	.word	0x200000dc
 8000b4c:	40013000 	.word	0x40013000

08000b50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b092      	sub	sp, #72	; 0x48
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2220      	movs	r2, #32
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f004 fe7a 	bl	8005874 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b80:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000b82:	4a34      	ldr	r2, [pc, #208]	; (8000c54 <MX_TIM1_Init+0x104>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000b86:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000b88:	2240      	movs	r2, #64	; 0x40
 8000b8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8000b92:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bac:	4828      	ldr	r0, [pc, #160]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000bae:	f003 f849 	bl	8003c44 <HAL_TIM_PWM_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000bb8:	f000 fb52 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4821      	ldr	r0, [pc, #132]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000bcc:	f003 fe86 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000bd6:	f000 fb43 	bl	8001260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bda:	2360      	movs	r3, #96	; 0x60
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4814      	ldr	r0, [pc, #80]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000c00:	f003 fa1a 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c0a:	f000 fb29 	bl	8001260 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000c32:	f003 feb1 	bl	8004998 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000c3c:	f000 fb10 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <MX_TIM1_Init+0x100>)
 8000c42:	f000 fbe5 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8000c46:	bf00      	nop
 8000c48:	3748      	adds	r7, #72	; 0x48
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000134 	.word	0x20000134
 8000c54:	40012c00 	.word	0x40012c00

08000c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c9e:	f002 feb7 	bl	8003a10 <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ca8:	f000 fada 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM2_Init+0x94>)
 8000cba:	f003 fa7f 	bl	80041bc <HAL_TIM_ConfigClockSource>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cc4:	f000 facc 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM2_Init+0x94>)
 8000cd6:	f003 fe01 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ce0:	f000 fabe 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000017c 	.word	0x2000017c

08000cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_TIM3_Init+0x94>)
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <MX_TIM3_Init+0x98>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_TIM3_Init+0x94>)
 8000d14:	2220      	movs	r2, #32
 8000d16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_TIM3_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_TIM3_Init+0x94>)
 8000d20:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_TIM3_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_TIM3_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d32:	4814      	ldr	r0, [pc, #80]	; (8000d84 <MX_TIM3_Init+0x94>)
 8000d34:	f002 fe6c 	bl	8003a10 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 fa8f 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_TIM3_Init+0x94>)
 8000d50:	f003 fa34 	bl	80041bc <HAL_TIM_ConfigClockSource>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d5a:	f000 fa81 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d66:	463b      	mov	r3, r7
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <MX_TIM3_Init+0x94>)
 8000d6c:	f003 fdb6 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d76:	f000 fa73 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001c4 	.word	0x200001c4
 8000d88:	40000400 	.word	0x40000400

08000d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART1_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	f003 fe4b 	bl	8004a5e <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f000 fa47 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000020c 	.word	0x2000020c
 8000ddc:	40013800 	.word	0x40013800

08000de0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART3_UART_Init+0x4c>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_USART3_UART_Init+0x50>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_USART3_UART_Init+0x4c>)
 8000dec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000df0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART3_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART3_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART3_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART3_UART_Init+0x4c>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART3_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART3_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART3_UART_Init+0x4c>)
 8000e18:	f003 fe21 	bl	8004a5e <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e22:	f000 fa1d 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000254 	.word	0x20000254
 8000e30:	40004800 	.word	0x40004800

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e48:	4b45      	ldr	r3, [pc, #276]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a44      	ldr	r2, [pc, #272]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a3e      	ldr	r2, [pc, #248]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a38      	ldr	r2, [pc, #224]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a32      	ldr	r2, [pc, #200]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eae:	482d      	ldr	r0, [pc, #180]	; (8000f64 <MX_GPIO_Init+0x130>)
 8000eb0:	f001 fbfd 	bl	80026ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_F_Pin|NRF_CE_Pin|NRF_CSN_Pin|IN1_Pin
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f649 0107 	movw	r1, #38919	; 0x9807
 8000eba:	482b      	ldr	r0, [pc, #172]	; (8000f68 <MX_GPIO_Init+0x134>)
 8000ebc:	f001 fbf7 	bl	80026ae <HAL_GPIO_WritePin>
                          |IN2_Pin|TRIG_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_R_Pin|EN2_Pin|TRIG_L_Pin|IN3_Pin
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f243 3101 	movw	r1, #13057	; 0x3301
 8000ec6:	4829      	ldr	r0, [pc, #164]	; (8000f6c <MX_GPIO_Init+0x138>)
 8000ec8:	f001 fbf1 	bl	80026ae <HAL_GPIO_WritePin>
                          |IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481f      	ldr	r0, [pc, #124]	; (8000f64 <MX_GPIO_Init+0x130>)
 8000ee6:	f001 fa47 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_F_Pin NRF_CE_Pin NRF_CSN_Pin IN1_Pin
                           IN2_Pin TRIG_B_Pin */
  GPIO_InitStruct.Pin = TRIG_F_Pin|NRF_CE_Pin|NRF_CSN_Pin|IN1_Pin
 8000eea:	f649 0307 	movw	r3, #38919	; 0x9807
 8000eee:	613b      	str	r3, [r7, #16]
                          |IN2_Pin|TRIG_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	4819      	ldr	r0, [pc, #100]	; (8000f68 <MX_GPIO_Init+0x134>)
 8000f04:	f001 fa38 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : Emergency_button_Pin PA4 */
  GPIO_InitStruct.Pin = Emergency_button_Pin|GPIO_PIN_4;
 8000f08:	2318      	movs	r3, #24
 8000f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4813      	ldr	r0, [pc, #76]	; (8000f68 <MX_GPIO_Init+0x134>)
 8000f1c:	f001 fa2c 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_R_Pin EN2_Pin TRIG_L_Pin IN3_Pin
                           IN4_Pin */
  GPIO_InitStruct.Pin = TRIG_R_Pin|EN2_Pin|TRIG_L_Pin|IN3_Pin
 8000f20:	f243 3301 	movw	r3, #13057	; 0x3301
 8000f24:	613b      	str	r3, [r7, #16]
                          |IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_GPIO_Init+0x138>)
 8000f3a:	f001 fa1d 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8000f3e:	f24c 0302 	movw	r3, #49154	; 0xc002
 8000f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_GPIO_Init+0x138>)
 8000f54:	f001 fa10 	bl	8002378 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40011000 	.word	0x40011000
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	40010c00 	.word	0x40010c00

08000f70 <HAL_UART_RxCpltCallback>:
  * @param Handler
  * @retval None
  */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_UART_RxCpltCallback+0x24>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d104      	bne.n	8000f8c <HAL_UART_RxCpltCallback+0x1c>
  {

	  APP_voidTakeDecision (rxData) ;
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_UART_RxCpltCallback+0x28>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f808 	bl	8000f9c <APP_voidTakeDecision>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40013800 	.word	0x40013800
 8000f98:	2000029f 	.word	0x2000029f

08000f9c <APP_voidTakeDecision>:
  * @param Data from BM -->Copy_u8rxData
  * @retval None
  */

void APP_voidTakeDecision (uint8_t Copy_u8rxData)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	/* Start Timer */
	HAL_TIM_Base_Start_IT(&htim3) ;
 8000fa6:	483c      	ldr	r0, [pc, #240]	; (8001098 <APP_voidTakeDecision+0xfc>)
 8000fa8:	f002 fdcc 	bl	8003b44 <HAL_TIM_Base_Start_IT>

	switch (Copy_u8rxData)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	3b42      	subs	r3, #66	; 0x42
 8000fb0:	2b10      	cmp	r3, #16
 8000fb2:	d849      	bhi.n	8001048 <APP_voidTakeDecision+0xac>
 8000fb4:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <APP_voidTakeDecision+0x20>)
 8000fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fba:	bf00      	nop
 8000fbc:	0800100f 	.word	0x0800100f
 8000fc0:	08001049 	.word	0x08001049
 8000fc4:	08001049 	.word	0x08001049
 8000fc8:	08001049 	.word	0x08001049
 8000fcc:	08001001 	.word	0x08001001
 8000fd0:	08001049 	.word	0x08001049
 8000fd4:	08001049 	.word	0x08001049
 8000fd8:	08001049 	.word	0x08001049
 8000fdc:	08001049 	.word	0x08001049
 8000fe0:	08001049 	.word	0x08001049
 8000fe4:	0800102b 	.word	0x0800102b
 8000fe8:	08001049 	.word	0x08001049
 8000fec:	08001049 	.word	0x08001049
 8000ff0:	08001049 	.word	0x08001049
 8000ff4:	08001039 	.word	0x08001039
 8000ff8:	08001049 	.word	0x08001049
 8000ffc:	0800101d 	.word	0x0800101d
	{

	case 'F' :
		Car_Direction = FORWARD ;
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <APP_voidTakeDecision+0x100>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
		Car_State = STATE_MOVING ;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <APP_voidTakeDecision+0x104>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
		break ;
 800100c:	e01c      	b.n	8001048 <APP_voidTakeDecision+0xac>

	case 'B' :
		Car_Direction = BACKWARD ;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <APP_voidTakeDecision+0x100>)
 8001010:	2202      	movs	r2, #2
 8001012:	701a      	strb	r2, [r3, #0]
    	Car_State = STATE_MOVING ;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <APP_voidTakeDecision+0x104>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
    	break ;
 800101a:	e015      	b.n	8001048 <APP_voidTakeDecision+0xac>

	case 'R' :
		Car_Direction = RIGHT ;
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <APP_voidTakeDecision+0x100>)
 800101e:	2203      	movs	r2, #3
 8001020:	701a      	strb	r2, [r3, #0]
		Car_State = STATE_MOVING ;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <APP_voidTakeDecision+0x104>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
    	break ;
 8001028:	e00e      	b.n	8001048 <APP_voidTakeDecision+0xac>

	case 'L' :
		Car_Direction = LEFT ;
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <APP_voidTakeDecision+0x100>)
 800102c:	2204      	movs	r2, #4
 800102e:	701a      	strb	r2, [r3, #0]
		Car_State = STATE_MOVING ;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <APP_voidTakeDecision+0x104>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
    	break ;
 8001036:	e007      	b.n	8001048 <APP_voidTakeDecision+0xac>

	case 'P' :
		HAL_voidControlMotors(SPEED_0,STOP) ;
 8001038:	2100      	movs	r1, #0
 800103a:	2000      	movs	r0, #0
 800103c:	f000 fafa 	bl	8001634 <HAL_voidControlMotors>
		Car_State = STATE_STOP ;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <APP_voidTakeDecision+0x104>)
 8001042:	2202      	movs	r2, #2
 8001044:	701a      	strb	r2, [r3, #0]
    	break ;
 8001046:	bf00      	nop

	}

	HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8001048:	2201      	movs	r2, #1
 800104a:	4916      	ldr	r1, [pc, #88]	; (80010a4 <APP_voidTakeDecision+0x108>)
 800104c:	4816      	ldr	r0, [pc, #88]	; (80010a8 <APP_voidTakeDecision+0x10c>)
 800104e:	f003 fe6b 	bl	8004d28 <HAL_UART_Receive_IT>
	APP_voidModeUpdate();
 8001052:	f000 f835 	bl	80010c0 <APP_voidModeUpdate>
	if(System_Mode == Comm_Mode || System_Mode == Dominant_Mode)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <APP_voidTakeDecision+0x110>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <APP_voidTakeDecision+0xca>
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <APP_voidTakeDecision+0x110>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d104      	bne.n	8001070 <APP_voidTakeDecision+0xd4>
	{
		NRF_voidSendData (Data_Sent, 8 ,NRF_NUMBERS_EXIST);
 8001066:	2200      	movs	r2, #0
 8001068:	2108      	movs	r1, #8
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <APP_voidTakeDecision+0x114>)
 800106c:	f000 fcc6 	bl	80019fc <NRF_voidSendData>
	}
	if(System_Mode == Emergency_Mode && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <APP_voidTakeDecision+0x110>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d10a      	bne.n	800108e <APP_voidTakeDecision+0xf2>
 8001078:	2108      	movs	r1, #8
 800107a:	480e      	ldr	r0, [pc, #56]	; (80010b4 <APP_voidTakeDecision+0x118>)
 800107c:	f001 fb00 	bl	8002680 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <APP_voidTakeDecision+0xf2>
	{
		GSM_VidSendSMS((uint8_t*)"01003676020", (uint8_t*)"Robbery is Happening");
 8001086:	490c      	ldr	r1, [pc, #48]	; (80010b8 <APP_voidTakeDecision+0x11c>)
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <APP_voidTakeDecision+0x120>)
 800108a:	f7ff fc13 	bl	80008b4 <GSM_VidSendSMS>
	}
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001c4 	.word	0x200001c4
 800109c:	2000029d 	.word	0x2000029d
 80010a0:	2000029c 	.word	0x2000029c
 80010a4:	2000029f 	.word	0x2000029f
 80010a8:	2000020c 	.word	0x2000020c
 80010ac:	2000003c 	.word	0x2000003c
 80010b0:	200002a4 	.word	0x200002a4
 80010b4:	40010800 	.word	0x40010800
 80010b8:	080058e8 	.word	0x080058e8
 80010bc:	08005900 	.word	0x08005900

080010c0 <APP_voidModeUpdate>:
  * @param Data from BM -->Copy_u8rxData
  * @retval None
  */

void APP_voidModeUpdate()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	if(US_ARR[US_BACKWARD] < 60 )
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <APP_voidModeUpdate+0x3c>)
 80010c6:	88db      	ldrh	r3, [r3, #6]
 80010c8:	2b3b      	cmp	r3, #59	; 0x3b
 80010ca:	d803      	bhi.n	80010d4 <APP_voidModeUpdate+0x14>
	{
		System_Mode = Comm_Mode ;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <APP_voidModeUpdate+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e002      	b.n	80010da <APP_voidModeUpdate+0x1a>
	}
	else
		System_Mode = Normal_Mode ;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <APP_voidModeUpdate+0x40>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	701a      	strb	r2, [r3, #0]

	if(US_ARR[US_FORWARD] < 10 || HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3))
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <APP_voidModeUpdate+0x3c>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	2b09      	cmp	r3, #9
 80010e0:	d906      	bls.n	80010f0 <APP_voidModeUpdate+0x30>
 80010e2:	2108      	movs	r1, #8
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <APP_voidModeUpdate+0x44>)
 80010e6:	f001 facb 	bl	8002680 <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <APP_voidModeUpdate+0x36>
	{
		System_Mode = Emergency_Mode ;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <APP_voidModeUpdate+0x40>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	701a      	strb	r2, [r3, #0]
	}
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000040 	.word	0x20000040
 8001100:	2000003c 	.word	0x2000003c
 8001104:	40010800 	.word	0x40010800

08001108 <HAL_TIM_PeriodElapsedCallback>:
  * @param Handler
  * @retval None
  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]


	TMR_Counter ++ ;
 8001110:	4b46      	ldr	r3, [pc, #280]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800111a:	701a      	strb	r2, [r3, #0]

    /* Reading of all UltraSonic */
    HAL_voidUltraSonic(US_ARR) ;
 800111c:	4844      	ldr	r0, [pc, #272]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800111e:	f000 fde7 	bl	8001cf0 <HAL_voidUltraSonic>

    /* Decision  */
    US_Decision = HAL_UltraSonic_Decision(US_ARR) ;
 8001122:	4843      	ldr	r0, [pc, #268]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001124:	f000 fe82 	bl	8001e2c <HAL_UltraSonic_Decision>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b41      	ldr	r3, [pc, #260]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800112e:	701a      	strb	r2, [r3, #0]

	if (US_Decision == 254)
 8001130:	4b40      	ldr	r3, [pc, #256]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2bfe      	cmp	r3, #254	; 0xfe
 8001136:	d112      	bne.n	800115e <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		Data_Tx.Indication = Normal_Mode 	;
 8001138:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800113a:	2204      	movs	r2, #4
 800113c:	70da      	strb	r2, [r3, #3]
		HAL_voidControlMotors(Normal_SPEED,Car_Direction) ;
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	2032      	movs	r0, #50	; 0x32
 8001146:	f000 fa75 	bl	8001634 <HAL_voidControlMotors>
		Car_Speed = Normal_SPEED ;
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800114c:	2232      	movs	r2, #50	; 0x32
 800114e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t*)"D",1,100);
 8001150:	2364      	movs	r3, #100	; 0x64
 8001152:	2201      	movs	r2, #1
 8001154:	493b      	ldr	r1, [pc, #236]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001156:	483c      	ldr	r0, [pc, #240]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001158:	f003 fcd1 	bl	8004afe <HAL_UART_Transmit>
 800115c:	e02a      	b.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0xac>
	}
	else if (US_Decision == STOP)
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d110      	bne.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		Data_Tx.Indication = INDICATION_SUDDEN_BRAKE 	;
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001168:	2201      	movs	r2, #1
 800116a:	70da      	strb	r2, [r3, #3]
		HAL_voidControlMotors(SPEED_0,STOP) ;
 800116c:	2100      	movs	r1, #0
 800116e:	2000      	movs	r0, #0
 8001170:	f000 fa60 	bl	8001634 <HAL_voidControlMotors>
		Car_Speed = SPEED_0 ;
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t*)"P",1,100);
 800117a:	2364      	movs	r3, #100	; 0x64
 800117c:	2201      	movs	r2, #1
 800117e:	4933      	ldr	r1, [pc, #204]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001180:	4831      	ldr	r0, [pc, #196]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001182:	f003 fcbc 	bl	8004afe <HAL_UART_Transmit>
 8001186:	e015      	b.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0xac>
	}
	else if (US_Decision == SPEED_25)
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b19      	cmp	r3, #25
 800118e:	d111      	bne.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		Data_Tx.Indication = INDICATION_OBSTACLE 	;
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001192:	2203      	movs	r2, #3
 8001194:	70da      	strb	r2, [r3, #3]
		HAL_voidControlMotors(SPEED_25,Car_Direction) ;
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	2019      	movs	r0, #25
 800119e:	f000 fa49 	bl	8001634 <HAL_voidControlMotors>
		Car_Speed = SPEED_25 ;
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80011a4:	2219      	movs	r2, #25
 80011a6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t*)"S",1,100);
 80011a8:	2364      	movs	r3, #100	; 0x64
 80011aa:	2201      	movs	r2, #1
 80011ac:	4928      	ldr	r1, [pc, #160]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80011ae:	4826      	ldr	r0, [pc, #152]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011b0:	f003 fca5 	bl	8004afe <HAL_UART_Transmit>
	}

      /* Update NRF values*/
      Data_Tx.Distance = US_ARR[3] 							;  /* Backward UltraSonic reading */
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011b6:	88db      	ldrh	r3, [r3, #6]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011bc:	709a      	strb	r2, [r3, #2]
	  Data_Sent[4]     = Data_States[2]						;  /* Distance  */
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80011c0:	789a      	ldrb	r2, [r3, #2]
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80011c4:	711a      	strb	r2, [r3, #4]
	  Data_Sent[5]     = Data_Tx.Distance				    ;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011c8:	789a      	ldrb	r2, [r3, #2]
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80011cc:	715a      	strb	r2, [r3, #5]
	  Data_Tx.Speed 	 = Car_Speed						;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011d4:	701a      	strb	r2, [r3, #0]
	  Data_Tx.Direction  = Car_Direction 					;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011dc:	705a      	strb	r2, [r3, #1]

	  Data_Sent[0] = Data_States[0]							;	/* Speed */
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80011e0:	781a      	ldrb	r2, [r3, #0]
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80011e4:	701a      	strb	r2, [r3, #0]
	  Data_Sent[1] = Data_Tx.Speed							;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80011ec:	705a      	strb	r2, [r3, #1]
	  Data_Sent[2] = Data_States[1]							;	/* Direction */
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80011f0:	785a      	ldrb	r2, [r3, #1]
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80011f4:	709a      	strb	r2, [r3, #2]
	  Data_Sent[3] = Data_Tx.Direction						;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011f8:	785a      	ldrb	r2, [r3, #1]
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80011fc:	70da      	strb	r2, [r3, #3]
	  Data_Sent[7] = Data_Tx.Indication						;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001200:	78da      	ldrb	r2, [r3, #3]
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001204:	71da      	strb	r2, [r3, #7]


	/* Delay 2 Second */
	if (TMR_Counter == 10 )
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b0a      	cmp	r3, #10
 800120c:	d109      	bne.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x11a>
	  {
		TMR_Counter = 0 ;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
		HAL_voidControlMotors(SPEED_0 , STOP ) 	  ;
 8001214:	2100      	movs	r1, #0
 8001216:	2000      	movs	r0, #0
 8001218:	f000 fa0c 	bl	8001634 <HAL_voidControlMotors>
		HAL_TIM_Base_Stop_IT(&htim3)  ;
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800121e:	f002 fce3 	bl	8003be8 <HAL_TIM_Base_Stop_IT>

	  }

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200002a0 	.word	0x200002a0
 8001230:	20000040 	.word	0x20000040
 8001234:	200002a1 	.word	0x200002a1
 8001238:	200002ac 	.word	0x200002ac
 800123c:	2000029d 	.word	0x2000029d
 8001240:	2000029e 	.word	0x2000029e
 8001244:	0800590c 	.word	0x0800590c
 8001248:	2000020c 	.word	0x2000020c
 800124c:	08005910 	.word	0x08005910
 8001250:	08005914 	.word	0x08005914
 8001254:	20000050 	.word	0x20000050
 8001258:	200002a4 	.word	0x200002a4
 800125c:	200001c4 	.word	0x200001c4

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_MspInit+0x5c>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_MspInit+0x5c>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6193      	str	r3, [r2, #24]
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_MspInit+0x5c>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_MspInit+0x5c>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <HAL_MspInit+0x5c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_MspInit+0x5c>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_MspInit+0x60>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_MspInit+0x60>)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010000 	.word	0x40010000

080012d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <HAL_SPI_MspInit+0x88>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d12f      	bne.n	8001350 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_SPI_MspInit+0x8c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_SPI_MspInit+0x8c>)
 80012f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_SPI_MspInit+0x8c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_SPI_MspInit+0x8c>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <HAL_SPI_MspInit+0x8c>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_SPI_MspInit+0x8c>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001320:	23a0      	movs	r3, #160	; 0xa0
 8001322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <HAL_SPI_MspInit+0x90>)
 8001334:	f001 f820 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001338:	2340      	movs	r3, #64	; 0x40
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <HAL_SPI_MspInit+0x90>)
 800134c:	f001 f814 	bl	8002378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40013000 	.word	0x40013000
 800135c:	40021000 	.word	0x40021000
 8001360:	40010800 	.word	0x40010800

08001364 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_TIM_PWM_MspInit+0x34>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10b      	bne.n	800138e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_TIM_PWM_MspInit+0x38>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_TIM_PWM_MspInit+0x38>)
 800137c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001380:	6193      	str	r3, [r2, #24]
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_TIM_PWM_MspInit+0x38>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40012c00 	.word	0x40012c00
 800139c:	40021000 	.word	0x40021000

080013a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b0:	d10c      	bne.n	80013cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ca:	e018      	b.n	80013fe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_TIM_Base_MspInit+0x6c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d113      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	201d      	movs	r0, #29
 80013f4:	f000 fed7 	bl	80021a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013f8:	201d      	movs	r0, #29
 80013fa:	f000 fef0 	bl	80021de <HAL_NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	40000400 	.word	0x40000400

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a10      	ldr	r2, [pc, #64]	; (800146c <HAL_TIM_MspPostInit+0x5c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d118      	bne.n	8001462 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_TIM_MspPostInit+0x60>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_TIM_MspPostInit+0x60>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_TIM_MspPostInit+0x60>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EN1_Pin;
 8001448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2302      	movs	r3, #2
 8001454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_TIM_MspPostInit+0x64>)
 800145e:	f000 ff8b 	bl	8002378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40012c00 	.word	0x40012c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40010800 	.word	0x40010800

08001478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a42      	ldr	r2, [pc, #264]	; (800159c <HAL_UART_MspInit+0x124>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d146      	bne.n	8001526 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001498:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <HAL_UART_MspInit+0x128>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <HAL_UART_MspInit+0x128>)
 800149e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <HAL_UART_MspInit+0x128>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b0:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_UART_MspInit+0x128>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a3a      	ldr	r2, [pc, #232]	; (80015a0 <HAL_UART_MspInit+0x128>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <HAL_UART_MspInit+0x128>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c8:	2340      	movs	r3, #64	; 0x40
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4832      	ldr	r0, [pc, #200]	; (80015a4 <HAL_UART_MspInit+0x12c>)
 80014dc:	f000 ff4c 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <HAL_UART_MspInit+0x12c>)
 80014f4:	f000 ff40 	bl	8002378 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_UART_MspInit+0x130>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150e:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <HAL_UART_MspInit+0x130>)
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2025      	movs	r0, #37	; 0x25
 800151a:	f000 fe44 	bl	80021a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800151e:	2025      	movs	r0, #37	; 0x25
 8001520:	f000 fe5d 	bl	80021de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001524:	e036      	b.n	8001594 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a20      	ldr	r2, [pc, #128]	; (80015ac <HAL_UART_MspInit+0x134>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d131      	bne.n	8001594 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_UART_MspInit+0x128>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_UART_MspInit+0x128>)
 8001536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153a:	61d3      	str	r3, [r2, #28]
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_UART_MspInit+0x128>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0x128>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_UART_MspInit+0x128>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_UART_MspInit+0x128>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <HAL_UART_MspInit+0x12c>)
 8001576:	f000 feff 	bl	8002378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800157a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_UART_MspInit+0x12c>)
 8001590:	f000 fef2 	bl	8002378 <HAL_GPIO_Init>
}
 8001594:	bf00      	nop
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40013800 	.word	0x40013800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010c00 	.word	0x40010c00
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40004800 	.word	0x40004800

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 fcbf 	bl	8001f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM3_IRQHandler+0x10>)
 8001606:	f002 fc0f 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200001c4 	.word	0x200001c4

08001614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <USART1_IRQHandler+0x10>)
 800161a:	f003 fbab 	bl	8004d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000020c 	.word	0x2000020c

08001628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <HAL_voidControlMotors>:
#include "HAL/DC_MOTOR.h"

extern TIM_HandleTypeDef htim1;

void HAL_voidControlMotors(uint8_t speed, uint8_t direction)
{
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	460a      	mov	r2, r1
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	4613      	mov	r3, r2
 8001642:	71bb      	strb	r3, [r7, #6]
    if (speed == 0)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_voidControlMotors+0x48>
    {
        HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001650:	4866      	ldr	r0, [pc, #408]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 8001652:	f001 f82c 	bl	80026ae <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800165c:	4863      	ldr	r0, [pc, #396]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 800165e:	f001 f826 	bl	80026ae <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001668:	4861      	ldr	r0, [pc, #388]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 800166a:	f001 f820 	bl	80026ae <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001674:	485e      	ldr	r0, [pc, #376]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 8001676:	f001 f81a 	bl	80026ae <HAL_GPIO_WritePin>

        // Start the PWM generation for motor1
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

    }
}
 800167a:	e0b2      	b.n	80017e2 <HAL_voidControlMotors+0x1ae>
        HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_EN_PIN , GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001682:	485b      	ldr	r0, [pc, #364]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 8001684:	f001 f813 	bl	80026ae <HAL_GPIO_WritePin>
        if (direction == STOP)
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <HAL_voidControlMotors+0x8c>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001694:	4855      	ldr	r0, [pc, #340]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 8001696:	f001 f80a 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a0:	4852      	ldr	r0, [pc, #328]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 80016a2:	f001 f804 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ac:	4850      	ldr	r0, [pc, #320]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 80016ae:	f000 fffe 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b8:	484d      	ldr	r0, [pc, #308]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 80016ba:	f000 fff8 	bl	80026ae <HAL_GPIO_WritePin>
 80016be:	e07a      	b.n	80017b6 <HAL_voidControlMotors+0x182>
        else if (direction == BACKWARD)
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d118      	bne.n	80016f8 <HAL_voidControlMotors+0xc4>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016cc:	4847      	ldr	r0, [pc, #284]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 80016ce:	f000 ffee 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d8:	4844      	ldr	r0, [pc, #272]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 80016da:	f000 ffe8 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e4:	4842      	ldr	r0, [pc, #264]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 80016e6:	f000 ffe2 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f0:	483f      	ldr	r0, [pc, #252]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 80016f2:	f000 ffdc 	bl	80026ae <HAL_GPIO_WritePin>
 80016f6:	e05e      	b.n	80017b6 <HAL_voidControlMotors+0x182>
        else if (direction == FORWARD)
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d118      	bne.n	8001730 <HAL_voidControlMotors+0xfc>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001704:	4839      	ldr	r0, [pc, #228]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 8001706:	f000 ffd2 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001710:	4836      	ldr	r0, [pc, #216]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 8001712:	f000 ffcc 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171c:	4834      	ldr	r0, [pc, #208]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 800171e:	f000 ffc6 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001728:	4831      	ldr	r0, [pc, #196]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 800172a:	f000 ffc0 	bl	80026ae <HAL_GPIO_WritePin>
 800172e:	e042      	b.n	80017b6 <HAL_voidControlMotors+0x182>
        else if (direction == RIGHT)
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d11e      	bne.n	8001774 <HAL_voidControlMotors+0x140>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_EN_PIN , GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173c:	482c      	ldr	r0, [pc, #176]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 800173e:	f000 ffb6 	bl	80026ae <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001748:	4829      	ldr	r0, [pc, #164]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 800174a:	f000 ffb0 	bl	80026ae <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001754:	4826      	ldr	r0, [pc, #152]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 8001756:	f000 ffaa 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001760:	4822      	ldr	r0, [pc, #136]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 8001762:	f000 ffa4 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176c:	481f      	ldr	r0, [pc, #124]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 800176e:	f000 ff9e 	bl	80026ae <HAL_GPIO_WritePin>
 8001772:	e020      	b.n	80017b6 <HAL_voidControlMotors+0x182>
        else if (direction == LEFT)
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	2b04      	cmp	r3, #4
 8001778:	d11d      	bne.n	80017b6 <HAL_voidControlMotors+0x182>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_EN_PIN , GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001780:	481b      	ldr	r0, [pc, #108]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 8001782:	f000 ff94 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178c:	4818      	ldr	r0, [pc, #96]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 800178e:	f000 ff8e 	bl	80026ae <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001798:	4815      	ldr	r0, [pc, #84]	; (80017f0 <HAL_voidControlMotors+0x1bc>)
 800179a:	f000 ff88 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a4:	4811      	ldr	r0, [pc, #68]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 80017a6:	f000 ff82 	bl	80026ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <HAL_voidControlMotors+0x1b8>)
 80017b2:	f000 ff7c 	bl	80026ae <HAL_GPIO_WritePin>
        uint64_t dutyCycle1 = (speed * htim1.Init.Period) / 100;
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_voidControlMotors+0x1c0>)
 80017ba:	68d2      	ldr	r2, [r2, #12]
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <HAL_voidControlMotors+0x1c4>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2200      	movs	r2, #0
 80017ca:	461c      	mov	r4, r3
 80017cc:	4615      	mov	r5, r2
 80017ce:	e9c7 4502 	strd	r4, r5, [r7, #8]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle1);
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_voidControlMotors+0x1c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017da:	2100      	movs	r1, #0
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_voidControlMotors+0x1c0>)
 80017de:	f002 fa81 	bl	8003ce4 <HAL_TIM_PWM_Start>
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40010c00 	.word	0x40010c00
 80017f4:	20000134 	.word	0x20000134
 80017f8:	51eb851f 	.word	0x51eb851f

080017fc <NRF_ChipSelect>:
uint8_t Send_Data[10] ;

extern UART_HandleTypeDef huart1;

void NRF_ChipSelect (void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_RESET) ;
 8001800:	2200      	movs	r2, #0
 8001802:	2104      	movs	r1, #4
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <NRF_ChipSelect+0x14>)
 8001806:	f000 ff52 	bl	80026ae <HAL_GPIO_WritePin>
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40010800 	.word	0x40010800

08001814 <NRF_ChipUnSelect>:

void NRF_ChipUnSelect (void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_SET) ;
 8001818:	2201      	movs	r2, #1
 800181a:	2104      	movs	r1, #4
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <NRF_ChipUnSelect+0x14>)
 800181e:	f000 ff46 	bl	80026ae <HAL_GPIO_WritePin>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40010800 	.word	0x40010800

0800182c <NRF_ChipEnable>:


void NRF_ChipEnable (void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET) ;
 8001830:	2201      	movs	r2, #1
 8001832:	2102      	movs	r1, #2
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <NRF_ChipEnable+0x14>)
 8001836:	f000 ff3a 	bl	80026ae <HAL_GPIO_WritePin>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40010800 	.word	0x40010800

08001844 <NRF_ChipDisable>:

void NRF_ChipDisable (void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET) ;
 8001848:	2200      	movs	r2, #0
 800184a:	2102      	movs	r1, #2
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <NRF_ChipDisable+0x14>)
 800184e:	f000 ff2e 	bl	80026ae <HAL_GPIO_WritePin>
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40010800 	.word	0x40010800

0800185c <NRF_voidWriteByteReg>:
 * Return : None
 * note :
 *
 */
void NRF_voidWriteByteReg(uint8_t Copy_u8Reg , uint8_t Copy_u8RegData)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	460a      	mov	r2, r1
 8001866:	71fb      	strb	r3, [r7, #7]
 8001868:	4613      	mov	r3, r2
 800186a:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[2] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f043 0320 	orr.w	r3, r3, #32
 8001872:	b2db      	uxtb	r3, r3
 8001874:	733b      	strb	r3, [r7, #12]

	/* Data to be written */
	Local_Buffer[1] =  Copy_u8RegData ;
 8001876:	79bb      	ldrb	r3, [r7, #6]
 8001878:	737b      	strb	r3, [r7, #13]

	/* Chip Select */
	NRF_ChipSelect() ;
 800187a:	f7ff ffbf 	bl	80017fc <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, Local_Buffer,2,1000) ;
 800187e:	f107 010c 	add.w	r1, r7, #12
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	2202      	movs	r2, #2
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <NRF_voidWriteByteReg+0x40>)
 800188a:	f001 fbbd 	bl	8003008 <HAL_SPI_Transmit>

	/* Release"Unselect"  device */
	NRF_ChipUnSelect () ;
 800188e:	f7ff ffc1 	bl	8001814 <NRF_ChipUnSelect>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200000dc 	.word	0x200000dc

080018a0 <NRF_voidWriteMultiByteReg>:
 * note :
 *
 */

void NRF_voidWriteMultiByteReg(uint8_t Copy_u8Reg , uint8_t *Data , uint8_t Copy_u8Size)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
 80018ac:	4613      	mov	r3, r2
 80018ae:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[1] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f043 0320 	orr.w	r3, r3, #32
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	733b      	strb	r3, [r7, #12]

	/* Chip Select */
	NRF_ChipSelect() ;
 80018ba:	f7ff ff9f 	bl	80017fc <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1,Local_Buffer,1,100) ;
 80018be:	f107 010c 	add.w	r1, r7, #12
 80018c2:	2364      	movs	r3, #100	; 0x64
 80018c4:	2201      	movs	r2, #1
 80018c6:	4808      	ldr	r0, [pc, #32]	; (80018e8 <NRF_voidWriteMultiByteReg+0x48>)
 80018c8:	f001 fb9e 	bl	8003008 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF_SPI1,Data,Copy_u8Size,1000) ;
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <NRF_voidWriteMultiByteReg+0x48>)
 80018d8:	f001 fb96 	bl	8003008 <HAL_SPI_Transmit>

	/* Release"Unselect"device */
	NRF_ChipUnSelect () ;
 80018dc:	f7ff ff9a 	bl	8001814 <NRF_ChipUnSelect>
}
 80018e0:	bf00      	nop
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200000dc 	.word	0x200000dc

080018ec <NRF_u8ReadByteReg>:
 * Return : Register Value
 * note :
 *
 */
uint8_t NRF_u8ReadByteReg(uint8_t Copy_u8Reg)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_Data = 0 ;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]

	/* Chip Select */
	NRF_ChipSelect() ;
 80018fa:	f7ff ff7f 	bl	80017fc <NRF_ChipSelect>

	/* Receive Data */
	HAL_SPI_Transmit(NRF_SPI1,&Copy_u8Reg,1,100 ) ;
 80018fe:	1df9      	adds	r1, r7, #7
 8001900:	2364      	movs	r3, #100	; 0x64
 8001902:	2201      	movs	r2, #1
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <NRF_u8ReadByteReg+0x48>)
 8001906:	f001 fb7f 	bl	8003008 <HAL_SPI_Transmit>
	HAL_Delay(100) ;
 800190a:	2064      	movs	r0, #100	; 0x64
 800190c:	f000 fb50 	bl	8001fb0 <HAL_Delay>
	HAL_SPI_Receive(NRF_SPI1,&Local_Data,1,1000) ;
 8001910:	f107 010f 	add.w	r1, r7, #15
 8001914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001918:	2201      	movs	r2, #1
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <NRF_u8ReadByteReg+0x48>)
 800191c:	f001 fcb7 	bl	800328e <HAL_SPI_Receive>
	HAL_Delay(100) ;
 8001920:	2064      	movs	r0, #100	; 0x64
 8001922:	f000 fb45 	bl	8001fb0 <HAL_Delay>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 8001926:	f7ff ff75 	bl	8001814 <NRF_ChipUnSelect>

	return Local_Data ;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200000dc 	.word	0x200000dc

08001938 <NRF_voidCommandSet>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidCommandSet (uint8_t Copy_u8Command )
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
	/* Chip Select */
	NRF_ChipSelect() ;
 8001942:	f7ff ff5b 	bl	80017fc <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, &Copy_u8Command, 1 ,100) ;
 8001946:	1df9      	adds	r1, r7, #7
 8001948:	2364      	movs	r3, #100	; 0x64
 800194a:	2201      	movs	r2, #1
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <NRF_voidCommandSet+0x28>)
 800194e:	f001 fb5b 	bl	8003008 <HAL_SPI_Transmit>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 8001952:	f7ff ff5f 	bl	8001814 <NRF_ChipUnSelect>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200000dc 	.word	0x200000dc

08001964 <NRF_voidInit>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidInit ()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	/* Disable Chip */
	NRF_ChipDisable () ;
 8001968:	f7ff ff6c 	bl	8001844 <NRF_ChipDisable>

	/* Reset All Registers */
	//NRF_voidResetNRF(0X00) ;

	/* Config Init */
	NRF_voidWriteByteReg(CONFIG,0x00) ;
 800196c:	2100      	movs	r1, #0
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff ff74 	bl	800185c <NRF_voidWriteByteReg>

	/* EN_AA Init "NO ACK is Used" */
	NRF_voidWriteByteReg(EN_AA,0x00) ;
 8001974:	2100      	movs	r1, #0
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff ff70 	bl	800185c <NRF_voidWriteByteReg>

	/* EN_RXADDR Init "Disable Data pipes for now"  */
	NRF_voidWriteByteReg(EN_RXADDR,0x00) ;
 800197c:	2100      	movs	r1, #0
 800197e:	2002      	movs	r0, #2
 8001980:	f7ff ff6c 	bl	800185c <NRF_voidWriteByteReg>

	/* SETUP_AW Init "Width of data pipe Addresses" */
	NRF_voidWriteByteReg(SETUP_AW,0x03) ;	  	  //5 Byte Address Width
 8001984:	2103      	movs	r1, #3
 8001986:	2003      	movs	r0, #3
 8001988:	f7ff ff68 	bl	800185c <NRF_voidWriteByteReg>

	/* SETUP_RETR Init "Auto Transmit time " */
	NRF_voidWriteByteReg(SETUP_RETR,0x00) ;	  //Disable Auto Transmit
 800198c:	2100      	movs	r1, #0
 800198e:	2004      	movs	r0, #4
 8001990:	f7ff ff64 	bl	800185c <NRF_voidWriteByteReg>

	/* RF_CH Init "Channel Number" */
	NRF_voidWriteByteReg(RF_CH,0x00) ;	  	  //Disable for now will be configured later
 8001994:	2100      	movs	r1, #0
 8001996:	2005      	movs	r0, #5
 8001998:	f7ff ff60 	bl	800185c <NRF_voidWriteByteReg>

	/* RF_SETUP Init "BaudRate , Power" */
	NRF_voidWriteByteReg(RF_SETUP,0x0E) ;	   	   //0dBM, 2Mbps
 800199c:	210e      	movs	r1, #14
 800199e:	2006      	movs	r0, #6
 80019a0:	f7ff ff5c 	bl	800185c <NRF_voidWriteByteReg>

	/* Enable Chip */
	NRF_ChipEnable () ;
 80019a4:	f7ff ff42 	bl	800182c <NRF_ChipEnable>


}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <NRF_voidTransmitterMode>:
 * note :
 *
 */

void NRF_voidTransmitterMode (uint8_t * Address ,uint8_t Copy_u8Channel_Number )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	70fb      	strb	r3, [r7, #3]
	/* Disable Chip */
	NRF_ChipDisable () ;
 80019b8:	f7ff ff44 	bl	8001844 <NRF_ChipDisable>

	/* Select Channel */
	NRF_voidWriteByteReg(RF_CH,Copy_u8Channel_Number) ;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	4619      	mov	r1, r3
 80019c0:	2005      	movs	r0, #5
 80019c2:	f7ff ff4b 	bl	800185c <NRF_voidWriteByteReg>

	/* Transmit Address */
	NRF_voidWriteMultiByteReg(TX_ADDR,Address,5) ;
 80019c6:	2205      	movs	r2, #5
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	2010      	movs	r0, #16
 80019cc:	f7ff ff68 	bl	80018a0 <NRF_voidWriteMultiByteReg>

	/* Power up Device and select the device as TX */
	uint8_t Temp ;
	Temp = NRF_u8ReadByteReg(CONFIG);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff ff8b 	bl	80018ec <NRF_u8ReadByteReg>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
	Temp = Temp | (1<<1) | (0<<0) ;   // 0b0000 0010
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	73fb      	strb	r3, [r7, #15]
	NRF_voidWriteByteReg(CONFIG,0x02) ;
 80019e2:	2102      	movs	r1, #2
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff ff39 	bl	800185c <NRF_voidWriteByteReg>
	HAL_Delay(100) ;
 80019ea:	2064      	movs	r0, #100	; 0x64
 80019ec:	f000 fae0 	bl	8001fb0 <HAL_Delay>

	/* Enable Chip */
	NRF_ChipEnable () ;
 80019f0:	f7ff ff1c 	bl	800182c <NRF_ChipEnable>


}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <NRF_voidSendData>:
 * note :
 *
 */

void NRF_voidSendData (uint8_t * Data , uint8_t Copy_u8SizeinByte ,uint8_t Copy_u8CharFlag  )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	70bb      	strb	r3, [r7, #2]
	/* Counter of For Loop */
	uint8_t Local_Counter = 0 ;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
	/* Array Index */
	uint8_t Local_ArrayIndex = 0 ;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73bb      	strb	r3, [r7, #14]

	/* Chip Select  */
	NRF_ChipSelect() ;
 8001a14:	f7ff fef2 	bl	80017fc <NRF_ChipSelect>

   uint8_t Temp = W_TX_PAYLOAD ;
 8001a18:	23a0      	movs	r3, #160	; 0xa0
 8001a1a:	733b      	strb	r3, [r7, #12]

   /* Get the Receiver ready , Next Pay-Load is Data */
   HAL_SPI_Transmit(NRF_SPI1, &Temp, 1 , 100) ;
 8001a1c:	f107 010c 	add.w	r1, r7, #12
 8001a20:	2364      	movs	r3, #100	; 0x64
 8001a22:	2201      	movs	r2, #1
 8001a24:	482d      	ldr	r0, [pc, #180]	; (8001adc <NRF_voidSendData+0xe0>)
 8001a26:	f001 faef 	bl	8003008 <HAL_SPI_Transmit>

   /* Always First Byte is Character */
   Send_Data[0] = Data[0] ;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <NRF_voidSendData+0xe4>)
 8001a30:	701a      	strb	r2, [r3, #0]
   Local_ArrayIndex ++ ;
 8001a32:	7bbb      	ldrb	r3, [r7, #14]
 8001a34:	3301      	adds	r3, #1
 8001a36:	73bb      	strb	r3, [r7, #14]

   if (Copy_u8CharFlag == NRF_NUMBERS_EXIST )
 8001a38:	78bb      	ldrb	r3, [r7, #2]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d115      	bne.n	8001a6a <NRF_voidSendData+0x6e>
   {
	   /* Number(s) */
	   for (Local_Counter = 1 ; Local_Counter < Copy_u8SizeinByte ; Local_Counter++ )
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e00e      	b.n	8001a62 <NRF_voidSendData+0x66>
	   {
		   Local_ArrayIndex= HAL_NRF_Send_Number(Data[Local_Counter] ,Local_Counter ) ;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f000 f846 	bl	8001ae4 <HAL_NRF_Send_Number>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73bb      	strb	r3, [r7, #14]
	   for (Local_Counter = 1 ; Local_Counter < Copy_u8SizeinByte ; Local_Counter++ )
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d3ec      	bcc.n	8001a44 <NRF_voidSendData+0x48>
	   }

   }

   /* Last Element is + */
   Send_Data[Local_ArrayIndex] = '+' ;
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <NRF_voidSendData+0xe4>)
 8001a6e:	212b      	movs	r1, #43	; 0x2b
 8001a70:	54d1      	strb	r1, [r2, r3]

   /* Send Pay-Load "Data" */
   HAL_SPI_Transmit(NRF_SPI1, Send_Data, (Local_ArrayIndex+1) , 10000) ;
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a7e:	4918      	ldr	r1, [pc, #96]	; (8001ae0 <NRF_voidSendData+0xe4>)
 8001a80:	4816      	ldr	r0, [pc, #88]	; (8001adc <NRF_voidSendData+0xe0>)
 8001a82:	f001 fac1 	bl	8003008 <HAL_SPI_Transmit>

	/* Chip UnSelect  */
	NRF_ChipUnSelect() ;
 8001a86:	f7ff fec5 	bl	8001814 <NRF_ChipUnSelect>

	/* Delay */
	HAL_Delay(1) ;
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f000 fa90 	bl	8001fb0 <HAL_Delay>

	/* Check if TX Buffer is empty or not */
	uint8_t Local_FIFOStatus ;
	Local_FIFOStatus = NRF_u8ReadByteReg(FIFO_STATUS) ;
 8001a90:	2017      	movs	r0, #23
 8001a92:	f7ff ff2b 	bl	80018ec <NRF_u8ReadByteReg>
 8001a96:	4603      	mov	r3, r0
 8001a98:	737b      	strb	r3, [r7, #13]



	// 4 --> TX_EMPTY(1)
	if ((Local_FIFOStatus & (1<<4)))
 8001a9a:	7b7b      	ldrb	r3, [r7, #13]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <NRF_voidSendData+0xba>
	{
		/* Put Any-Condition To Check */

		Temp = FLUSH_TX ;
 8001aa4:	23e1      	movs	r3, #225	; 0xe1
 8001aa6:	733b      	strb	r3, [r7, #12]
		/* Flush TX */
		NRF_voidCommandSet(Temp);
 8001aa8:	7b3b      	ldrb	r3, [r7, #12]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff44 	bl	8001938 <NRF_voidCommandSet>

		// Reset FIFO_STATUS
		NRF_voidResetNRF(FIFO_STATUS) ;
 8001ab0:	2017      	movs	r0, #23
 8001ab2:	f000 f86b 	bl	8001b8c <NRF_voidResetNRF>

	}

	/* Reinitialize the array with Zeros */
   for (Local_Counter = 0 ; Local_Counter<10 ; Local_Counter++ )
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e006      	b.n	8001aca <NRF_voidSendData+0xce>
   {
	   Send_Data[Local_Counter] = 0 ;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <NRF_voidSendData+0xe4>)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	54d1      	strb	r1, [r2, r3]
   for (Local_Counter = 0 ; Local_Counter<10 ; Local_Counter++ )
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d9f5      	bls.n	8001abc <NRF_voidSendData+0xc0>
   }



}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200000dc 	.word	0x200000dc
 8001ae0:	200002b0 	.word	0x200002b0

08001ae4 <HAL_NRF_Send_Number>:
 * note :
 *
 */

uint8_t HAL_NRF_Send_Number(uint32_t Copy_u32Number , uint8_t Copy_u8Number_Index)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]

	uint8_t Local_u8Number_Element = 0  ;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
	uint8_t Main_Arr[5] = {0}			;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	2300      	movs	r3, #0
 8001afa:	733b      	strb	r3, [r7, #12]

	if (Copy_u32Number == 0)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d11e      	bne.n	8001b40 <HAL_NRF_Send_Number+0x5c>
	{
		Local_u8Number_Element++ ;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	3301      	adds	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e01d      	b.n	8001b46 <HAL_NRF_Send_Number+0x62>
	else
	{
    /* Splitting Number */
    while (Copy_u32Number > 0)
    {
    	Main_Arr[Local_u8Number_Element] = (Copy_u32Number % 10) + 48 ;
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_NRF_Send_Number+0xa0>)
 8001b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	1aca      	subs	r2, r1, r3
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	3230      	adds	r2, #48	; 0x30
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	3310      	adds	r3, #16
 8001b28:	443b      	add	r3, r7
 8001b2a:	f803 2c08 	strb.w	r2, [r3, #-8]
    	Copy_u32Number = Copy_u32Number / 10 ;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <HAL_NRF_Send_Number+0xa0>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	08db      	lsrs	r3, r3, #3
 8001b38:	607b      	str	r3, [r7, #4]
    	Local_u8Number_Element++ ;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
    while (Copy_u32Number > 0)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1e1      	bne.n	8001b0a <HAL_NRF_Send_Number+0x26>
    }

	}
    /* Copy the elements of Main_Arr --> Reverted_Arr then send them to UART in correct order */

    for (uint8_t Revert_Index = 0 ; Revert_Index<Local_u8Number_Element ; Revert_Index++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	73bb      	strb	r3, [r7, #14]
 8001b4a:	e010      	b.n	8001b6e <HAL_NRF_Send_Number+0x8a>
    {
    	Send_Data[Copy_u8Number_Index] = Main_Arr[Local_u8Number_Element-Revert_Index-1] ;
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	1e5a      	subs	r2, r3, #1
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	3210      	adds	r2, #16
 8001b58:	443a      	add	r2, r7
 8001b5a:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_NRF_Send_Number+0xa4>)
 8001b60:	54d1      	strb	r1, [r2, r3]
    	Copy_u8Number_Index ++ ;
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	3301      	adds	r3, #1
 8001b66:	70fb      	strb	r3, [r7, #3]
    for (uint8_t Revert_Index = 0 ; Revert_Index<Local_u8Number_Element ; Revert_Index++)
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	73bb      	strb	r3, [r7, #14]
 8001b6e:	7bba      	ldrb	r2, [r7, #14]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d3ea      	bcc.n	8001b4c <HAL_NRF_Send_Number+0x68>
    }

    return Copy_u8Number_Index ;
 8001b76:	78fb      	ldrb	r3, [r7, #3]

}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	cccccccd 	.word	0xcccccccd
 8001b88:	200002b0 	.word	0x200002b0

08001b8c <NRF_voidResetNRF>:
 *
 */


void NRF_voidResetNRF(uint8_t Copy_u8REG)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8REG == STATUS)
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b07      	cmp	r3, #7
 8001b9a:	d104      	bne.n	8001ba6 <NRF_voidResetNRF+0x1a>
	{
		NRF_voidWriteByteReg(STATUS, 0x00);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2007      	movs	r0, #7
 8001ba0:	f7ff fe5c 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
	NRF_voidWriteByteReg(DYNPD, 0);
	NRF_voidWriteByteReg(FEATURE, 0);
	}
}
 8001ba4:	e090      	b.n	8001cc8 <NRF_voidResetNRF+0x13c>
	else if (Copy_u8REG == FIFO_STATUS)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b17      	cmp	r3, #23
 8001baa:	d104      	bne.n	8001bb6 <NRF_voidResetNRF+0x2a>
		NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 8001bac:	2111      	movs	r1, #17
 8001bae:	2017      	movs	r0, #23
 8001bb0:	f7ff fe54 	bl	800185c <NRF_voidWriteByteReg>
}
 8001bb4:	e088      	b.n	8001cc8 <NRF_voidResetNRF+0x13c>
	NRF_voidWriteByteReg(CONFIG, 0x08);
 8001bb6:	2108      	movs	r1, #8
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff fe4f 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_AA, 0x3F);
 8001bbe:	213f      	movs	r1, #63	; 0x3f
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff fe4b 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_RXADDR, 0x03);
 8001bc6:	2103      	movs	r1, #3
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f7ff fe47 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_AW, 0x03);
 8001bce:	2103      	movs	r1, #3
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f7ff fe43 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_RETR, 0x03);
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	2004      	movs	r0, #4
 8001bda:	f7ff fe3f 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_CH, 0x02);
 8001bde:	2102      	movs	r1, #2
 8001be0:	2005      	movs	r0, #5
 8001be2:	f7ff fe3b 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_SETUP, 0x0E);
 8001be6:	210e      	movs	r1, #14
 8001be8:	2006      	movs	r0, #6
 8001bea:	f7ff fe37 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(STATUS, 0x00);
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2007      	movs	r0, #7
 8001bf2:	f7ff fe33 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(OBSERVE_TX, 0x00);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2008      	movs	r0, #8
 8001bfa:	f7ff fe2f 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(CD, 0x00);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2009      	movs	r0, #9
 8001c02:	f7ff fe2b 	bl	800185c <NRF_voidWriteByteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001c06:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <NRF_voidResetNRF+0x144>)
 8001c08:	f107 0318 	add.w	r3, r7, #24
 8001c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c10:	6018      	str	r0, [r3, #0]
 8001c12:	3304      	adds	r3, #4
 8001c14:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	200a      	movs	r0, #10
 8001c20:	f7ff fe3e 	bl	80018a0 <NRF_voidWriteMultiByteReg>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001c24:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <NRF_voidResetNRF+0x148>)
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c2e:	6018      	str	r0, [r3, #0]
 8001c30:	3304      	adds	r3, #4
 8001c32:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2205      	movs	r2, #5
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	200b      	movs	r0, #11
 8001c3e:	f7ff fe2f 	bl	80018a0 <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P2, 0xC3);
 8001c42:	21c3      	movs	r1, #195	; 0xc3
 8001c44:	200c      	movs	r0, #12
 8001c46:	f7ff fe09 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P3, 0xC4);
 8001c4a:	21c4      	movs	r1, #196	; 0xc4
 8001c4c:	200d      	movs	r0, #13
 8001c4e:	f7ff fe05 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P4, 0xC5);
 8001c52:	21c5      	movs	r1, #197	; 0xc5
 8001c54:	200e      	movs	r0, #14
 8001c56:	f7ff fe01 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P5, 0xC6);
 8001c5a:	21c6      	movs	r1, #198	; 0xc6
 8001c5c:	200f      	movs	r0, #15
 8001c5e:	f7ff fdfd 	bl	800185c <NRF_voidWriteByteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <NRF_voidResetNRF+0x144>)
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c6c:	6018      	str	r0, [r3, #0]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(TX_ADDR, tx_addr_def, 5);
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	2205      	movs	r2, #5
 8001c78:	4619      	mov	r1, r3
 8001c7a:	2010      	movs	r0, #16
 8001c7c:	f7ff fe10 	bl	80018a0 <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_PW_P0, 0);
 8001c80:	2100      	movs	r1, #0
 8001c82:	2011      	movs	r0, #17
 8001c84:	f7ff fdea 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P1, 0);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2012      	movs	r0, #18
 8001c8c:	f7ff fde6 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P2, 0);
 8001c90:	2100      	movs	r1, #0
 8001c92:	2013      	movs	r0, #19
 8001c94:	f7ff fde2 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P3, 0);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2014      	movs	r0, #20
 8001c9c:	f7ff fdde 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P4, 0);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2015      	movs	r0, #21
 8001ca4:	f7ff fdda 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2016      	movs	r0, #22
 8001cac:	f7ff fdd6 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 8001cb0:	2111      	movs	r1, #17
 8001cb2:	2017      	movs	r0, #23
 8001cb4:	f7ff fdd2 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(DYNPD, 0);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	201c      	movs	r0, #28
 8001cbc:	f7ff fdce 	bl	800185c <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FEATURE, 0);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	201d      	movs	r0, #29
 8001cc4:	f7ff fdca 	bl	800185c <NRF_voidWriteByteReg>
}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	08005918 	.word	0x08005918
 8001cd4:	08005920 	.word	0x08005920

08001cd8 <HAL_voidUltraSonicInit>:
   // {GPIOB, GPIOB, GPIO_PIN_13, GPIO_PIN_14, &val1_Ultrsonic_3, &val2_Ultrsonic_3, &distance3},
   // {GPIOA, GPIOB, GPIO_PIN_15, GPIO_PIN_15, &val1_Ultrsonic_4, &val2_Ultrsonic_4, &distance4}
};

void HAL_voidUltraSonicInit(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <HAL_voidUltraSonicInit+0x10>)
 8001cde:	f001 fee7 	bl	8003ab0 <HAL_TIM_Base_Start>
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000017c 	.word	0x2000017c
 8001cec:	00000000 	.word	0x00000000

08001cf0 <HAL_voidUltraSonic>:


void HAL_voidUltraSonic (uint16_t *UltraSonic_Reading)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < ULTRA_COUNT; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	e080      	b.n	8001e00 <HAL_voidUltraSonic+0x110>
	{
		UltrasonicSensor sensor = ultrasonicSensors[i];
 8001cfe:	4948      	ldr	r1, [pc, #288]	; (8001e20 <HAL_voidUltraSonic+0x130>)
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f107 040c 	add.w	r4, r7, #12
 8001d10:	461d      	mov	r5, r3
 8001d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d1a:	e884 0003 	stmia.w	r4, {r0, r1}



		HAL_GPIO_WritePin(sensor.trigPort, sensor.trigPin, GPIO_PIN_SET);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8ab9      	ldrh	r1, [r7, #20]
 8001d22:	2201      	movs	r2, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fcc2 	bl	80026ae <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_voidUltraSonic+0x134>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 10);  // wait for 10 us
 8001d32:	bf00      	nop
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_voidUltraSonic+0x134>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	2b09      	cmp	r3, #9
 8001d3c:	d9fa      	bls.n	8001d34 <HAL_voidUltraSonic+0x44>
		HAL_GPIO_WritePin(sensor.trigPort, sensor.trigPin, GPIO_PIN_RESET);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8ab9      	ldrh	r1, [r7, #20]
 8001d42:	2200      	movs	r2, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fcb2 	bl	80026ae <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick();
 8001d4a:	f000 f927 	bl	8001f9c <HAL_GetTick>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4a35      	ldr	r2, [pc, #212]	; (8001e28 <HAL_voidUltraSonic+0x138>)
 8001d52:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(sensor.echoPort, sensor.echoPin)) && pMillis + 10 > HAL_GetTick());
 8001d54:	bf00      	nop
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	8afa      	ldrh	r2, [r7, #22]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fc8f 	bl	8002680 <HAL_GPIO_ReadPin>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d108      	bne.n	8001d7a <HAL_voidUltraSonic+0x8a>
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_voidUltraSonic+0x138>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f103 040a 	add.w	r4, r3, #10
 8001d70:	f000 f914 	bl	8001f9c <HAL_GetTick>
 8001d74:	4603      	mov	r3, r0
 8001d76:	429c      	cmp	r4, r3
 8001d78:	d8ed      	bhi.n	8001d56 <HAL_voidUltraSonic+0x66>
		*(sensor.val1) = __HAL_TIM_GET_COUNTER(&htim2);
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_voidUltraSonic+0x134>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d82:	601a      	str	r2, [r3, #0]

		pMillis = HAL_GetTick();
 8001d84:	f000 f90a 	bl	8001f9c <HAL_GetTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <HAL_voidUltraSonic+0x138>)
 8001d8c:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(sensor.echoPort, sensor.echoPin)) && pMillis + 50 > HAL_GetTick());
 8001d8e:	bf00      	nop
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	8afa      	ldrh	r2, [r7, #22]
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fc72 	bl	8002680 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_voidUltraSonic+0xc4>
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_voidUltraSonic+0x138>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001daa:	f000 f8f7 	bl	8001f9c <HAL_GetTick>
 8001dae:	4603      	mov	r3, r0
 8001db0:	429c      	cmp	r4, r3
 8001db2:	d8ed      	bhi.n	8001d90 <HAL_voidUltraSonic+0xa0>
		*(sensor.val2) = __HAL_TIM_GET_COUNTER(&htim2);
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_voidUltraSonic+0x134>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dbc:	601a      	str	r2, [r3, #0]


		*(sensor.distance) = (*(sensor.val2) - *(sensor.val1)) * 0.0022 ;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fc35 	bl	8000638 <__aeabi_ui2d>
 8001dce:	a312      	add	r3, pc, #72	; (adr r3, 8001e18 <HAL_voidUltraSonic+0x128>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe f9c4 	bl	8000160 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	6a3c      	ldr	r4, [r7, #32]
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fca3 	bl	800072c <__aeabi_d2uiz>
 8001de6:	4603      	mov	r3, r0
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	8023      	strh	r3, [r4, #0]
		{
			*sensor.distance = *sensor.distance - 135 ;
		}
*/
		// Store the distance in the array
		UltraSonic_Reading[i] = *(sensor.distance);
 8001dec:	6a3a      	ldr	r2, [r7, #32]
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	440b      	add	r3, r1
 8001df6:	8812      	ldrh	r2, [r2, #0]
 8001df8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < ULTRA_COUNT; i++)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f77f af7b 	ble.w	8001cfe <HAL_voidUltraSonic+0xe>


	}

}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bdb0      	pop	{r4, r5, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	f3af 8000 	nop.w
 8001e18:	01a36e2f 	.word	0x01a36e2f
 8001e1c:	3f6205bc 	.word	0x3f6205bc
 8001e20:	20000058 	.word	0x20000058
 8001e24:	2000017c 	.word	0x2000017c
 8001e28:	200002bc 	.word	0x200002bc

08001e2c <HAL_UltraSonic_Decision>:

uint8_t HAL_UltraSonic_Decision(uint16_t *UltraSonic_Reading)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

	uint8_t Return_Value = 254 ;
 8001e34:	23fe      	movs	r3, #254	; 0xfe
 8001e36:	73fb      	strb	r3, [r7, #15]

	/* About to Hit */
	if ( (UltraSonic_Reading[US_FORWARD]<= 10) )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	2b0a      	cmp	r3, #10
 8001e3e:	d80c      	bhi.n	8001e5a <HAL_UltraSonic_Decision+0x2e>
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e46:	4813      	ldr	r0, [pc, #76]	; (8001e94 <HAL_UltraSonic_Decision+0x68>)
 8001e48:	f000 fc31 	bl	80026ae <HAL_GPIO_WritePin>
		Return_Value = STOP ;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
		GSM_VidSendSMS((uint8_t*)"01003676020", (uint8_t*)"SOS");
 8001e50:	4911      	ldr	r1, [pc, #68]	; (8001e98 <HAL_UltraSonic_Decision+0x6c>)
 8001e52:	4812      	ldr	r0, [pc, #72]	; (8001e9c <HAL_UltraSonic_Decision+0x70>)
 8001e54:	f7fe fd2e 	bl	80008b4 <GSM_VidSendSMS>
 8001e58:	e016      	b.n	8001e88 <HAL_UltraSonic_Decision+0x5c>

	}

	/* Close to Hit */
	else if ((20 < UltraSonic_Reading[US_FORWARD]) &&  (UltraSonic_Reading[US_FORWARD]<= 30) )
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	2b14      	cmp	r3, #20
 8001e60:	d90c      	bls.n	8001e7c <HAL_UltraSonic_Decision+0x50>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	2b1e      	cmp	r3, #30
 8001e68:	d808      	bhi.n	8001e7c <HAL_UltraSonic_Decision+0x50>
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e70:	4808      	ldr	r0, [pc, #32]	; (8001e94 <HAL_UltraSonic_Decision+0x68>)
 8001e72:	f000 fc1c 	bl	80026ae <HAL_GPIO_WritePin>
		Return_Value = SPEED_25 ;
 8001e76:	2319      	movs	r3, #25
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	e005      	b.n	8001e88 <HAL_UltraSonic_Decision+0x5c>

	}
	else HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <HAL_UltraSonic_Decision+0x68>)
 8001e84:	f000 fc13 	bl	80026ae <HAL_GPIO_WritePin>



	return Return_Value ;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]

}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40011000 	.word	0x40011000
 8001e98:	08005928 	.word	0x08005928
 8001e9c:	0800592c 	.word	0x0800592c

08001ea0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea0:	f7ff fbc2 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea4:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ea6:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ebc:	4c09      	ldr	r4, [pc, #36]	; (8001ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eca:	f003 fcdb 	bl	8005884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ece:	f7fe fd8d 	bl	80009ec <main>
  bx lr
 8001ed2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001edc:	0800596c 	.word	0x0800596c
  ldr r2, =_sbss
 8001ee0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ee4:	200002d0 	.word	0x200002d0

08001ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC1_2_IRQHandler>
	...

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_Init+0x28>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_Init+0x28>)
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001efc:	2003      	movs	r0, #3
 8001efe:	f000 f947 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f02:	200f      	movs	r0, #15
 8001f04:	f000 f808 	bl	8001f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f08:	f7ff f9b0 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40022000 	.word	0x40022000

08001f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_InitTick+0x54>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_InitTick+0x58>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f95f 	bl	80021fa <HAL_SYSTICK_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00e      	b.n	8001f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b0f      	cmp	r3, #15
 8001f4a:	d80a      	bhi.n	8001f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f000 f927 	bl	80021a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f58:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <HAL_InitTick+0x5c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000054 	.word	0x20000054
 8001f70:	20000074 	.word	0x20000074
 8001f74:	20000070 	.word	0x20000070

08001f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_IncTick+0x1c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_IncTick+0x20>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	4a03      	ldr	r2, [pc, #12]	; (8001f98 <HAL_IncTick+0x20>)
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	20000074 	.word	0x20000074
 8001f98:	200002cc 	.word	0x200002cc

08001f9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <HAL_GetTick+0x10>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	200002cc 	.word	0x200002cc

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff fff0 	bl	8001f9c <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffe0 	bl	8001f9c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000074 	.word	0x20000074

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4906      	ldr	r1, [pc, #24]	; (8002090 <__NVIC_EnableIRQ+0x34>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	; (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	; (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	; 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
         );
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	; 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff90 	bl	8002094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff2d 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff42 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff90 	bl	80020e8 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5f 	bl	8002094 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff35 	bl	800205c <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d008      	beq.n	800223c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2204      	movs	r2, #4
 800222e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e020      	b.n	800227e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 020e 	bic.w	r2, r2, #14
 800224a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	2101      	movs	r1, #1
 8002266:	fa01 f202 	lsl.w	r2, r1, r2
 800226a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800227c:	7bfb      	ldrb	r3, [r7, #15]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d005      	beq.n	80022ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2204      	movs	r2, #4
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e051      	b.n	8002350 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 020e 	bic.w	r2, r2, #14
 80022ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a22      	ldr	r2, [pc, #136]	; (800235c <HAL_DMA_Abort_IT+0xd4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d029      	beq.n	800232a <HAL_DMA_Abort_IT+0xa2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_DMA_Abort_IT+0xd8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <HAL_DMA_Abort_IT+0x9e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <HAL_DMA_Abort_IT+0xdc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01a      	beq.n	8002320 <HAL_DMA_Abort_IT+0x98>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <HAL_DMA_Abort_IT+0xe0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d012      	beq.n	800231a <HAL_DMA_Abort_IT+0x92>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_DMA_Abort_IT+0xe4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00a      	beq.n	8002314 <HAL_DMA_Abort_IT+0x8c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_DMA_Abort_IT+0xe8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d102      	bne.n	800230e <HAL_DMA_Abort_IT+0x86>
 8002308:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800230c:	e00e      	b.n	800232c <HAL_DMA_Abort_IT+0xa4>
 800230e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002312:	e00b      	b.n	800232c <HAL_DMA_Abort_IT+0xa4>
 8002314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002318:	e008      	b.n	800232c <HAL_DMA_Abort_IT+0xa4>
 800231a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800231e:	e005      	b.n	800232c <HAL_DMA_Abort_IT+0xa4>
 8002320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002324:	e002      	b.n	800232c <HAL_DMA_Abort_IT+0xa4>
 8002326:	2310      	movs	r3, #16
 8002328:	e000      	b.n	800232c <HAL_DMA_Abort_IT+0xa4>
 800232a:	2301      	movs	r3, #1
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_DMA_Abort_IT+0xec>)
 800232e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
    } 
  }
  return status;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40020008 	.word	0x40020008
 8002360:	4002001c 	.word	0x4002001c
 8002364:	40020030 	.word	0x40020030
 8002368:	40020044 	.word	0x40020044
 800236c:	40020058 	.word	0x40020058
 8002370:	4002006c 	.word	0x4002006c
 8002374:	40020000 	.word	0x40020000

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b08b      	sub	sp, #44	; 0x2c
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238a:	e169      	b.n	8002660 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800238c:	2201      	movs	r2, #1
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	f040 8158 	bne.w	800265a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4a9a      	ldr	r2, [pc, #616]	; (8002618 <HAL_GPIO_Init+0x2a0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d05e      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023b4:	4a98      	ldr	r2, [pc, #608]	; (8002618 <HAL_GPIO_Init+0x2a0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d875      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023ba:	4a98      	ldr	r2, [pc, #608]	; (800261c <HAL_GPIO_Init+0x2a4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d058      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023c0:	4a96      	ldr	r2, [pc, #600]	; (800261c <HAL_GPIO_Init+0x2a4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d86f      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023c6:	4a96      	ldr	r2, [pc, #600]	; (8002620 <HAL_GPIO_Init+0x2a8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d052      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023cc:	4a94      	ldr	r2, [pc, #592]	; (8002620 <HAL_GPIO_Init+0x2a8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d869      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023d2:	4a94      	ldr	r2, [pc, #592]	; (8002624 <HAL_GPIO_Init+0x2ac>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d04c      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023d8:	4a92      	ldr	r2, [pc, #584]	; (8002624 <HAL_GPIO_Init+0x2ac>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d863      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023de:	4a92      	ldr	r2, [pc, #584]	; (8002628 <HAL_GPIO_Init+0x2b0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d046      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023e4:	4a90      	ldr	r2, [pc, #576]	; (8002628 <HAL_GPIO_Init+0x2b0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d85d      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023ea:	2b12      	cmp	r3, #18
 80023ec:	d82a      	bhi.n	8002444 <HAL_GPIO_Init+0xcc>
 80023ee:	2b12      	cmp	r3, #18
 80023f0:	d859      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <HAL_GPIO_Init+0x80>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002473 	.word	0x08002473
 80023fc:	0800244d 	.word	0x0800244d
 8002400:	0800245f 	.word	0x0800245f
 8002404:	080024a1 	.word	0x080024a1
 8002408:	080024a7 	.word	0x080024a7
 800240c:	080024a7 	.word	0x080024a7
 8002410:	080024a7 	.word	0x080024a7
 8002414:	080024a7 	.word	0x080024a7
 8002418:	080024a7 	.word	0x080024a7
 800241c:	080024a7 	.word	0x080024a7
 8002420:	080024a7 	.word	0x080024a7
 8002424:	080024a7 	.word	0x080024a7
 8002428:	080024a7 	.word	0x080024a7
 800242c:	080024a7 	.word	0x080024a7
 8002430:	080024a7 	.word	0x080024a7
 8002434:	080024a7 	.word	0x080024a7
 8002438:	080024a7 	.word	0x080024a7
 800243c:	08002455 	.word	0x08002455
 8002440:	08002469 	.word	0x08002469
 8002444:	4a79      	ldr	r2, [pc, #484]	; (800262c <HAL_GPIO_Init+0x2b4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800244a:	e02c      	b.n	80024a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	623b      	str	r3, [r7, #32]
          break;
 8002452:	e029      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	3304      	adds	r3, #4
 800245a:	623b      	str	r3, [r7, #32]
          break;
 800245c:	e024      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	3308      	adds	r3, #8
 8002464:	623b      	str	r3, [r7, #32]
          break;
 8002466:	e01f      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	330c      	adds	r3, #12
 800246e:	623b      	str	r3, [r7, #32]
          break;
 8002470:	e01a      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800247a:	2304      	movs	r3, #4
 800247c:	623b      	str	r3, [r7, #32]
          break;
 800247e:	e013      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002488:	2308      	movs	r3, #8
 800248a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	611a      	str	r2, [r3, #16]
          break;
 8002492:	e009      	b.n	80024a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002494:	2308      	movs	r3, #8
 8002496:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	615a      	str	r2, [r3, #20]
          break;
 800249e:	e003      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
          break;
 80024a4:	e000      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          break;
 80024a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2bff      	cmp	r3, #255	; 0xff
 80024ac:	d801      	bhi.n	80024b2 <HAL_GPIO_Init+0x13a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	e001      	b.n	80024b6 <HAL_GPIO_Init+0x13e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2bff      	cmp	r3, #255	; 0xff
 80024bc:	d802      	bhi.n	80024c4 <HAL_GPIO_Init+0x14c>
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	e002      	b.n	80024ca <HAL_GPIO_Init+0x152>
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	3b08      	subs	r3, #8
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	210f      	movs	r1, #15
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	401a      	ands	r2, r3
 80024dc:	6a39      	ldr	r1, [r7, #32]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	431a      	orrs	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80b1 	beq.w	800265a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024f8:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <HAL_GPIO_Init+0x2b8>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <HAL_GPIO_Init+0x2b8>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <HAL_GPIO_Init+0x2b8>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002510:	4a48      	ldr	r2, [pc, #288]	; (8002634 <HAL_GPIO_Init+0x2bc>)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a40      	ldr	r2, [pc, #256]	; (8002638 <HAL_GPIO_Init+0x2c0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d013      	beq.n	8002564 <HAL_GPIO_Init+0x1ec>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3f      	ldr	r2, [pc, #252]	; (800263c <HAL_GPIO_Init+0x2c4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00d      	beq.n	8002560 <HAL_GPIO_Init+0x1e8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3e      	ldr	r2, [pc, #248]	; (8002640 <HAL_GPIO_Init+0x2c8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0x1e4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a3d      	ldr	r2, [pc, #244]	; (8002644 <HAL_GPIO_Init+0x2cc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_GPIO_Init+0x1e0>
 8002554:	2303      	movs	r3, #3
 8002556:	e006      	b.n	8002566 <HAL_GPIO_Init+0x1ee>
 8002558:	2304      	movs	r3, #4
 800255a:	e004      	b.n	8002566 <HAL_GPIO_Init+0x1ee>
 800255c:	2302      	movs	r3, #2
 800255e:	e002      	b.n	8002566 <HAL_GPIO_Init+0x1ee>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_GPIO_Init+0x1ee>
 8002564:	2300      	movs	r3, #0
 8002566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002568:	f002 0203 	and.w	r2, r2, #3
 800256c:	0092      	lsls	r2, r2, #2
 800256e:	4093      	lsls	r3, r2
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002576:	492f      	ldr	r1, [pc, #188]	; (8002634 <HAL_GPIO_Init+0x2bc>)
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	492c      	ldr	r1, [pc, #176]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
 800259c:	e006      	b.n	80025ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4928      	ldr	r1, [pc, #160]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	4922      	ldr	r1, [pc, #136]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	491e      	ldr	r1, [pc, #120]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4918      	ldr	r1, [pc, #96]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	4914      	ldr	r1, [pc, #80]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d021      	beq.n	800264c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e021      	b.n	800265a <HAL_GPIO_Init+0x2e2>
 8002616:	bf00      	nop
 8002618:	10320000 	.word	0x10320000
 800261c:	10310000 	.word	0x10310000
 8002620:	10220000 	.word	0x10220000
 8002624:	10210000 	.word	0x10210000
 8002628:	10120000 	.word	0x10120000
 800262c:	10110000 	.word	0x10110000
 8002630:	40021000 	.word	0x40021000
 8002634:	40010000 	.word	0x40010000
 8002638:	40010800 	.word	0x40010800
 800263c:	40010c00 	.word	0x40010c00
 8002640:	40011000 	.word	0x40011000
 8002644:	40011400 	.word	0x40011400
 8002648:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_GPIO_Init+0x304>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	43db      	mvns	r3, r3
 8002654:	4909      	ldr	r1, [pc, #36]	; (800267c <HAL_GPIO_Init+0x304>)
 8002656:	4013      	ands	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	3301      	adds	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	f47f ae8e 	bne.w	800238c <HAL_GPIO_Init+0x14>
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	372c      	adds	r7, #44	; 0x2c
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e001      	b.n	80026a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	807b      	strh	r3, [r7, #2]
 80026ba:	4613      	mov	r3, r2
 80026bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026be:	787b      	ldrb	r3, [r7, #1]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c4:	887a      	ldrh	r2, [r7, #2]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026ca:	e003      	b.n	80026d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	041a      	lsls	r2, r3, #16
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	611a      	str	r2, [r3, #16]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e272      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00c      	beq.n	8002726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270c:	4b8f      	ldr	r3, [pc, #572]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d112      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
 8002718:	4b8c      	ldr	r3, [pc, #560]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b89      	ldr	r3, [pc, #548]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06c      	beq.n	800280c <HAL_RCC_OscConfig+0x12c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d168      	bne.n	800280c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e24c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x76>
 8002748:	4b80      	ldr	r3, [pc, #512]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7f      	ldr	r2, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e02e      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x98>
 800275e:	4b7b      	ldr	r3, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7a      	ldr	r2, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b78      	ldr	r3, [pc, #480]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a77      	ldr	r2, [pc, #476]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xbc>
 8002782:	4b72      	ldr	r3, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 800279c:	4b6b      	ldr	r3, [pc, #428]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a67      	ldr	r2, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff fbee 	bl	8001f9c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7ff fbea 	bl	8001f9c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e200      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b5d      	ldr	r3, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe4>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fbda 	bl	8001f9c <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7ff fbd6 	bl	8001f9c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1ec      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x10c>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002826:	4b49      	ldr	r3, [pc, #292]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4939      	ldr	r1, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7ff fb8f 	bl	8001f9c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7ff fb8b 	bl	8001f9c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1a1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4927      	ldr	r1, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fb6e 	bl	8001f9c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c4:	f7ff fb6a 	bl	8001f9c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e180      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03a      	beq.n	8002964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d019      	beq.n	800292a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7ff fb4e 	bl	8001f9c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7ff fb4a 	bl	8001f9c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e160      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f000 face 	bl	8002ec4 <RCC_Delay>
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7ff fb34 	bl	8001f9c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002936:	e00f      	b.n	8002958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7ff fb30 	bl	8001f9c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d908      	bls.n	8002958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e146      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	42420000 	.word	0x42420000
 8002954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b92      	ldr	r3, [pc, #584]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e9      	bne.n	8002938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a6 	beq.w	8002abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b8b      	ldr	r3, [pc, #556]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a87      	ldr	r2, [pc, #540]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	61d3      	str	r3, [r2, #28]
 800298e:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7e      	ldr	r2, [pc, #504]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7ff faf1 	bl	8001f9c <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7ff faed 	bl	8001f9c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e103      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b75      	ldr	r3, [pc, #468]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x312>
 80029e4:	4b6f      	ldr	r3, [pc, #444]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	e02d      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x334>
 80029fa:	4b6a      	ldr	r3, [pc, #424]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a69      	ldr	r2, [pc, #420]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a66      	ldr	r2, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	e01c      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x356>
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a5d      	ldr	r2, [pc, #372]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a36:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d015      	beq.n	8002a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7ff faa1 	bl	8001f9c <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7ff fa9d 	bl	8001f9c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0b1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ee      	beq.n	8002a5e <HAL_RCC_OscConfig+0x37e>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7ff fa8b 	bl	8001f9c <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7ff fa87 	bl	8001f9c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e09b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8087 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d061      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d146      	bne.n	8002b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7ff fa5b 	bl	8001f9c <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7ff fa57 	bl	8001f9c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e06d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afc:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4921      	ldr	r1, [pc, #132]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a19      	ldr	r1, [r3, #32]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	430b      	orrs	r3, r1
 8002b36:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7ff fa2b 	bl	8001f9c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7ff fa27 	bl	8001f9c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e03d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46a>
 8002b68:	e035      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff fa14 	bl	8001f9c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7ff fa10 	bl	8001f9c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e026      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x498>
 8002b96:	e01e      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e019      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_OscConfig+0x500>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0d0      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d910      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4965      	ldr	r1, [pc, #404]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b8      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c40:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	494d      	ldr	r1, [pc, #308]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d040      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d115      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e073      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4936      	ldr	r1, [pc, #216]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7ff f962 	bl	8001f9c <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7ff f95e 	bl	8001f9c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e053      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d210      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4922      	ldr	r1, [pc, #136]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e032      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4916      	ldr	r1, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d72:	f000 f821 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490a      	ldr	r1, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff f8c0 	bl	8001f18 <HAL_InitTick>

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08005938 	.word	0x08005938
 8002db0:	20000054 	.word	0x20000054
 8002db4:	20000070 	.word	0x20000070

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x30>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x36>
 8002de6:	e027      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dea:	613b      	str	r3, [r7, #16]
      break;
 8002dec:	e027      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0c9b      	lsrs	r3, r3, #18
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0c5b      	lsrs	r3, r3, #17
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1a:	fb03 f202 	mul.w	r2, r3, r2
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e004      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	613b      	str	r3, [r7, #16]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3a:	613b      	str	r3, [r7, #16]
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	693b      	ldr	r3, [r7, #16]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	007a1200 	.word	0x007a1200
 8002e54:	08005950 	.word	0x08005950
 8002e58:	08005960 	.word	0x08005960
 8002e5c:	003d0900 	.word	0x003d0900

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000054 	.word	0x20000054

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e78:	f7ff fff2 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4903      	ldr	r1, [pc, #12]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08005948 	.word	0x08005948

08002e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	0adb      	lsrs	r3, r3, #11
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4903      	ldr	r1, [pc, #12]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	08005948 	.word	0x08005948

08002ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <RCC_Delay+0x34>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <RCC_Delay+0x38>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a5b      	lsrs	r3, r3, #9
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee0:	bf00      	nop
  }
  while (Delay --);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	60fa      	str	r2, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <RCC_Delay+0x1c>
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	20000054 	.word	0x20000054
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e076      	b.n	8003000 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d108      	bne.n	8002f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f22:	d009      	beq.n	8002f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
 8002f2a:	e005      	b.n	8002f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe f9bc 	bl	80012d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	ea42 0103 	orr.w	r1, r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	0c1a      	lsrs	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f002 0204 	and.w	r2, r2, #4
 8002fde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_SPI_Transmit+0x22>
 8003026:	2302      	movs	r3, #2
 8003028:	e12d      	b.n	8003286 <HAL_SPI_Transmit+0x27e>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003032:	f7fe ffb3 	bl	8001f9c <HAL_GetTick>
 8003036:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d002      	beq.n	800304e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003048:	2302      	movs	r3, #2
 800304a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800304c:	e116      	b.n	800327c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_SPI_Transmit+0x52>
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800305e:	e10d      	b.n	800327c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2203      	movs	r2, #3
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a6:	d10f      	bne.n	80030c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d007      	beq.n	80030e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ee:	d14f      	bne.n	8003190 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_Transmit+0xf6>
 80030f8:	8afb      	ldrh	r3, [r7, #22]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d142      	bne.n	8003184 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003122:	e02f      	b.n	8003184 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d112      	bne.n	8003158 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	881a      	ldrh	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	1c9a      	adds	r2, r3, #2
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	86da      	strh	r2, [r3, #54]	; 0x36
 8003156:	e015      	b.n	8003184 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003158:	f7fe ff20 	bl	8001f9c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d803      	bhi.n	8003170 <HAL_SPI_Transmit+0x168>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d102      	bne.n	8003176 <HAL_SPI_Transmit+0x16e>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003182:	e07b      	b.n	800327c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ca      	bne.n	8003124 <HAL_SPI_Transmit+0x11c>
 800318e:	e050      	b.n	8003232 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_SPI_Transmit+0x196>
 8003198:	8afb      	ldrh	r3, [r7, #22]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d144      	bne.n	8003228 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	7812      	ldrb	r2, [r2, #0]
 80031aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031c4:	e030      	b.n	8003228 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d113      	bne.n	80031fc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	330c      	adds	r3, #12
 80031de:	7812      	ldrb	r2, [r2, #0]
 80031e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80031fa:	e015      	b.n	8003228 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031fc:	f7fe fece 	bl	8001f9c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d803      	bhi.n	8003214 <HAL_SPI_Transmit+0x20c>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d102      	bne.n	800321a <HAL_SPI_Transmit+0x212>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003226:	e029      	b.n	800327c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1c9      	bne.n	80031c6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fbcc 	bl	80039d4 <SPI_EndRxTxTransaction>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e003      	b.n	800327c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003284:	7ffb      	ldrb	r3, [r7, #31]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b088      	sub	sp, #32
 8003292:	af02      	add	r7, sp, #8
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d002      	beq.n	80032b4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032b2:	e0fb      	b.n	80034ac <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032bc:	d112      	bne.n	80032e4 <HAL_SPI_Receive+0x56>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10e      	bne.n	80032e4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2204      	movs	r2, #4
 80032ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f8ef 	bl	80034be <HAL_SPI_TransmitReceive>
 80032e0:	4603      	mov	r3, r0
 80032e2:	e0e8      	b.n	80034b6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_SPI_Receive+0x64>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e0e1      	b.n	80034b6 <HAL_SPI_Receive+0x228>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fa:	f7fe fe4f 	bl	8001f9c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_SPI_Receive+0x7e>
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003310:	e0cc      	b.n	80034ac <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2204      	movs	r2, #4
 8003316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	88fa      	ldrh	r2, [r7, #6]
 800332a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003358:	d10f      	bne.n	800337a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003368:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003378:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d007      	beq.n	8003398 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d16a      	bne.n	8003476 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033a0:	e032      	b.n	8003408 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d115      	bne.n	80033dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f103 020c 	add.w	r2, r3, #12
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033da:	e015      	b.n	8003408 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033dc:	f7fe fdde 	bl	8001f9c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d803      	bhi.n	80033f4 <HAL_SPI_Receive+0x166>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d102      	bne.n	80033fa <HAL_SPI_Receive+0x16c>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003406:	e051      	b.n	80034ac <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1c7      	bne.n	80033a2 <HAL_SPI_Receive+0x114>
 8003412:	e035      	b.n	8003480 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d113      	bne.n	800344a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	b292      	uxth	r2, r2
 800342e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	1c9a      	adds	r2, r3, #2
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003448:	e015      	b.n	8003476 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800344a:	f7fe fda7 	bl	8001f9c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d803      	bhi.n	8003462 <HAL_SPI_Receive+0x1d4>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d102      	bne.n	8003468 <HAL_SPI_Receive+0x1da>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003474:	e01a      	b.n	80034ac <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1c9      	bne.n	8003414 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	6839      	ldr	r1, [r7, #0]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fa53 	bl	8003930 <SPI_EndRxTransaction>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
 80034a2:	e003      	b.n	80034ac <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b08c      	sub	sp, #48	; 0x30
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034cc:	2301      	movs	r3, #1
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x26>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e198      	b.n	8003816 <HAL_SPI_TransmitReceive+0x358>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ec:	f7fe fd56 	bl	8001f9c <HAL_GetTick>
 80034f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800350a:	2b01      	cmp	r3, #1
 800350c:	d00f      	beq.n	800352e <HAL_SPI_TransmitReceive+0x70>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003514:	d107      	bne.n	8003526 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d103      	bne.n	8003526 <HAL_SPI_TransmitReceive+0x68>
 800351e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003522:	2b04      	cmp	r3, #4
 8003524:	d003      	beq.n	800352e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003526:	2302      	movs	r3, #2
 8003528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800352c:	e16d      	b.n	800380a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_SPI_TransmitReceive+0x82>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_SPI_TransmitReceive+0x82>
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003546:	e160      	b.n	800380a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b04      	cmp	r3, #4
 8003552:	d003      	beq.n	800355c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2205      	movs	r2, #5
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	887a      	ldrh	r2, [r7, #2]
 8003572:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	887a      	ldrh	r2, [r7, #2]
 800357e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d007      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b8:	d17c      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x10a>
 80035c2:	8b7b      	ldrh	r3, [r7, #26]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d16a      	bne.n	800369e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	881a      	ldrh	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	1c9a      	adds	r2, r3, #2
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ec:	e057      	b.n	800369e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d11b      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x176>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d016      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x176>
 8003606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d113      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	881a      	ldrh	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	1c9a      	adds	r2, r3, #2
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d119      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x1b8>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d014      	beq.n	8003676 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	b292      	uxth	r2, r2
 8003658:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	1c9a      	adds	r2, r3, #2
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003672:	2301      	movs	r3, #1
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003676:	f7fe fc91 	bl	8001f9c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003682:	429a      	cmp	r2, r3
 8003684:	d80b      	bhi.n	800369e <HAL_SPI_TransmitReceive+0x1e0>
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d007      	beq.n	800369e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800369c:	e0b5      	b.n	800380a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1a2      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x130>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d19d      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x130>
 80036b2:	e080      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x204>
 80036bc:	8b7b      	ldrh	r3, [r7, #26]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d16f      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e8:	e05b      	b.n	80037a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d11c      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x274>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d017      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x274>
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d114      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	7812      	ldrb	r2, [r2, #0]
 8003714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d119      	bne.n	8003774 <HAL_SPI_TransmitReceive+0x2b6>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d014      	beq.n	8003774 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003770:	2301      	movs	r3, #1
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003774:	f7fe fc12 	bl	8001f9c <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003780:	429a      	cmp	r2, r3
 8003782:	d803      	bhi.n	800378c <HAL_SPI_TransmitReceive+0x2ce>
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d102      	bne.n	8003792 <HAL_SPI_TransmitReceive+0x2d4>
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80037a0:	e033      	b.n	800380a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d19e      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x22c>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d199      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f90a 	bl	80039d4 <SPI_EndRxTxTransaction>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037d2:	e01a      	b.n	800380a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003800:	e003      	b.n	800380a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003816:	4618      	mov	r0, r3
 8003818:	3730      	adds	r7, #48	; 0x30
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003830:	f7fe fbb4 	bl	8001f9c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	4413      	add	r3, r2
 800383e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003840:	f7fe fbac 	bl	8001f9c <HAL_GetTick>
 8003844:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	015b      	lsls	r3, r3, #5
 800384c:	0d1b      	lsrs	r3, r3, #20
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003856:	e054      	b.n	8003902 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d050      	beq.n	8003902 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003860:	f7fe fb9c 	bl	8001f9c <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	429a      	cmp	r2, r3
 800386e:	d902      	bls.n	8003876 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d13d      	bne.n	80038f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003884:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388e:	d111      	bne.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003898:	d004      	beq.n	80038a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a2:	d107      	bne.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038bc:	d10f      	bne.n	80038de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e017      	b.n	8003922 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3b01      	subs	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4013      	ands	r3, r2
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	bf0c      	ite	eq
 8003912:	2301      	moveq	r3, #1
 8003914:	2300      	movne	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	429a      	cmp	r2, r3
 800391e:	d19b      	bne.n	8003858 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000054 	.word	0x20000054

08003930 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003944:	d111      	bne.n	800396a <SPI_EndRxTransaction+0x3a>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394e:	d004      	beq.n	800395a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003958:	d107      	bne.n	800396a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003968:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003972:	d117      	bne.n	80039a4 <SPI_EndRxTransaction+0x74>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397c:	d112      	bne.n	80039a4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2200      	movs	r2, #0
 8003986:	2101      	movs	r1, #1
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f7ff ff49 	bl	8003820 <SPI_WaitFlagStateUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01a      	beq.n	80039ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003998:	f043 0220 	orr.w	r2, r3, #32
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e013      	b.n	80039cc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff ff36 	bl	8003820 <SPI_WaitFlagStateUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e000      	b.n	80039cc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2200      	movs	r2, #0
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff ff18 	bl	8003820 <SPI_WaitFlagStateUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e000      	b.n	8003a08 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e041      	b.n	8003aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fcb2 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 fca0 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d001      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e032      	b.n	8003b2e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_TIM_Base_Start+0x88>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_TIM_Base_Start+0x48>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d009      	beq.n	8003af8 <HAL_TIM_Base_Start+0x48>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <HAL_TIM_Base_Start+0x8c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_TIM_Base_Start+0x48>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_TIM_Base_Start+0x90>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d010      	beq.n	8003b2c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	e007      	b.n	8003b2c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800

08003b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d001      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e03a      	b.n	8003bd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_TIM_Base_Start_IT+0x98>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x58>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d009      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x58>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x58>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d111      	bne.n	8003bc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b06      	cmp	r3, #6
 8003bac:	d010      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	e007      	b.n	8003bd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800

08003be8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10f      	bne.n	8003c30 <HAL_TIM_Base_Stop_IT+0x48>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	f240 4344 	movw	r3, #1092	; 0x444
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_Base_Stop_IT+0x48>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e041      	b.n	8003cda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd fb7a 	bl	8001364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f000 fb86 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <HAL_TIM_PWM_Start+0x24>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e022      	b.n	8003d4e <HAL_TIM_PWM_Start+0x6a>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d109      	bne.n	8003d22 <HAL_TIM_PWM_Start+0x3e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	bf14      	ite	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	2300      	moveq	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	e015      	b.n	8003d4e <HAL_TIM_PWM_Start+0x6a>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d109      	bne.n	8003d3c <HAL_TIM_PWM_Start+0x58>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	bf14      	ite	ne
 8003d34:	2301      	movne	r3, #1
 8003d36:	2300      	moveq	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e008      	b.n	8003d4e <HAL_TIM_PWM_Start+0x6a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e05e      	b.n	8003e14 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_PWM_Start+0x82>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d64:	e013      	b.n	8003d8e <HAL_TIM_PWM_Start+0xaa>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d104      	bne.n	8003d76 <HAL_TIM_PWM_Start+0x92>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d74:	e00b      	b.n	8003d8e <HAL_TIM_PWM_Start+0xaa>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d104      	bne.n	8003d86 <HAL_TIM_PWM_Start+0xa2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d84:	e003      	b.n	8003d8e <HAL_TIM_PWM_Start+0xaa>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2201      	movs	r2, #1
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fd7c 	bl	8004894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <HAL_TIM_PWM_Start+0x138>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d107      	bne.n	8003db6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_TIM_PWM_Start+0x138>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_TIM_PWM_Start+0xfa>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc8:	d009      	beq.n	8003dde <HAL_TIM_PWM_Start+0xfa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <HAL_TIM_PWM_Start+0x13c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIM_PWM_Start+0xfa>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <HAL_TIM_PWM_Start+0x140>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d111      	bne.n	8003e02 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	d010      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e00:	e007      	b.n	8003e12 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800

08003e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d122      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d11b      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0202 	mvn.w	r2, #2
 8003e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fa76 	bl	800435c <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa69 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fa78 	bl	800436e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0204 	mvn.w	r2, #4
 8003ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fa4c 	bl	800435c <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fa3f 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fa4e 	bl	800436e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0208 	mvn.w	r2, #8
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2204      	movs	r2, #4
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa22 	bl	800435c <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa15 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fa24 	bl	800436e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0210 	mvn.w	r2, #16
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2208      	movs	r2, #8
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9f8 	bl	800435c <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9eb 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f9fa 	bl	800436e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0201 	mvn.w	r2, #1
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd f8ae 	bl	8001108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b80      	cmp	r3, #128	; 0x80
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fd3a 	bl	8004a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9be 	bl	8004380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b20      	cmp	r3, #32
 8004010:	d10e      	bne.n	8004030 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d107      	bne.n	8004030 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0220 	mvn.w	r2, #32
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fd05 	bl	8004a3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004052:	2302      	movs	r3, #2
 8004054:	e0ae      	b.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b0c      	cmp	r3, #12
 8004062:	f200 809f 	bhi.w	80041a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	080040a1 	.word	0x080040a1
 8004070:	080041a5 	.word	0x080041a5
 8004074:	080041a5 	.word	0x080041a5
 8004078:	080041a5 	.word	0x080041a5
 800407c:	080040e1 	.word	0x080040e1
 8004080:	080041a5 	.word	0x080041a5
 8004084:	080041a5 	.word	0x080041a5
 8004088:	080041a5 	.word	0x080041a5
 800408c:	08004123 	.word	0x08004123
 8004090:	080041a5 	.word	0x080041a5
 8004094:	080041a5 	.word	0x080041a5
 8004098:	080041a5 	.word	0x080041a5
 800409c:	08004163 	.word	0x08004163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f9d6 	bl	8004458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	619a      	str	r2, [r3, #24]
      break;
 80040de:	e064      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fa1c 	bl	8004524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	619a      	str	r2, [r3, #24]
      break;
 8004120:	e043      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fa65 	bl	80045f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0208 	orr.w	r2, r2, #8
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0204 	bic.w	r2, r2, #4
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      break;
 8004160:	e023      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 faaf 	bl	80046cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69d9      	ldr	r1, [r3, #28]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	61da      	str	r2, [r3, #28]
      break;
 80041a2:	e002      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
      break;
 80041a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIM_ConfigClockSource+0x1c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e0b4      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x186>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004210:	d03e      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0xd4>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004216:	f200 8087 	bhi.w	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	f000 8086 	beq.w	800432e <HAL_TIM_ConfigClockSource+0x172>
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004226:	d87f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b70      	cmp	r3, #112	; 0x70
 800422a:	d01a      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0xa6>
 800422c:	2b70      	cmp	r3, #112	; 0x70
 800422e:	d87b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b60      	cmp	r3, #96	; 0x60
 8004232:	d050      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004234:	2b60      	cmp	r3, #96	; 0x60
 8004236:	d877      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b50      	cmp	r3, #80	; 0x50
 800423a:	d03c      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0xfa>
 800423c:	2b50      	cmp	r3, #80	; 0x50
 800423e:	d873      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d058      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d86f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d064      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800424c:	2b30      	cmp	r3, #48	; 0x30
 800424e:	d86b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d060      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d867      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05c      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800425c:	2b10      	cmp	r3, #16
 800425e:	d05a      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004260:	e062      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004272:	f000 faf0 	bl	8004856 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	609a      	str	r2, [r3, #8]
      break;
 800428e:	e04f      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042a0:	f000 fad9 	bl	8004856 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042b2:	609a      	str	r2, [r3, #8]
      break;
 80042b4:	e03c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	461a      	mov	r2, r3
 80042c4:	f000 fa50 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2150      	movs	r1, #80	; 0x50
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 faa7 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 80042d4:	e02c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e2:	461a      	mov	r2, r3
 80042e4:	f000 fa6e 	bl	80047c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2160      	movs	r1, #96	; 0x60
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa97 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 80042f4:	e01c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	461a      	mov	r2, r3
 8004304:	f000 fa30 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2140      	movs	r1, #64	; 0x40
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fa87 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 8004314:	e00c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f000 fa7e 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 8004326:	e003      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e000      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800432e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr
	...

08004394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a29      	ldr	r2, [pc, #164]	; (800444c <TIM_Base_SetConfig+0xb8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <TIM_Base_SetConfig+0x30>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d007      	beq.n	80043c4 <TIM_Base_SetConfig+0x30>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a26      	ldr	r2, [pc, #152]	; (8004450 <TIM_Base_SetConfig+0xbc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_Base_SetConfig+0x30>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a25      	ldr	r2, [pc, #148]	; (8004454 <TIM_Base_SetConfig+0xc0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d108      	bne.n	80043d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a1c      	ldr	r2, [pc, #112]	; (800444c <TIM_Base_SetConfig+0xb8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <TIM_Base_SetConfig+0x62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d007      	beq.n	80043f6 <TIM_Base_SetConfig+0x62>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a19      	ldr	r2, [pc, #100]	; (8004450 <TIM_Base_SetConfig+0xbc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d003      	beq.n	80043f6 <TIM_Base_SetConfig+0x62>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a18      	ldr	r2, [pc, #96]	; (8004454 <TIM_Base_SetConfig+0xc0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d108      	bne.n	8004408 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a07      	ldr	r2, [pc, #28]	; (800444c <TIM_Base_SetConfig+0xb8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d103      	bne.n	800443c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	615a      	str	r2, [r3, #20]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800

08004458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f023 0201 	bic.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 0302 	bic.w	r3, r3, #2
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <TIM_OC1_SetConfig+0xc8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10c      	bne.n	80044ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0308 	bic.w	r3, r3, #8
 80044ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a13      	ldr	r2, [pc, #76]	; (8004520 <TIM_OC1_SetConfig+0xc8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d111      	bne.n	80044fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	621a      	str	r2, [r3, #32]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40012c00 	.word	0x40012c00

08004524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f023 0210 	bic.w	r2, r3, #16
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0320 	bic.w	r3, r3, #32
 800456e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <TIM_OC2_SetConfig+0xd0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10d      	bne.n	80045a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800458a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <TIM_OC2_SetConfig+0xd0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d113      	bne.n	80045d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	40012c00 	.word	0x40012c00

080045f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <TIM_OC3_SetConfig+0xd0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10d      	bne.n	8004672 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800465c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <TIM_OC3_SetConfig+0xd0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d113      	bne.n	80046a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00

080046cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	031b      	lsls	r3, r3, #12
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a0f      	ldr	r2, [pc, #60]	; (8004764 <TIM_OC4_SetConfig+0x98>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d109      	bne.n	8004740 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	40012c00 	.word	0x40012c00

08004768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 030a 	bic.w	r3, r3, #10
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0210 	bic.w	r2, r3, #16
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	031b      	lsls	r3, r3, #12
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004800:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	f043 0307 	orr.w	r3, r3, #7
 8004844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004856:	b480      	push	{r7}
 8004858:	b087      	sub	sp, #28
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
 8004862:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004870:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	021a      	lsls	r2, r3, #8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	431a      	orrs	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4313      	orrs	r3, r2
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	609a      	str	r2, [r3, #8]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2201      	movs	r2, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	401a      	ands	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e046      	b.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a16      	ldr	r2, [pc, #88]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00e      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	d009      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a12      	ldr	r2, [pc, #72]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a10      	ldr	r2, [pc, #64]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10c      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800495c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	4313      	orrs	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800

08004998 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e03d      	b.n	8004a30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e042      	b.n	8004af6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fc fcf7 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2224      	movs	r2, #36	; 0x24
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fe58 	bl	8005758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b08a      	sub	sp, #40	; 0x28
 8004b02:	af02      	add	r7, sp, #8
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d16d      	bne.n	8004bfa <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_UART_Transmit+0x2c>
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e066      	b.n	8004bfc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2221      	movs	r2, #33	; 0x21
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3c:	f7fd fa2e 	bl	8001f9c <HAL_GetTick>
 8004b40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	88fa      	ldrh	r2, [r7, #6]
 8004b46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d108      	bne.n	8004b6a <HAL_UART_Transmit+0x6c>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e003      	b.n	8004b72 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b72:	e02a      	b.n	8004bca <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fba7 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e036      	b.n	8004bfc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e007      	b.n	8004bbc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1cf      	bne.n	8004b74 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2140      	movs	r1, #64	; 0x40
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 fb77 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e006      	b.n	8004bfc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e000      	b.n	8004bfc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d17c      	bne.n	8004d1e <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_UART_Receive+0x2c>
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e075      	b.n	8004d20 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2222      	movs	r2, #34	; 0x22
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c48:	f7fd f9a8 	bl	8001f9c <HAL_GetTick>
 8004c4c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c62:	d108      	bne.n	8004c76 <HAL_UART_Receive+0x72>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e003      	b.n	8004c7e <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c7e:	e043      	b.n	8004d08 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2200      	movs	r2, #0
 8004c88:	2120      	movs	r1, #32
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fb21 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e042      	b.n	8004d20 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10c      	bne.n	8004cba <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	e01f      	b.n	8004cfa <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc2:	d007      	beq.n	8004cd4 <HAL_UART_Receive+0xd0>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <HAL_UART_Receive+0xde>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e008      	b.n	8004cf4 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1b6      	bne.n	8004c80 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d112      	bne.n	8004d68 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_UART_Receive_IT+0x26>
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e00b      	b.n	8004d6a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fb25 	bl	80053ae <UART_Start_Receive_IT>
 8004d64:	4603      	mov	r3, r0
 8004d66:	e000      	b.n	8004d6a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b0ba      	sub	sp, #232	; 0xe8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10f      	bne.n	8004dda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HAL_UART_IRQHandler+0x66>
 8004dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fc01 	bl	80055da <UART_Receive_IT>
      return;
 8004dd8:	e25b      	b.n	8005292 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80de 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x22c>
 8004de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80d1 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <HAL_UART_IRQHandler+0xae>
 8004e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	f043 0201 	orr.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <HAL_UART_IRQHandler+0xd2>
 8004e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f043 0202 	orr.w	r2, r3, #2
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00b      	beq.n	8004e6a <HAL_UART_IRQHandler+0xf6>
 8004e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	f043 0204 	orr.w	r2, r3, #4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d011      	beq.n	8004e9a <HAL_UART_IRQHandler+0x126>
 8004e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	f043 0208 	orr.w	r2, r3, #8
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 81f2 	beq.w	8005288 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x14e>
 8004eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fb8c 	bl	80055da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <HAL_UART_IRQHandler+0x17a>
 8004ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04f      	beq.n	8004f8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa96 	bl	8005420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d041      	beq.n	8004f86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3314      	adds	r3, #20
 8004f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3314      	adds	r3, #20
 8004f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1d9      	bne.n	8004f02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d013      	beq.n	8004f7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	4a7e      	ldr	r2, [pc, #504]	; (8005154 <HAL_UART_IRQHandler+0x3e0>)
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fd f990 	bl	8002288 <HAL_DMA_Abort_IT>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d016      	beq.n	8004f9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	e00e      	b.n	8004f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f993 	bl	80052aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e00a      	b.n	8004f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f98f 	bl	80052aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e006      	b.n	8004f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f98b 	bl	80052aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004f9a:	e175      	b.n	8005288 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9c:	bf00      	nop
    return;
 8004f9e:	e173      	b.n	8005288 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	f040 814f 	bne.w	8005248 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8148 	beq.w	8005248 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8141 	beq.w	8005248 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 80b6 	beq.w	8005158 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8145 	beq.w	800528c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800500a:	429a      	cmp	r2, r3
 800500c:	f080 813e 	bcs.w	800528c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005016:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b20      	cmp	r3, #32
 8005020:	f000 8088 	beq.w	8005134 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800503a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800503e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005050:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005054:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800505c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1d9      	bne.n	8005024 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3314      	adds	r3, #20
 8005076:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3314      	adds	r3, #20
 8005090:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005094:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005098:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800509c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e1      	bne.n	8005070 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e3      	bne.n	80050ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005104:	f023 0310 	bic.w	r3, r3, #16
 8005108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	330c      	adds	r3, #12
 8005112:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005116:	65ba      	str	r2, [r7, #88]	; 0x58
 8005118:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800511c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e3      	bne.n	80050f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	4618      	mov	r0, r3
 8005130:	f7fd f86f 	bl	8002212 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005142:	b29b      	uxth	r3, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	b29b      	uxth	r3, r3
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f8b6 	bl	80052bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005150:	e09c      	b.n	800528c <HAL_UART_IRQHandler+0x518>
 8005152:	bf00      	nop
 8005154:	080054e5 	.word	0x080054e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005160:	b29b      	uxth	r3, r3
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 808e 	beq.w	8005290 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8089 	beq.w	8005290 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80051a2:	647a      	str	r2, [r7, #68]	; 0x44
 80051a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e3      	bne.n	800517e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3314      	adds	r3, #20
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	623b      	str	r3, [r7, #32]
   return(result);
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3314      	adds	r3, #20
 80051d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051da:	633a      	str	r2, [r7, #48]	; 0x30
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e3      	bne.n	80051b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	60fb      	str	r3, [r7, #12]
   return(result);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0310 	bic.w	r3, r3, #16
 8005212:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	330c      	adds	r3, #12
 800521c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005220:	61fa      	str	r2, [r7, #28]
 8005222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	617b      	str	r3, [r7, #20]
   return(result);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e3      	bne.n	80051fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800523a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f83b 	bl	80052bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005246:	e023      	b.n	8005290 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_UART_IRQHandler+0x4f4>
 8005254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f953 	bl	800550c <UART_Transmit_IT>
    return;
 8005266:	e014      	b.n	8005292 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00e      	beq.n	8005292 <HAL_UART_IRQHandler+0x51e>
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f992 	bl	80055aa <UART_EndTransmit_IT>
    return;
 8005286:	e004      	b.n	8005292 <HAL_UART_IRQHandler+0x51e>
    return;
 8005288:	bf00      	nop
 800528a:	e002      	b.n	8005292 <HAL_UART_IRQHandler+0x51e>
      return;
 800528c:	bf00      	nop
 800528e:	e000      	b.n	8005292 <HAL_UART_IRQHandler+0x51e>
      return;
 8005290:	bf00      	nop
  }
}
 8005292:	37e8      	adds	r7, #232	; 0xe8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr

080052aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b090      	sub	sp, #64	; 0x40
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	e050      	b.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d04c      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <UART_WaitOnFlagUntilTimeout+0x30>
 80052f2:	f7fc fe53 	bl	8001f9c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fe:	429a      	cmp	r2, r3
 8005300:	d241      	bcs.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005322:	637a      	str	r2, [r7, #52]	; 0x34
 8005324:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e5      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3314      	adds	r3, #20
 800533c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005356:	623a      	str	r2, [r7, #32]
 8005358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	61bb      	str	r3, [r7, #24]
   return(result);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e5      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e00f      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4013      	ands	r3, r2
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d09f      	beq.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3740      	adds	r7, #64	; 0x40
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	4613      	mov	r3, r2
 80053ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	88fa      	ldrh	r2, [r7, #6]
 80053c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2222      	movs	r2, #34	; 0x22
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0220 	orr.w	r2, r2, #32
 8005412:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b095      	sub	sp, #84	; 0x54
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005448:	643a      	str	r2, [r7, #64]	; 0x40
 800544a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800544e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e5      	bne.n	8005428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3314      	adds	r3, #20
 8005462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	61fb      	str	r3, [r7, #28]
   return(result);
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	2b01      	cmp	r3, #1
 8005496:	d119      	bne.n	80054cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 0310 	bic.w	r3, r3, #16
 80054ae:	647b      	str	r3, [r7, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054b8:	61ba      	str	r2, [r7, #24]
 80054ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	613b      	str	r3, [r7, #16]
   return(result);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054da:	bf00      	nop
 80054dc:	3754      	adds	r7, #84	; 0x54
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fed3 	bl	80052aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b21      	cmp	r3, #33	; 0x21
 800551e:	d13e      	bne.n	800559e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005528:	d114      	bne.n	8005554 <UART_Transmit_IT+0x48>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d110      	bne.n	8005554 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005546:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]
 8005552:	e008      	b.n	8005566 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6211      	str	r1, [r2, #32]
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29b      	uxth	r3, r3
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	4619      	mov	r1, r3
 8005574:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10f      	bne.n	800559a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005588:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005598:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
  }
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fe64 	bl	8005298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08c      	sub	sp, #48	; 0x30
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b22      	cmp	r3, #34	; 0x22
 80055ec:	f040 80ae 	bne.w	800574c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f8:	d117      	bne.n	800562a <UART_Receive_IT+0x50>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d113      	bne.n	800562a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005618:	b29a      	uxth	r2, r3
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
 8005628:	e026      	b.n	8005678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563c:	d007      	beq.n	800564e <UART_Receive_IT+0x74>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <UART_Receive_IT+0x82>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e008      	b.n	800566e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005668:	b2da      	uxtb	r2, r3
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4619      	mov	r1, r3
 8005686:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005688:	2b00      	cmp	r3, #0
 800568a:	d15d      	bne.n	8005748 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0220 	bic.w	r2, r2, #32
 800569a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d135      	bne.n	800573e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	613b      	str	r3, [r7, #16]
   return(result);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f8:	623a      	str	r2, [r7, #32]
 80056fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	69f9      	ldr	r1, [r7, #28]
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	61bb      	str	r3, [r7, #24]
   return(result);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e5      	bne.n	80056d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b10      	cmp	r3, #16
 8005718:	d10a      	bne.n	8005730 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fdc0 	bl	80052bc <HAL_UARTEx_RxEventCallback>
 800573c:	e002      	b.n	8005744 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb fc16 	bl	8000f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e002      	b.n	800574e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3730      	adds	r7, #48	; 0x30
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005792:	f023 030c 	bic.w	r3, r3, #12
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	430b      	orrs	r3, r1
 800579e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2c      	ldr	r2, [pc, #176]	; (800586c <UART_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057c0:	f7fd fb6c 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	e002      	b.n	80057ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7fd fb54 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 80057cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009a      	lsls	r2, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <UART_SetConfig+0x118>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	0119      	lsls	r1, r3, #4
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009a      	lsls	r2, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	fbb2 f2f3 	udiv	r2, r2, r3
 8005804:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <UART_SetConfig+0x118>)
 8005806:	fba3 0302 	umull	r0, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2064      	movs	r0, #100	; 0x64
 800580e:	fb00 f303 	mul.w	r3, r0, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	3332      	adds	r3, #50	; 0x32
 8005818:	4a15      	ldr	r2, [pc, #84]	; (8005870 <UART_SetConfig+0x118>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005824:	4419      	add	r1, r3
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009a      	lsls	r2, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	fbb2 f2f3 	udiv	r2, r2, r3
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <UART_SetConfig+0x118>)
 800583e:	fba3 0302 	umull	r0, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2064      	movs	r0, #100	; 0x64
 8005846:	fb00 f303 	mul.w	r3, r0, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	3332      	adds	r3, #50	; 0x32
 8005850:	4a07      	ldr	r2, [pc, #28]	; (8005870 <UART_SetConfig+0x118>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	440a      	add	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40013800 	.word	0x40013800
 8005870:	51eb851f 	.word	0x51eb851f

08005874 <memset>:
 8005874:	4603      	mov	r3, r0
 8005876:	4402      	add	r2, r0
 8005878:	4293      	cmp	r3, r2
 800587a:	d100      	bne.n	800587e <memset+0xa>
 800587c:	4770      	bx	lr
 800587e:	f803 1b01 	strb.w	r1, [r3], #1
 8005882:	e7f9      	b.n	8005878 <memset+0x4>

08005884 <__libc_init_array>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	2600      	movs	r6, #0
 8005888:	4d0c      	ldr	r5, [pc, #48]	; (80058bc <__libc_init_array+0x38>)
 800588a:	4c0d      	ldr	r4, [pc, #52]	; (80058c0 <__libc_init_array+0x3c>)
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	42a6      	cmp	r6, r4
 8005892:	d109      	bne.n	80058a8 <__libc_init_array+0x24>
 8005894:	f000 f81a 	bl	80058cc <_init>
 8005898:	2600      	movs	r6, #0
 800589a:	4d0a      	ldr	r5, [pc, #40]	; (80058c4 <__libc_init_array+0x40>)
 800589c:	4c0a      	ldr	r4, [pc, #40]	; (80058c8 <__libc_init_array+0x44>)
 800589e:	1b64      	subs	r4, r4, r5
 80058a0:	10a4      	asrs	r4, r4, #2
 80058a2:	42a6      	cmp	r6, r4
 80058a4:	d105      	bne.n	80058b2 <__libc_init_array+0x2e>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ac:	4798      	blx	r3
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7ee      	b.n	8005890 <__libc_init_array+0xc>
 80058b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b6:	4798      	blx	r3
 80058b8:	3601      	adds	r6, #1
 80058ba:	e7f2      	b.n	80058a2 <__libc_init_array+0x1e>
 80058bc:	08005964 	.word	0x08005964
 80058c0:	08005964 	.word	0x08005964
 80058c4:	08005964 	.word	0x08005964
 80058c8:	08005968 	.word	0x08005968

080058cc <_init>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	bf00      	nop
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr

080058d8 <_fini>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	bf00      	nop
 80058dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058de:	bc08      	pop	{r3}
 80058e0:	469e      	mov	lr, r3
 80058e2:	4770      	bx	lr
