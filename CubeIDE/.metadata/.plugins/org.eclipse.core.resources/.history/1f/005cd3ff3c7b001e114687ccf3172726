/*
 * HAL_LCD.c
 *
 *  Created on: Nov 4, 2023
 *      Author: Ahmed
 */

#include "HAL/HAL_LCD.h"

/* Port B  --> Data Pins */
const u8 Data[4] = {D7,D6,D5,D4};




void LCD_voidInit(void)
{

#if LCD_TYPE == Eight_BIT

	/* Set Pin Direction*/
	DIO_voidSetPinDirection(GPIOB,PIN0_ID, PIN_OUTPUT_ID);
	DIO_voidSetPinDirection(GPIOB,PIN1_ID, PIN_OUTPUT_ID);
	DIO_voidSetPinDirection(GPIOB,PIN2_ID, PIN_OUTPUT_ID);
	/*Set Port Direction*/
	DIO_voidSetPortDirection(GPIOB,0b11111111);

	/* Initialization */

	/*Delay 30*/
	HAL_Delay_ms(30);
	/*  Function Set*/
	LCD_voidWriteCommand(FUNCTION_SET);
	/*Delay 2*/
	HAL_Delay_ms(2);
	/* Display on/off*/
	LCD_voidWriteCommand(DisplayON_OFF);
	/*Delay 2ms*/
	HAL_Delay_ms(2);
	/* Clear Display*/
	LCD_voidWriteCommand(CLEAR_DISPLAY);

#LCD_EN_Pindif


#if LCD_TYPE == Four_BIT

	                              /* Initialization */

	/*Delay 50*/
	HAL_Delay_ms(50);

    /* SLCD_EN_Pind Command Function Set*/
	LCD_voidWriteCommand_4L(FUNCTION_SET_H);
	LCD_voidWriteCommand_4L(FUNCTION_SET_L);
	LCD_voidWriteCommand_4L(FUNCTION_SET_LL);
    /*Delay 50us*/
	HAL_Delay_us(50);

    /*SLCD_EN_Pind Command Display on/off*/
	LCD_voidWriteCommand_4L(DisplayON_OFF_H);
	LCD_voidWriteCommand_4L(DisplayON_OFF_L);
    /*Delay 50us*/
	HAL_Delay_us(50);

    /*SLCD_EN_Pind Command Clear Display*/
	LCD_voidWriteCommand_4L(CLEAR_DISPLAY_H);
	LCD_voidWriteCommand_4L(CLEAR_DISPLAY_L);
	/*Delay 2ms*/
	HAL_Delay_ms(2);

	/*LCD_EN_Pintry Mode Set */
	LCD_voidWriteCommand_4L(LCD_EN_PinTRY_MODE_H);
	LCD_voidWriteCommand_4L(LCD_EN_PinTRY_MODE_L);



}
#endif


/* To let the LCD read the data on Pins */
void LCD_voidLCD_EN_Pinable_4L()
{
	HAL_GPIO_WritePin(CONTROL_PORT,LCD_EN_Pin,GPIO_PIN_SET);
	HAL_Delay_us(50);
	HAL_GPIO_WritePin(CONTROL_PORT,LCD_EN_Pin,GPIO_PIN_RESET);
}



/* SLCD_EN_Pind the command Not Data on Data Pins from D7-D4 */
void LCD_voidWriteCommand_4L(u8 Copy_u8Value )
{
	u8 Local_u8Temp = 0 ;

	HAL_GPIO_WritePin(CONTROL_PORT,LCD_RS_Pin,GPIO_PIN_RESET);

	 Local_u8Temp = Get_bit(Copy_u8Value,3) ;
 	HAL_GPIO_WritePin(DATA_PORT,PIN4_ID,Local_u8Temp);
	 Local_u8Temp = Get_bit(Copy_u8Value,2) ;
 	HAL_GPIO_WritePin(DATA_PORT,PIN2_ID,Local_u8Temp);
	 Local_u8Temp = Get_bit(Copy_u8Value,1) ;
 	HAL_GPIO_WritePin(DATA_PORT,PIN1_ID,Local_u8Temp);
	 Local_u8Temp = Get_bit(Copy_u8Value,0) ;
 	HAL_GPIO_WritePin(DATA_PORT,PIN0_ID,Local_u8Temp);
    LCD_voidLCD_EN_Pinable_4L();



}


/* SLCD_EN_Pind Data not Command on the Data Pins */
void LCD_voidWrite_Data_4L(u8 Copy_u8Value )
{


		u8 Local_u8Temp,Local_u8Cont = 0,Local_u8LoopCounter=0 ;

		Local_u8Temp = (Copy_u8Value>>4);

		for (Local_u8LoopCounter = 0 ; Local_u8LoopCounter<2 ; Local_u8LoopCounter++)
		{
		HAL_GPIO_WritePin(CONTROL_PORT,LCD_RS_Pin,GPIO_PIN_SET);
		Local_u8Cont = Get_bit(Local_u8Temp,3) ;
		HAL_GPIO_WritePin(DATA_PORT,PIN4_ID,Local_u8Cont);
		Local_u8Cont = Get_bit(Local_u8Temp,2) ;
		HAL_GPIO_WritePin(DATA_PORT,PIN2_ID,Local_u8Cont);
		Local_u8Cont = Get_bit(Local_u8Temp,1) ;
		HAL_GPIO_WritePin(DATA_PORT,PIN1_ID,Local_u8Cont);
		Local_u8Cont = Get_bit(Local_u8Temp,0) ;
		HAL_GPIO_WritePin(DATA_PORT,PIN0_ID,Local_u8Cont);
		Local_u8Temp = Copy_u8Value ;
		LCD_voidLCD_EN_Pinable_4L() ;
		}
}



void  LCD_voidSLCD_EN_PindDATA_4L(u8 Copy_u8DATA)
{

	/*SLCD_EN_Pind Data*/
	LCD_voidWrite_Data_4L(Copy_u8DATA);
}


#endif







#if LCD_TYPE == Eight_BIT

void LCD_voidWriteCommand_8L( u8 Copy_u8Command)
{
	/*LCD_RS_Pin=0--->PortB,pin0*/
    HAL_GPIO_WritePin(GPIOB, PIN0_ID,GPIO_PIN_RESET);
	/*RW=0--->PortB,pin1*/
    HAL_GPIO_WritePin(GPIOB, PIN1_ID,GPIO_PIN_RESET);
    /*SLCD_EN_Pind Data  Data Pins of LCD ---->PortA*/
   DIO_voidSetPortValue(GPIOB,Copy_u8Command);
   /*LCD_EN_Pinable Pulse--->PortB,Pin2*/
   HAL_GPIO_WritePin(GPIOB, PIN2_ID,PIN_OUTPUT_ID);
	HAL_Delay_ms(2); //1 second delay
   HAL_GPIO_WritePin(GPIOB, PIN2_ID,GPIO_PIN_RESET);

}



void  LCD_voidWriteDATA_8L( u8 Copy_u8DATA)
{
	/*LCD_RS_Pin=1--->pin0*/
    HAL_GPIO_WritePin(GPIOB, PIN0_ID,GPIO_PIN_SET);
 	/*RW=0--->pin1*/
    HAL_GPIO_WritePin(GPIOB, PIN1_ID,GPIO_PIN_RESET);
    /*SLCD_EN_Pind Data*/
    DIO_voidSetPortValue(GPIOB,Copy_u8DATA);

    /*LCD_EN_Pinable Pulse*/
    HAL_GPIO_WritePin(GPIOB, PIN2_ID,GPIO_PIN_SET);
	HAL_Delay_ms(2); //1 second delay
    HAL_GPIO_WritePin(GPIOB, PIN2_ID,GPIO_PIN_RESET);



}


#endif


void LCD_GoToXY(u8 Copy_u8X, u8 Copy_u8Y)
{
		#if (LCD_Type==Eight_BIT)

		u8 LOC_Default = DDRAM_BASE_ADDRESS;

		//FiLCD_RS_Pint Line
		if (Copy_u8X==1)
		{
			LOC_Default = FILCD_RS_PinT_LINE_ADDRESS + Copy_u8Y ;
			LCD_voidWriteCommand_8L(LOC_Default);
		}

		//Second Line
		else
		{
			LOC_Default = SECOND_LINE_ADDRESS + Copy_u8Y ;

			LCD_voidWriteCommand_8L(LOC_Default);
		}


		#elif (LCD_Type==Four_BIT)

		u8 LOC_Default=DDRAM_BASE_ADDRESS;
		u8 Local_u8Temp = 0 ;

		//FiLCD_RS_Pint Line
		if (Copy_u8X==LINE1)
		{
			LOC_Default= FILCD_RS_PinT_LINE_ADDRESS + Copy_u8Y;
			Local_u8Temp = LOC_Default >> 4 ;
			LCD_voidWriteCommand_4L(Local_u8Temp);
			Local_u8Temp = LOC_Default ;
			LCD_voidWriteCommand_4L(Local_u8Temp);
		}

		//Second Line
		else if (Copy_u8X==LINE2)
		{
			LOC_Default= SECOND_LINE_ADDRESS + Copy_u8Y;
			Local_u8Temp = LOC_Default >> 4 ;
			LCD_voidWriteCommand_4L(Local_u8Temp);
			Local_u8Temp = LOC_Default ;
			LCD_voidWriteCommand_4L(Local_u8Temp);

		}

		//Third Line
		else if (Copy_u8X==LINE3)
		{
			LOC_Default= THIRD_LINE_ADDRESS + Copy_u8Y;
			Local_u8Temp = LOC_Default >> 4 ;
			LCD_voidWriteCommand_4L(Local_u8Temp);
			Local_u8Temp = LOC_Default ;
			LCD_voidWriteCommand_4L(Local_u8Temp);

		}

		//Fourth Line
		else if (Copy_u8X==LINE4)
		{
			LOC_Default= FOURTH_LINE_ADDRESS + Copy_u8Y;
			Local_u8Temp = LOC_Default >> 4 ;
			LCD_voidWriteCommand_4L(Local_u8Temp);
			Local_u8Temp = LOC_Default ;
			LCD_voidWriteCommand_4L(Local_u8Temp);

		}
#endif
}


/* Write Group of CharacteLCD_RS_Pin on LCD */
void LCD_voidWriteSting(u8 *Copy_u8string , u8 Copy_u8Line)
{

#if (LCD_Type==Eight_BIT)

	u8 Local_u8Shift = 0 ;
	while (Copy_u8string[Local_u8Shift]!='\0')
	{
		LCD_GoToXY(Copy_u8Line,Local_u8Shift);
		LCD_voidWriteDATA_8L(Copy_u8string[Local_u8Shift]);
		Local_u8Shift++;
	}

#elif (LCD_Type==Four_BIT)

	u8 Local_u8Shift = 0 ;
	while (Copy_u8string[Local_u8Shift]!='\0')
	{
		LCD_GoToXY(Copy_u8Line,Local_u8Shift);
		LCD_voidSLCD_EN_PindDATA_4L(Copy_u8string[Local_u8Shift]);
		Local_u8Shift++;
	}

#endif
}


/* Display NumbeLCD_RS_Pin on LCD */
void LCD_voidDisplayNumber(u32 Copy_u32DATA)
{

#if LCD_Type==Eight_BIT

	u8  Local_u32Count = 0 , Local_u32Cont = 0 ;
	s8  Local_s8Index = 0 ;
	u32 Local_u32NumbeLCD_RS_Pin[100] ;

	while (Copy_u32DATA != 0)
	{
		Local_u32Cont =  Copy_u32DATA %10 ;
		Copy_u32DATA  =  Copy_u32DATA/10 ;
		Local_u32NumbeLCD_RS_Pin[Local_u32Count] = Local_u32Cont ;
		Local_u32Count++ ;
	}

	for (Local_s8Index = (Local_u32Count-1) ; Local_s8Index>=0 ; Local_s8Index--)
	{
		LCD_voidWriteDATA_8L(Local_u32NumbeLCD_RS_Pin[Local_s8Index]+48);
	}


#elif LCD_Type==Four_BIT

	u32  Local_u32Count = 0 ;
	u8 Local_u8Cont = 0 ;
	s8  Local_s8Index = 0 ;
	u32 Local_u32NumbeLCD_RS_Pin[100] ;
	u32 Local_u8Temp = 0 ;


	if (Copy_u32DATA == Local_u8Temp )
	{
		LCD_voidSLCD_EN_PindDATA_4L(48) ;
	}

	else
	{

		while (Copy_u32DATA != 0  )
		{
		Local_u8Cont =  Copy_u32DATA %10 ;
		Copy_u32DATA  =  Copy_u32DATA/10 ;
		Local_u32NumbeLCD_RS_Pin[Local_u32Count] = Local_u8Cont ;
		Local_u32Count++ ;
		}


		for (Local_s8Index = (Local_u32Count-1) ; Local_s8Index>=0 ; Local_s8Index--)
		{
		LCD_voidSLCD_EN_PindDATA_4L(Local_u32NumbeLCD_RS_Pin[Local_s8Index]+48) ;
		}

}
#endif
}




/* Undefined Character in CGROM , and want to display it */
void LCD_voidWriteSpecialCharacter(u8 Copy_u32arr[8],u8 Copy_u8Pattern_Number , u8 Copy_u8Line , u8 Copy_u8Offset )
{
	/* We can write 8 Special Character ,each is 8 Byte */
	/* FiLCD_RS_Pint 8 Byte in the 64 Byte Start at address 64  */

#if LCD_Type==Eight_BIT

	u8 Local_Temp = 0 ;
	u8 Local_Loop_Counter = 0 ;

	Local_Temp = (CGRAM_BASE_ADDRESS+Copy_u8Pattern_Number*8 );
	LCD_voidWriteCommand_8L(Local_Temp);

	for (Local_Loop_Counter =0 ; Local_Loop_Counter < 8 ; Local_Loop_Counter++)
	{
		LCD_voidWriteDATA_8L(Copy_u32arr[Local_Loop_Counter]);
	}

	/* Place To Print Special Character In */
	LCD_GoToXY(Copy_u8Line,Copy_u8Offset);

	/* Pattern Number */
	LCD_voidWriteDATA_8L(Copy_u8Pattern_Number);


#elif LCD_Type==Four_BIT

		u8 Local_Temp = 0 ;
		u8 Local_Loop_Counter = 0 ;
		Local_Temp = (CGRAM_BASE_ADDRESS+Copy_u8Pattern_Number*8 ) >> 4 ;
		LCD_voidWriteCommand_4L(Local_Temp);
		Local_Temp = (CGRAM_BASE_ADDRESS+Copy_u8Pattern_Number*8 );
		LCD_voidWriteCommand_4L(Local_Temp);

		for (Local_Loop_Counter = 0 ; Local_Loop_Counter<8 ; Local_Loop_Counter++)
		{
			LCD_voidSLCD_EN_PindDATA_4L(Copy_u32arr[Local_Loop_Counter]);
		}

		/* Place To Print Special Character In */
		LCD_GoToXY(Copy_u8Line,Copy_u8Offset);
		/* Pattern Number */
		LCD_voidSLCD_EN_PindDATA_4L(Copy_u8Pattern_Number);
#endif
}


/* To shift the CuLCD_RS_Pinor Right , Left or Change the Display */
void LCD_voidShift(u8 Copy_u8ShifttingDirection)
{

	LCD_voidWriteCommand_4L(SHIFTING_H);
	if (Copy_u8ShifttingDirection == RIGHT)
	{
		LCD_voidWriteCommand_4L(SHIFTINGRIGHT_L);
	}

	else if (Copy_u8ShifttingDirection == LEFT)
	{
		LCD_voidWriteCommand_4L(SHIFTINGLEFT_L);
	}
	else if (Copy_u8ShifttingDirection == DISPLAY_LEFT)
	{
		LCD_voidWriteCommand_4L(SHIFTING_LCD_EN_PinTIRE_DISPLAY_L);

	}
	else if (Copy_u8ShifttingDirection == DISPLAY_RIGHT)
	{
		LCD_voidWriteCommand_4L(SHIFTING_LCD_EN_PinTIRE_DISPLAY_R);
	}

}


/* To Clear LCD */
void LCD_voidClear()
{
#if LCD_Type==Eight_BIT
	LCD_voidWriteCommand_8L(CLR_LCD);



#elif LCD_Type==Four_BIT
	LCD_voidWriteCommand_4L(CLR_LCD_H);
	LCD_voidWriteCommand_4L(CLR_LCD_L);

#endif
}





/////////////////////////////////////////////////

/* This Function to operate LCD Using IC 74HC595 */


void LCD_voidInit_IC(void)
{
	/* Set Control Pin Direction */
	DIO_voidSetPinDirection(GPIOB,LCD_RS_Pin, PIN_OUTPUT_ID);
	DIO_voidSetPinDirection(GPIOB,LCD_EN_Pin, PIN_OUTPUT_ID);

	/*Delay 50*/
	HAL_Delay_ms(35);

	/* LCD_RS_Pin Low */
	HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin,GPIO_PIN_RESET);
	/* SLCD_EN_Pind Command Function Set*/

	SPI_voidTransmiter(FUNCTION_SET_H);
	LCD_LCD_EN_PinableICPulse () ;
	LCD_voidLCD_EN_Pinable_4L() ;


	SPI_voidTransmiter(FUNCTION_SET_L);
	LCD_LCD_EN_PinableICPulse () ;
	LCD_voidLCD_EN_Pinable_4L() ;

	SPI_voidTransmiter(FUNCTION_SET_LL);
	LCD_LCD_EN_PinableICPulse () ;
	LCD_voidLCD_EN_Pinable_4L() ;
	/* Delay 50us */
	HAL_Delay_us(50);


	/* SLCD_EN_Pind Command Display on/off */
	SPI_voidTransmiter(DisplayON_OFF_H);
	LCD_LCD_EN_PinableICPulse () ;
	LCD_voidLCD_EN_Pinable_4L() ;

	SPI_voidTransmiter(DisplayON_OFF_L);
	LCD_LCD_EN_PinableICPulse () ;
	LCD_voidLCD_EN_Pinable_4L() ;
	/* Delay 50us */
	HAL_Delay_us(50);

	/* SLCD_EN_Pind Command Clear Display */
	SPI_voidTransmiter(CLEAR_DISPLAY_H);
	LCD_LCD_EN_PinableICPulse () ;
	LCD_voidLCD_EN_Pinable_4L() ;

	SPI_voidTransmiter(CLEAR_DISPLAY_L);
	LCD_LCD_EN_PinableICPulse () ;
	LCD_voidLCD_EN_Pinable_4L() ;
	/* Delay 2ms */
	HAL_Delay_ms(2);

	/* LCD_EN_Pintry Mode Set */
	SPI_voidTransmiter(LCD_EN_PinTRY_MODE_H);
	LCD_LCD_EN_PinableICPulse () ;
	LCD_voidLCD_EN_Pinable_4L() ;

	SPI_voidTransmiter(LCD_EN_PinTRY_MODE_L);
	LCD_LCD_EN_PinableICPulse () ;
	LCD_voidLCD_EN_Pinable_4L() ;


}

void LCD_LCD_EN_PinableICPulse ()
{
	HAL_GPIO_WritePin(GPIOB, PIN7_ID,GPIO_PIN_SET);
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOB, PIN7_ID,GPIO_PIN_RESET);
	HAL_Delay(1);
}



void LCD_voidWriteDataIC_4L(u8 Copy_u8Command)
{
	/*LCD_RS_Pin=1--->pin0 */
	HAL_GPIO_WritePin(GPIOB,PIN3_ID,GPIO_PIN_SET);

	/* SLCD_EN_Pind Data */
	u8 Data = Copy_u8Command >> 4 ;
	SPI_voidTransmiter(Data) ;
	LCD_LCD_EN_PinableICPulse ()  ;
	LCD_voidLCD_EN_Pinable_4L() ;

	SPI_voidTransmiter(Copy_u8Command) ;
	LCD_LCD_EN_PinableICPulse ()  ;
	LCD_voidLCD_EN_Pinable_4L() ;
}


void LCD_voidClearIC_4L ()
{
	HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin,GPIO_PIN_RESET);
	SPI_voidTransmiter(CLR_LCD_H);
	LCD_LCD_EN_PinableICPulse ()  ;
	LCD_voidLCD_EN_Pinable_4L() ;

	HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin,GPIO_PIN_RESET);
	SPI_voidTransmiter(CLR_LCD_L);
	LCD_LCD_EN_PinableICPulse ()  ;
	LCD_voidLCD_EN_Pinable_4L() ;
}
