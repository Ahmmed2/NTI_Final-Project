/*
 * Ultrasonic.c
 *
 *  Created on: Nov 8, 2023
 *      Author: alaae
 */

#include "Ultrasonic.h"

extern TIM_HandleTypeDef htim2;
uint32_t pMillis;
uint32_t val1_Ultrsonic_1 = 0;
uint32_t val2_Ultrsonic_1 = 0;
uint32_t val1_Ultrsonic_2 = 0;
uint32_t val2_Ultrsonic_2 = 0;
uint32_t val1_Ultrsonic_3 = 0;
uint32_t val2_Ultrsonic_3 = 0;
uint32_t val1_Ultrsonic_4 = 0;
uint32_t val2_Ultrsonic_4 = 0;

uint16_t distance1 = 0;
uint16_t distance2 = 0;
uint16_t distance3 = 0;
uint16_t distance4 = 0;

UltrasonicSensor ultrasonicSensors[ULTRA_COUNT] = {
    {GPIOA, GPIOA, GPIO_PIN_0, GPIO_PIN_4, &val1_Ultrsonic_1, &val2_Ultrsonic_1, &distance1},
    //{GPIOB, GPIOB, GPIO_PIN_0, GPIO_PIN_1, &val1_Ultrsonic_2, &val2_Ultrsonic_2, &distance2},
    {GPIOB, GPIOB, GPIO_PIN_13, GPIO_PIN_14, &val1_Ultrsonic_3, &val2_Ultrsonic_3, &distance3},
    //{GPIOA, GPIOB, GPIO_PIN_15, GPIO_PIN_15, &val1_Ultrsonic_4, &val2_Ultrsonic_4, &distance4}
};


void Start_Ultrasonic(void) {
    HAL_TIM_Base_Start(&htim2);
}

void Read_DistancesUltrasonics(uint16_t* distances) {
    for (int i = 0; i < ULTRA_COUNT; i++) {
        UltrasonicSensor sensor = ultrasonicSensors[i];

        HAL_GPIO_WritePin(sensor.trigPort, sensor.trigPin, GPIO_PIN_SET);
        __HAL_TIM_SET_COUNTER(&htim2, 0);
        while (__HAL_TIM_GET_COUNTER(&htim2) < 10);  // wait for 10 us
        HAL_GPIO_WritePin(sensor.trigPort, sensor.trigPin, GPIO_PIN_RESET);

        pMillis = HAL_GetTick();
        while (!(HAL_GPIO_ReadPin(sensor.echoPort, sensor.echoPin)) && pMillis + 10 > HAL_GetTick());
        *(sensor.val1) = __HAL_TIM_GET_COUNTER(&htim2);

        pMillis = HAL_GetTick();
        while ((HAL_GPIO_ReadPin(sensor.echoPort, sensor.echoPin)) && pMillis + 50 > HAL_GetTick());
        *(sensor.val2) = __HAL_TIM_GET_COUNTER(&htim2);

        *(sensor.distance) = (*(sensor.val2) - *(sensor.val1)) * 0.034 / 2;
        if (*(sensor.distance) > 0 && *(sensor.distance) < 100) {
            *(sensor.distance) = *(sensor.distance) + 1;
        } else if (*(sensor.distance) >= 100 && *(sensor.distance) <= 200) {
            *(sensor.distance) = *(sensor.distance) + 2;
        } else if (*(sensor.distance) >= 200 && *(sensor.distance) <= 300) {
            *(sensor.distance) = *(sensor.distance) + 3;
        } else {
            *(sensor.distance) = *(sensor.distance) + 4;
        }

        // Store the distance in the array
        distances[i] = *(sensor.distance);
    }
}
