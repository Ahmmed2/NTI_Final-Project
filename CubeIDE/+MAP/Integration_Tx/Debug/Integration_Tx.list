
Integration_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003708  08003708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003708  08003708  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003708  08003708  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  0800371c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800371c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6ca  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d8d  00000000  00000000  0002c742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a2  00000000  00000000  0002f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017117  00000000  00000000  0002fac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1f8  00000000  00000000  00046bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000869d2  00000000  00000000  00054dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003310  00000000  00000000  000db7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000deab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080036c4 	.word	0x080036c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080036c4 	.word	0x080036c4

0800014c <HAL_voidControlMotors>:
#include "HAL/dc_motor.h"

extern TIM_HandleTypeDef htim1;

void HAL_voidControlMotors(uint8_t Copy_u8Speed, uint8_t Copy_u8direction)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
  if (Copy_u8direction == STOP)
 800015c:	79bb      	ldrb	r3, [r7, #6]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d114      	bne.n	800018c <HAL_voidControlMotors+0x40>
  {
		/*stop the 4 motors to stop the car*/
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000162:	2200      	movs	r2, #0
 8000164:	2101      	movs	r1, #1
 8000166:	484b      	ldr	r0, [pc, #300]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000168:	f001 f89e 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	2102      	movs	r1, #2
 8000170:	4848      	ldr	r0, [pc, #288]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000172:	f001 f899 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8000176:	2200      	movs	r2, #0
 8000178:	2104      	movs	r1, #4
 800017a:	4846      	ldr	r0, [pc, #280]	; (8000294 <HAL_voidControlMotors+0x148>)
 800017c:	f001 f894 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2108      	movs	r1, #8
 8000184:	4843      	ldr	r0, [pc, #268]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000186:	f001 f88f 	bl	80012a8 <HAL_GPIO_WritePin>
 800018a:	e05e      	b.n	800024a <HAL_voidControlMotors+0xfe>
  }
  else if (Copy_u8direction == BACKWARD)
 800018c:	79bb      	ldrb	r3, [r7, #6]
 800018e:	2b02      	cmp	r3, #2
 8000190:	d114      	bne.n	80001bc <HAL_voidControlMotors+0x70>
  {
		/*move the  motors in the backward direction to move the car backward*/
	    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_SET);
 8000192:	2201      	movs	r2, #1
 8000194:	2101      	movs	r1, #1
 8000196:	483f      	ldr	r0, [pc, #252]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000198:	f001 f886 	bl	80012a8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2102      	movs	r1, #2
 80001a0:	483c      	ldr	r0, [pc, #240]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001a2:	f001 f881 	bl	80012a8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2104      	movs	r1, #4
 80001aa:	483a      	ldr	r0, [pc, #232]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001ac:	f001 f87c 	bl	80012a8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2108      	movs	r1, #8
 80001b4:	4837      	ldr	r0, [pc, #220]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001b6:	f001 f877 	bl	80012a8 <HAL_GPIO_WritePin>
 80001ba:	e046      	b.n	800024a <HAL_voidControlMotors+0xfe>
  }
  else if (Copy_u8direction == FORWARD)
 80001bc:	79bb      	ldrb	r3, [r7, #6]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d114      	bne.n	80001ec <HAL_voidControlMotors+0xa0>
  {
		/*move the  motors in the forward direction to move the car forward*/
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2101      	movs	r1, #1
 80001c6:	4833      	ldr	r0, [pc, #204]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001c8:	f001 f86e 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2102      	movs	r1, #2
 80001d0:	4830      	ldr	r0, [pc, #192]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001d2:	f001 f869 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2104      	movs	r1, #4
 80001da:	482e      	ldr	r0, [pc, #184]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001dc:	f001 f864 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2108      	movs	r1, #8
 80001e4:	482b      	ldr	r0, [pc, #172]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001e6:	f001 f85f 	bl	80012a8 <HAL_GPIO_WritePin>
 80001ea:	e02e      	b.n	800024a <HAL_voidControlMotors+0xfe>
  }
  else if (Copy_u8direction == RIGHT)
 80001ec:	79bb      	ldrb	r3, [r7, #6]
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	d114      	bne.n	800021c <HAL_voidControlMotors+0xd0>
  {
		/*move the left motors in the forward direction and stop the right motors to make the car turn right*/
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2101      	movs	r1, #1
 80001f6:	4827      	ldr	r0, [pc, #156]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001f8:	f001 f856 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2102      	movs	r1, #2
 8000200:	4824      	ldr	r0, [pc, #144]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000202:	f001 f851 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2104      	movs	r1, #4
 800020a:	4822      	ldr	r0, [pc, #136]	; (8000294 <HAL_voidControlMotors+0x148>)
 800020c:	f001 f84c 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2108      	movs	r1, #8
 8000214:	481f      	ldr	r0, [pc, #124]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000216:	f001 f847 	bl	80012a8 <HAL_GPIO_WritePin>
 800021a:	e016      	b.n	800024a <HAL_voidControlMotors+0xfe>
  }
  else if (Copy_u8direction == LEFT)
 800021c:	79bb      	ldrb	r3, [r7, #6]
 800021e:	2b04      	cmp	r3, #4
 8000220:	d113      	bne.n	800024a <HAL_voidControlMotors+0xfe>
  {		/*move the right motors in the forward direction and stop the left motors to make the car turn left*/
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2101      	movs	r1, #1
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000228:	f001 f83e 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	2102      	movs	r1, #2
 8000230:	4818      	ldr	r0, [pc, #96]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000232:	f001 f839 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2104      	movs	r1, #4
 800023a:	4816      	ldr	r0, [pc, #88]	; (8000294 <HAL_voidControlMotors+0x148>)
 800023c:	f001 f834 	bl	80012a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	2108      	movs	r1, #8
 8000244:	4813      	ldr	r0, [pc, #76]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000246:	f001 f82f 	bl	80012a8 <HAL_GPIO_WritePin>
  }

  // Set the PWM duty cycle for both motors' speed control
  // Calculate duty cycle based on the desired speed
  uint64_t dutyCycle = ((100 - Copy_u8Speed) * htim1.Init.Period) / 100;
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000250:	461a      	mov	r2, r3
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <HAL_voidControlMotors+0x14c>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	fb02 f303 	mul.w	r3, r2, r3
 800025a:	4a10      	ldr	r2, [pc, #64]	; (800029c <HAL_voidControlMotors+0x150>)
 800025c:	fba2 2303 	umull	r2, r3, r2, r3
 8000260:	095b      	lsrs	r3, r3, #5
 8000262:	2200      	movs	r2, #0
 8000264:	461c      	mov	r4, r3
 8000266:	4615      	mov	r5, r2
 8000268:	e9c7 4502 	strd	r4, r5, [r7, #8]

  // Set the duty cycle for TIM_CHANNEL_1 (Motor 1)
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <HAL_voidControlMotors+0x14c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	68ba      	ldr	r2, [r7, #8]
 8000272:	635a      	str	r2, [r3, #52]	; 0x34
  // Start the PWM generation for Motor 1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000274:	2100      	movs	r1, #0
 8000276:	4808      	ldr	r0, [pc, #32]	; (8000298 <HAL_voidControlMotors+0x14c>)
 8000278:	f001 fe80 	bl	8001f7c <HAL_TIM_PWM_Start>

  // Set the duty cycle for TIM_CHANNEL_2 (Motor 2)
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, dutyCycle);
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <HAL_voidControlMotors+0x14c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	68ba      	ldr	r2, [r7, #8]
 8000282:	639a      	str	r2, [r3, #56]	; 0x38
  // Start the PWM generation for Motor 2
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000284:	2104      	movs	r1, #4
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <HAL_voidControlMotors+0x14c>)
 8000288:	f001 fe78 	bl	8001f7c <HAL_TIM_PWM_Start>
}
 800028c:	bf00      	nop
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bdb0      	pop	{r4, r5, r7, pc}
 8000294:	40010800 	.word	0x40010800
 8000298:	20000028 	.word	0x20000028
 800029c:	51eb851f 	.word	0x51eb851f

080002a0 <HAL_voidUltraSonic>:
#include "HAL/Ultrasonic.h"
#include "HAL/DC_MOTOR.h"


void HAL_voidUltraSonic (uint16_t *UltraSonic_Reading)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]


/* TODO  ****************/

}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr

080002b2 <HAL_UltraSonic_Decision>:

uint8_t HAL_UltraSonic_Decision(uint16_t *UltraSonic_Reading)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]

	uint8_t Return_Value = 254 ;
 80002ba:	23fe      	movs	r3, #254	; 0xfe
 80002bc:	73fb      	strb	r3, [r7, #15]

	/* About to Hit */
	if ( (10 <= UltraSonic_Reading[0]) &&  (UltraSonic_Reading[0]<= 20) )
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	2b09      	cmp	r3, #9
 80002c4:	d906      	bls.n	80002d4 <HAL_UltraSonic_Decision+0x22>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	2b14      	cmp	r3, #20
 80002cc:	d802      	bhi.n	80002d4 <HAL_UltraSonic_Decision+0x22>
	{
		Return_Value = STOP ;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
 80002d2:	e009      	b.n	80002e8 <HAL_UltraSonic_Decision+0x36>

	}

	/* Close to Hit */
	else if ((20 < UltraSonic_Reading[0]) &&  (UltraSonic_Reading[0]<= 30) )
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	2b14      	cmp	r3, #20
 80002da:	d905      	bls.n	80002e8 <HAL_UltraSonic_Decision+0x36>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	2b1e      	cmp	r3, #30
 80002e2:	d801      	bhi.n	80002e8 <HAL_UltraSonic_Decision+0x36>
	{
		Return_Value = SPEED_25 ;
 80002e4:	2319      	movs	r3, #25
 80002e6:	73fb      	strb	r3, [r7, #15]

	}



	return Return_Value ;
 80002e8:	7bfb      	ldrb	r3, [r7, #15]

}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f8:	f000 fc30 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fc:	f000 f818 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 f962 	bl	80005c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000304:	f000 f936 	bl	8000574 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000308:	f000 f8de 	bl	80004c8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800030c:	f000 f84a 	bl	80003a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 8000310:	2201      	movs	r2, #1
 8000312:	4904      	ldr	r1, [pc, #16]	; (8000324 <main+0x30>)
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <main+0x34>)
 8000316:	f002 fc71 	bl	8002bfc <HAL_UART_Receive_IT>
  HAL_TIM_OC_MspInit(&htim3) ;
 800031a:	4804      	ldr	r0, [pc, #16]	; (800032c <main+0x38>)
 800031c:	f000 fafa 	bl	8000914 <HAL_TIM_OC_MspInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000320:	e7fe      	b.n	8000320 <main+0x2c>
 8000322:	bf00      	nop
 8000324:	20000100 	.word	0x20000100
 8000328:	200000b8 	.word	0x200000b8
 800032c:	20000070 	.word	0x20000070

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b090      	sub	sp, #64	; 0x40
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0318 	add.w	r3, r7, #24
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f003 f994 	bl	800366c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000352:	2301      	movs	r3, #1
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035c:	2300      	movs	r3, #0
 800035e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f000 ffb7 	bl	80012d8 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000370:	f000 fa7b 	bl	800086a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000378:	2301      	movs	r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f001 fa25 	bl	80017dc <HAL_RCC_ClockConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000398:	f000 fa67 	bl	800086a <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3740      	adds	r7, #64	; 0x40
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b092      	sub	sp, #72	; 0x48
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	615a      	str	r2, [r3, #20]
 80003c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2220      	movs	r2, #32
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 f94c 	bl	800366c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d4:	4b3a      	ldr	r3, [pc, #232]	; (80004c0 <MX_TIM1_Init+0x11c>)
 80003d6:	4a3b      	ldr	r2, [pc, #236]	; (80004c4 <MX_TIM1_Init+0x120>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80003da:	4b39      	ldr	r3, [pc, #228]	; (80004c0 <MX_TIM1_Init+0x11c>)
 80003dc:	2240      	movs	r2, #64	; 0x40
 80003de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b37      	ldr	r3, [pc, #220]	; (80004c0 <MX_TIM1_Init+0x11c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003e6:	4b36      	ldr	r3, [pc, #216]	; (80004c0 <MX_TIM1_Init+0x11c>)
 80003e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b34      	ldr	r3, [pc, #208]	; (80004c0 <MX_TIM1_Init+0x11c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f4:	4b32      	ldr	r3, [pc, #200]	; (80004c0 <MX_TIM1_Init+0x11c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b31      	ldr	r3, [pc, #196]	; (80004c0 <MX_TIM1_Init+0x11c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000400:	482f      	ldr	r0, [pc, #188]	; (80004c0 <MX_TIM1_Init+0x11c>)
 8000402:	f001 fd6b 	bl	8001edc <HAL_TIM_PWM_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800040c:	f000 fa2d 	bl	800086a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000418:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800041c:	4619      	mov	r1, r3
 800041e:	4828      	ldr	r0, [pc, #160]	; (80004c0 <MX_TIM1_Init+0x11c>)
 8000420:	f002 faa6 	bl	8002970 <HAL_TIMEx_MasterConfigSynchronization>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800042a:	f000 fa1e 	bl	800086a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800042e:	2360      	movs	r3, #96	; 0x60
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 8000432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000436:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000438:	2300      	movs	r3, #0
 800043a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800043c:	2300      	movs	r3, #0
 800043e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000444:	2300      	movs	r3, #0
 8000446:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000448:	2300      	movs	r3, #0
 800044a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800044c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	481a      	ldr	r0, [pc, #104]	; (80004c0 <MX_TIM1_Init+0x11c>)
 8000456:	f001 ff97 	bl	8002388 <HAL_TIM_PWM_ConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000460:	f000 fa03 	bl	800086a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800046c:	2204      	movs	r2, #4
 800046e:	4619      	mov	r1, r3
 8000470:	4813      	ldr	r0, [pc, #76]	; (80004c0 <MX_TIM1_Init+0x11c>)
 8000472:	f001 ff89 	bl	8002388 <HAL_TIM_PWM_ConfigChannel>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800047c:	f000 f9f5 	bl	800086a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000498:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4619      	mov	r1, r3
 80004a2:	4807      	ldr	r0, [pc, #28]	; (80004c0 <MX_TIM1_Init+0x11c>)
 80004a4:	f002 fac2 	bl	8002a2c <HAL_TIMEx_ConfigBreakDeadTime>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80004ae:	f000 f9dc 	bl	800086a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004b2:	4803      	ldr	r0, [pc, #12]	; (80004c0 <MX_TIM1_Init+0x11c>)
 80004b4:	f000 fa54 	bl	8000960 <HAL_TIM_MspPostInit>

}
 80004b8:	bf00      	nop
 80004ba:	3748      	adds	r7, #72	; 0x48
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000028 	.word	0x20000028
 80004c4:	40012c00 	.word	0x40012c00

080004c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <MX_TIM3_Init+0xa4>)
 80004ec:	4a20      	ldr	r2, [pc, #128]	; (8000570 <MX_TIM3_Init+0xa8>)
 80004ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_TIM3_Init+0xa4>)
 80004f2:	2220      	movs	r2, #32
 80004f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <MX_TIM3_Init+0xa4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_TIM3_Init+0xa4>)
 80004fe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <MX_TIM3_Init+0xa4>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_TIM3_Init+0xa4>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000510:	4816      	ldr	r0, [pc, #88]	; (800056c <MX_TIM3_Init+0xa4>)
 8000512:	f001 faf1 	bl	8001af8 <HAL_TIM_OC_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800051c:	f000 f9a5 	bl	800086a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000528:	f107 0320 	add.w	r3, r7, #32
 800052c:	4619      	mov	r1, r3
 800052e:	480f      	ldr	r0, [pc, #60]	; (800056c <MX_TIM3_Init+0xa4>)
 8000530:	f002 fa1e 	bl	8002970 <HAL_TIMEx_MasterConfigSynchronization>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800053a:	f000 f996 	bl	800086a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_TIM3_Init+0xa4>)
 8000556:	f001 febb 	bl	80022d0 <HAL_TIM_OC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000560:	f000 f983 	bl	800086a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	; 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000070 	.word	0x20000070
 8000570:	40000400 	.word	0x40000400

08000574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <MX_USART1_UART_Init+0x50>)
 800057c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 8000580:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 80005ac:	f002 faa1 	bl	8002af2 <HAL_UART_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005b6:	f000 f958 	bl	800086a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000b8 	.word	0x200000b8
 80005c4:	40013800 	.word	0x40013800

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <MX_GPIO_Init+0xcc>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <MX_GPIO_Init+0xcc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_GPIO_Init+0xcc>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0310 	and.w	r3, r3, #16
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_GPIO_Init+0xcc>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a26      	ldr	r2, [pc, #152]	; (8000694 <MX_GPIO_Init+0xcc>)
 80005fa:	f043 0320 	orr.w	r3, r3, #32
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_GPIO_Init+0xcc>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_GPIO_Init+0xcc>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <MX_GPIO_Init+0xcc>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_GPIO_Init+0xcc>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_GPIO_Init+0xcc>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <MX_GPIO_Init+0xcc>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_GPIO_Init+0xcc>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <MX_GPIO_Init+0xd0>)
 8000644:	f000 fe30 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	210f      	movs	r1, #15
 800064c:	4813      	ldr	r0, [pc, #76]	; (800069c <MX_GPIO_Init+0xd4>)
 800064e:	f000 fe2b 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <MX_GPIO_Init+0xd0>)
 800066c:	f000 fc98 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000670:	230f      	movs	r3, #15
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_GPIO_Init+0xd4>)
 8000688:	f000 fc8a 	bl	8000fa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	40011000 	.word	0x40011000
 800069c:	40010800 	.word	0x40010800

080006a0 <HAL_UART_RxCpltCallback>:
  * @param Handler
  * @retval None
  */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a3e      	ldr	r2, [pc, #248]	; (80007a8 <HAL_UART_RxCpltCallback+0x108>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d176      	bne.n	80007a0 <HAL_UART_RxCpltCallback+0x100>
  {
    if(rxData == 'S')		//Start System and led on
 80006b2:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b53      	cmp	r3, #83	; 0x53
 80006b8:	d110      	bne.n	80006dc <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_UART_Transmit_IT(&huart1,&rxData,1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	493b      	ldr	r1, [pc, #236]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 80006be:	483c      	ldr	r0, [pc, #240]	; (80007b0 <HAL_UART_RxCpltCallback+0x110>)
 80006c0:	f002 fa67 	bl	8002b92 <HAL_UART_Transmit_IT>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ca:	483a      	ldr	r0, [pc, #232]	; (80007b4 <HAL_UART_RxCpltCallback+0x114>)
 80006cc:	f000 fdec 	bl	80012a8 <HAL_GPIO_WritePin>
    	HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 80006d0:	2201      	movs	r2, #1
 80006d2:	4936      	ldr	r1, [pc, #216]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 80006d4:	4836      	ldr	r0, [pc, #216]	; (80007b0 <HAL_UART_RxCpltCallback+0x110>)
 80006d6:	f002 fa91 	bl	8002bfc <HAL_UART_Receive_IT>
    }



  }
}
 80006da:	e061      	b.n	80007a0 <HAL_UART_RxCpltCallback+0x100>
    else if (rxData=='F')	//Move Forward
 80006dc:	4b33      	ldr	r3, [pc, #204]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b46      	cmp	r3, #70	; 0x46
 80006e2:	d114      	bne.n	800070e <HAL_UART_RxCpltCallback+0x6e>
    	HAL_UART_Transmit_IT(&huart1,&rxData,1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	4931      	ldr	r1, [pc, #196]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 80006e8:	4831      	ldr	r0, [pc, #196]	; (80007b0 <HAL_UART_RxCpltCallback+0x110>)
 80006ea:	f002 fa52 	bl	8002b92 <HAL_UART_Transmit_IT>
    	HAL_TIM_OC_Start_IT(&htim3 , TIM_CHANNEL_1) ;
 80006ee:	2100      	movs	r1, #0
 80006f0:	4831      	ldr	r0, [pc, #196]	; (80007b8 <HAL_UART_RxCpltCallback+0x118>)
 80006f2:	f001 fa51 	bl	8001b98 <HAL_TIM_OC_Start_IT>
    	APP_voidAction (US_Decision,FORWARD) ;
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <HAL_UART_RxCpltCallback+0x11c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f88f 	bl	8000820 <APP_voidAction>
        HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8000702:	2201      	movs	r2, #1
 8000704:	4929      	ldr	r1, [pc, #164]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 8000706:	482a      	ldr	r0, [pc, #168]	; (80007b0 <HAL_UART_RxCpltCallback+0x110>)
 8000708:	f002 fa78 	bl	8002bfc <HAL_UART_Receive_IT>
}
 800070c:	e048      	b.n	80007a0 <HAL_UART_RxCpltCallback+0x100>
    else if (rxData=='B')	//Move Backward
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b42      	cmp	r3, #66	; 0x42
 8000714:	d10f      	bne.n	8000736 <HAL_UART_RxCpltCallback+0x96>
       	HAL_TIM_OC_Start_IT(&htim3 , TIM_CHANNEL_1) ;
 8000716:	2100      	movs	r1, #0
 8000718:	4827      	ldr	r0, [pc, #156]	; (80007b8 <HAL_UART_RxCpltCallback+0x118>)
 800071a:	f001 fa3d 	bl	8001b98 <HAL_TIM_OC_Start_IT>
    	APP_voidAction (US_Decision,BACKWARD) ;
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <HAL_UART_RxCpltCallback+0x11c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f87b 	bl	8000820 <APP_voidAction>
        HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 800072a:	2201      	movs	r2, #1
 800072c:	491f      	ldr	r1, [pc, #124]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 800072e:	4820      	ldr	r0, [pc, #128]	; (80007b0 <HAL_UART_RxCpltCallback+0x110>)
 8000730:	f002 fa64 	bl	8002bfc <HAL_UART_Receive_IT>
}
 8000734:	e034      	b.n	80007a0 <HAL_UART_RxCpltCallback+0x100>
    else if (rxData=='R')	//Move Right
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b52      	cmp	r3, #82	; 0x52
 800073c:	d10f      	bne.n	800075e <HAL_UART_RxCpltCallback+0xbe>
       	HAL_TIM_OC_Start_IT(&htim3 , TIM_CHANNEL_1) ;
 800073e:	2100      	movs	r1, #0
 8000740:	481d      	ldr	r0, [pc, #116]	; (80007b8 <HAL_UART_RxCpltCallback+0x118>)
 8000742:	f001 fa29 	bl	8001b98 <HAL_TIM_OC_Start_IT>
    	APP_voidAction (US_Decision,RIGHT) ;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <HAL_UART_RxCpltCallback+0x11c>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2103      	movs	r1, #3
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f867 	bl	8000820 <APP_voidAction>
        HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8000752:	2201      	movs	r2, #1
 8000754:	4915      	ldr	r1, [pc, #84]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 8000756:	4816      	ldr	r0, [pc, #88]	; (80007b0 <HAL_UART_RxCpltCallback+0x110>)
 8000758:	f002 fa50 	bl	8002bfc <HAL_UART_Receive_IT>
}
 800075c:	e020      	b.n	80007a0 <HAL_UART_RxCpltCallback+0x100>
    else if (rxData=='L')	//Move Left
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b4c      	cmp	r3, #76	; 0x4c
 8000764:	d10f      	bne.n	8000786 <HAL_UART_RxCpltCallback+0xe6>
      	HAL_TIM_OC_Start_IT(&htim3 , TIM_CHANNEL_1) ;
 8000766:	2100      	movs	r1, #0
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <HAL_UART_RxCpltCallback+0x118>)
 800076a:	f001 fa15 	bl	8001b98 <HAL_TIM_OC_Start_IT>
    	APP_voidAction (US_Decision,LEFT) ;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_UART_RxCpltCallback+0x11c>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2104      	movs	r1, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f853 	bl	8000820 <APP_voidAction>
        HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 800077a:	2201      	movs	r2, #1
 800077c:	490b      	ldr	r1, [pc, #44]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 800077e:	480c      	ldr	r0, [pc, #48]	; (80007b0 <HAL_UART_RxCpltCallback+0x110>)
 8000780:	f002 fa3c 	bl	8002bfc <HAL_UART_Receive_IT>
}
 8000784:	e00c      	b.n	80007a0 <HAL_UART_RxCpltCallback+0x100>
    else if (rxData=='P')	//Pause Moving
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b50      	cmp	r3, #80	; 0x50
 800078c:	d108      	bne.n	80007a0 <HAL_UART_RxCpltCallback+0x100>
    	HAL_voidControlMotors(SPEED_0 , STOP ) ;
 800078e:	2100      	movs	r1, #0
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff fcdb 	bl	800014c <HAL_voidControlMotors>
        HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8000796:	2201      	movs	r2, #1
 8000798:	4904      	ldr	r1, [pc, #16]	; (80007ac <HAL_UART_RxCpltCallback+0x10c>)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <HAL_UART_RxCpltCallback+0x110>)
 800079c:	f002 fa2e 	bl	8002bfc <HAL_UART_Receive_IT>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40013800 	.word	0x40013800
 80007ac:	20000100 	.word	0x20000100
 80007b0:	200000b8 	.word	0x200000b8
 80007b4:	40011000 	.word	0x40011000
 80007b8:	20000070 	.word	0x20000070
 80007bc:	2000010c 	.word	0x2000010c

080007c0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	Counter ++ ;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80007d2:	701a      	strb	r2, [r3, #0]

    /* Reading of all UltraSonic */
    HAL_voidUltraSonic(US_ARR) ;
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 80007d6:	f7ff fd63 	bl	80002a0 <HAL_voidUltraSonic>

    /* Decision  */
    US_Decision = HAL_UltraSonic_Decision(US_ARR) ;
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 80007dc:	f7ff fd69 	bl	80002b2 <HAL_UltraSonic_Decision>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80007e6:	701a      	strb	r2, [r3, #0]

	/* Delay 2 Second */
	if (Counter == 10 )
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b0a      	cmp	r3, #10
 80007ee:	d10a      	bne.n	8000806 <HAL_TIM_OC_DelayElapsedCallback+0x46>
	  {
		Counter = 0 ;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
		HAL_voidControlMotors(SPEED_0 , STOP ) 	  ;
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff fca7 	bl	800014c <HAL_voidControlMotors>
		HAL_TIM_OC_Stop_IT (&htim3,TIM_CHANNEL_1) ;
 80007fe:	2100      	movs	r1, #0
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000802:	f001 fab9 	bl	8001d78 <HAL_TIM_OC_Stop_IT>

	  }

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000101 	.word	0x20000101
 8000814:	20000104 	.word	0x20000104
 8000818:	2000010c 	.word	0x2000010c
 800081c:	20000070 	.word	0x20000070

08000820 <APP_voidAction>:
void APP_voidAction (uint8_t Copy_u8Action , uint8_t Copy_u8Direction)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
	/* NO Obstacle is Close */
	if (Copy_u8Action == 254)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2bfe      	cmp	r3, #254	; 0xfe
 8000834:	d105      	bne.n	8000842 <APP_voidAction+0x22>
	{
		HAL_voidControlMotors(SPEED_50,Copy_u8Direction) ;
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	4619      	mov	r1, r3
 800083a:	2032      	movs	r0, #50	; 0x32
 800083c:	f7ff fc86 	bl	800014c <HAL_voidControlMotors>
	else if (Copy_u8Action == SPEED_25)
	{
		HAL_voidControlMotors(SPEED_25,Copy_u8Direction) ;
	}

}
 8000840:	e00f      	b.n	8000862 <APP_voidAction+0x42>
	else if (Copy_u8Action == STOP)
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d104      	bne.n	8000852 <APP_voidAction+0x32>
		HAL_voidControlMotors(SPEED_0,STOP) ;
 8000848:	2100      	movs	r1, #0
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff fc7e 	bl	800014c <HAL_voidControlMotors>
}
 8000850:	e007      	b.n	8000862 <APP_voidAction+0x42>
	else if (Copy_u8Action == SPEED_25)
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b19      	cmp	r3, #25
 8000856:	d104      	bne.n	8000862 <APP_voidAction+0x42>
		HAL_voidControlMotors(SPEED_25,Copy_u8Direction) ;
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	4619      	mov	r1, r3
 800085c:	2019      	movs	r0, #25
 800085e:	f7ff fc75 	bl	800014c <HAL_voidControlMotors>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086e:	b672      	cpsid	i
}
 8000870:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000872:	e7fe      	b.n	8000872 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_MspInit+0x5c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <HAL_MspInit+0x5c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_MspInit+0x5c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x5c>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x5c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x5c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_MspInit+0x60>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_MspInit+0x60>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010000 	.word	0x40010000

080008d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a09      	ldr	r2, [pc, #36]	; (800090c <HAL_TIM_PWM_MspInit+0x34>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d10b      	bne.n	8000902 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_TIM_PWM_MspInit+0x38>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_TIM_PWM_MspInit+0x38>)
 80008f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_TIM_PWM_MspInit+0x38>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	40012c00 	.word	0x40012c00
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <HAL_TIM_OC_MspInit+0x44>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d113      	bne.n	800094e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_TIM_OC_MspInit+0x48>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <HAL_TIM_OC_MspInit+0x48>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_TIM_OC_MspInit+0x48>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	201d      	movs	r0, #29
 8000944:	f000 fa43 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000948:	201d      	movs	r0, #29
 800094a:	f000 fa5c 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40000400 	.word	0x40000400
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_TIM_MspPostInit+0x5c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d118      	bne.n	80009b2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_TIM_MspPostInit+0x60>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_TIM_MspPostInit+0x60>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_TIM_MspPostInit+0x60>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000998:	f44f 7340 	mov.w	r3, #768	; 0x300
 800099c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_TIM_MspPostInit+0x64>)
 80009ae:	f000 faf7 	bl	8000fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40012c00 	.word	0x40012c00
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010800 	.word	0x40010800

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a26      	ldr	r2, [pc, #152]	; (8000a7c <HAL_UART_MspInit+0xb4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d145      	bne.n	8000a74 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <HAL_UART_MspInit+0xb8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <HAL_UART_MspInit+0xb8>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <HAL_UART_MspInit+0xb8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_UART_MspInit+0xb8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <HAL_UART_MspInit+0xb8>)
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_UART_MspInit+0xb8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4816      	ldr	r0, [pc, #88]	; (8000a84 <HAL_UART_MspInit+0xbc>)
 8000a2c:	f000 fab8 	bl	8000fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4810      	ldr	r0, [pc, #64]	; (8000a84 <HAL_UART_MspInit+0xbc>)
 8000a44:	f000 faac 	bl	8000fa0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_UART_MspInit+0xc0>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_UART_MspInit+0xc0>)
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2025      	movs	r0, #37	; 0x25
 8000a6a:	f000 f9b0 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a6e:	2025      	movs	r0, #37	; 0x25
 8000a70:	f000 f9c9 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40013800 	.word	0x40013800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010c00 	.word	0x40010c00
 8000a88:	40010000 	.word	0x40010000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad2:	f000 f889 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM3_IRQHandler+0x10>)
 8000ae2:	f001 faed 	bl	80020c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000070 	.word	0x20000070

08000af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART1_IRQHandler+0x10>)
 8000af6:	f002 f8a7 	bl	8002c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000b8 	.word	0x200000b8

08000b04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b10:	f7ff fff8 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b16:	490c      	ldr	r1, [pc, #48]	; (8000b48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b18:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b2c:	4c09      	ldr	r4, [pc, #36]	; (8000b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f002 fd9f 	bl	800367c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3e:	f7ff fbd9 	bl	80002f4 <main>
  bx lr
 8000b42:	4770      	bx	lr
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b4c:	08003710 	.word	0x08003710
  ldr r2, =_sbss
 8000b50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b54:	20000114 	.word	0x20000114

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x28>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x28>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f923 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff fe7c 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f93b 	bl	8000e22 <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f903 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x1c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x20>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <HAL_IncTick+0x20>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000110 	.word	0x20000110

08000c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b02      	ldr	r3, [pc, #8]	; (8000c1c <HAL_GetTick+0x10>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	20000110 	.word	0x20000110

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4906      	ldr	r1, [pc, #24]	; (8000cb8 <__NVIC_EnableIRQ+0x34>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff90 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff2d 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff42 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff90 	bl	8000d10 <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5f 	bl	8000cbc <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff35 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b085      	sub	sp, #20
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d008      	beq.n	8000e64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2204      	movs	r2, #4
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e020      	b.n	8000ea6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 020e 	bic.w	r2, r2, #14
 8000e72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d005      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2204      	movs	r2, #4
 8000ecc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e051      	b.n	8000f78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 020e 	bic.w	r2, r2, #14
 8000ee2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_DMA_Abort_IT+0xd4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d029      	beq.n	8000f52 <HAL_DMA_Abort_IT+0xa2>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <HAL_DMA_Abort_IT+0xd8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d022      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x9e>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_DMA_Abort_IT+0xdc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01a      	beq.n	8000f48 <HAL_DMA_Abort_IT+0x98>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1e      	ldr	r2, [pc, #120]	; (8000f90 <HAL_DMA_Abort_IT+0xe0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d012      	beq.n	8000f42 <HAL_DMA_Abort_IT+0x92>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <HAL_DMA_Abort_IT+0xe4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00a      	beq.n	8000f3c <HAL_DMA_Abort_IT+0x8c>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <HAL_DMA_Abort_IT+0xe8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d102      	bne.n	8000f36 <HAL_DMA_Abort_IT+0x86>
 8000f30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f34:	e00e      	b.n	8000f54 <HAL_DMA_Abort_IT+0xa4>
 8000f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f3a:	e00b      	b.n	8000f54 <HAL_DMA_Abort_IT+0xa4>
 8000f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f40:	e008      	b.n	8000f54 <HAL_DMA_Abort_IT+0xa4>
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	e005      	b.n	8000f54 <HAL_DMA_Abort_IT+0xa4>
 8000f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4c:	e002      	b.n	8000f54 <HAL_DMA_Abort_IT+0xa4>
 8000f4e:	2310      	movs	r3, #16
 8000f50:	e000      	b.n	8000f54 <HAL_DMA_Abort_IT+0xa4>
 8000f52:	2301      	movs	r3, #1
 8000f54:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <HAL_DMA_Abort_IT+0xec>)
 8000f56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	4798      	blx	r3
    } 
  }
  return status;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40020008 	.word	0x40020008
 8000f88:	4002001c 	.word	0x4002001c
 8000f8c:	40020030 	.word	0x40020030
 8000f90:	40020044 	.word	0x40020044
 8000f94:	40020058 	.word	0x40020058
 8000f98:	4002006c 	.word	0x4002006c
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b08b      	sub	sp, #44	; 0x2c
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb2:	e169      	b.n	8001288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 8158 	bne.w	8001282 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4a9a      	ldr	r2, [pc, #616]	; (8001240 <HAL_GPIO_Init+0x2a0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d05e      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8000fdc:	4a98      	ldr	r2, [pc, #608]	; (8001240 <HAL_GPIO_Init+0x2a0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d875      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8000fe2:	4a98      	ldr	r2, [pc, #608]	; (8001244 <HAL_GPIO_Init+0x2a4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d058      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8000fe8:	4a96      	ldr	r2, [pc, #600]	; (8001244 <HAL_GPIO_Init+0x2a4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d86f      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8000fee:	4a96      	ldr	r2, [pc, #600]	; (8001248 <HAL_GPIO_Init+0x2a8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d052      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8000ff4:	4a94      	ldr	r2, [pc, #592]	; (8001248 <HAL_GPIO_Init+0x2a8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d869      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8000ffa:	4a94      	ldr	r2, [pc, #592]	; (800124c <HAL_GPIO_Init+0x2ac>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d04c      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8001000:	4a92      	ldr	r2, [pc, #584]	; (800124c <HAL_GPIO_Init+0x2ac>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d863      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8001006:	4a92      	ldr	r2, [pc, #584]	; (8001250 <HAL_GPIO_Init+0x2b0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d046      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 800100c:	4a90      	ldr	r2, [pc, #576]	; (8001250 <HAL_GPIO_Init+0x2b0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d85d      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8001012:	2b12      	cmp	r3, #18
 8001014:	d82a      	bhi.n	800106c <HAL_GPIO_Init+0xcc>
 8001016:	2b12      	cmp	r3, #18
 8001018:	d859      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 800101a:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <HAL_GPIO_Init+0x80>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	0800109b 	.word	0x0800109b
 8001024:	08001075 	.word	0x08001075
 8001028:	08001087 	.word	0x08001087
 800102c:	080010c9 	.word	0x080010c9
 8001030:	080010cf 	.word	0x080010cf
 8001034:	080010cf 	.word	0x080010cf
 8001038:	080010cf 	.word	0x080010cf
 800103c:	080010cf 	.word	0x080010cf
 8001040:	080010cf 	.word	0x080010cf
 8001044:	080010cf 	.word	0x080010cf
 8001048:	080010cf 	.word	0x080010cf
 800104c:	080010cf 	.word	0x080010cf
 8001050:	080010cf 	.word	0x080010cf
 8001054:	080010cf 	.word	0x080010cf
 8001058:	080010cf 	.word	0x080010cf
 800105c:	080010cf 	.word	0x080010cf
 8001060:	080010cf 	.word	0x080010cf
 8001064:	0800107d 	.word	0x0800107d
 8001068:	08001091 	.word	0x08001091
 800106c:	4a79      	ldr	r2, [pc, #484]	; (8001254 <HAL_GPIO_Init+0x2b4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001072:	e02c      	b.n	80010ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e029      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	3304      	adds	r3, #4
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e024      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	3308      	adds	r3, #8
 800108c:	623b      	str	r3, [r7, #32]
          break;
 800108e:	e01f      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	330c      	adds	r3, #12
 8001096:	623b      	str	r3, [r7, #32]
          break;
 8001098:	e01a      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010a2:	2304      	movs	r3, #4
 80010a4:	623b      	str	r3, [r7, #32]
          break;
 80010a6:	e013      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d105      	bne.n	80010bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b0:	2308      	movs	r3, #8
 80010b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	611a      	str	r2, [r3, #16]
          break;
 80010ba:	e009      	b.n	80010d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010bc:	2308      	movs	r3, #8
 80010be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	615a      	str	r2, [r3, #20]
          break;
 80010c6:	e003      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
          break;
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          break;
 80010ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2bff      	cmp	r3, #255	; 0xff
 80010d4:	d801      	bhi.n	80010da <HAL_GPIO_Init+0x13a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	e001      	b.n	80010de <HAL_GPIO_Init+0x13e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3304      	adds	r3, #4
 80010de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d802      	bhi.n	80010ec <HAL_GPIO_Init+0x14c>
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x152>
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	3b08      	subs	r3, #8
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	210f      	movs	r1, #15
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	6a39      	ldr	r1, [r7, #32]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80b1 	beq.w	8001282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001120:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a4c      	ldr	r2, [pc, #304]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001138:	4a48      	ldr	r2, [pc, #288]	; (800125c <HAL_GPIO_Init+0x2bc>)
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a40      	ldr	r2, [pc, #256]	; (8001260 <HAL_GPIO_Init+0x2c0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d013      	beq.n	800118c <HAL_GPIO_Init+0x1ec>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <HAL_GPIO_Init+0x2c4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00d      	beq.n	8001188 <HAL_GPIO_Init+0x1e8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a3e      	ldr	r2, [pc, #248]	; (8001268 <HAL_GPIO_Init+0x2c8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d007      	beq.n	8001184 <HAL_GPIO_Init+0x1e4>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_GPIO_Init+0x2cc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_GPIO_Init+0x1e0>
 800117c:	2303      	movs	r3, #3
 800117e:	e006      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 8001180:	2304      	movs	r3, #4
 8001182:	e004      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 800118c:	2300      	movs	r3, #0
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4093      	lsls	r3, r2
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800119e:	492f      	ldr	r1, [pc, #188]	; (800125c <HAL_GPIO_Init+0x2bc>)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	492c      	ldr	r1, [pc, #176]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	608b      	str	r3, [r1, #8]
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4928      	ldr	r1, [pc, #160]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	4922      	ldr	r1, [pc, #136]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60cb      	str	r3, [r1, #12]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	491e      	ldr	r1, [pc, #120]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4918      	ldr	r1, [pc, #96]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	43db      	mvns	r3, r3
 800121e:	4914      	ldr	r1, [pc, #80]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001220:	4013      	ands	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d021      	beq.n	8001274 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	600b      	str	r3, [r1, #0]
 800123c:	e021      	b.n	8001282 <HAL_GPIO_Init+0x2e2>
 800123e:	bf00      	nop
 8001240:	10320000 	.word	0x10320000
 8001244:	10310000 	.word	0x10310000
 8001248:	10220000 	.word	0x10220000
 800124c:	10210000 	.word	0x10210000
 8001250:	10120000 	.word	0x10120000
 8001254:	10110000 	.word	0x10110000
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00
 8001268:	40011000 	.word	0x40011000
 800126c:	40011400 	.word	0x40011400
 8001270:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_GPIO_Init+0x304>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	43db      	mvns	r3, r3
 800127c:	4909      	ldr	r1, [pc, #36]	; (80012a4 <HAL_GPIO_Init+0x304>)
 800127e:	4013      	ands	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	3301      	adds	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	f47f ae8e 	bne.w	8000fb4 <HAL_GPIO_Init+0x14>
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	372c      	adds	r7, #44	; 0x2c
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012c4:	e003      	b.n	80012ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	611a      	str	r2, [r3, #16]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e272      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8087 	beq.w	8001406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f8:	4b92      	ldr	r3, [pc, #584]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b04      	cmp	r3, #4
 8001302:	d00c      	beq.n	800131e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001304:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d112      	bne.n	8001336 <HAL_RCC_OscConfig+0x5e>
 8001310:	4b8c      	ldr	r3, [pc, #560]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d10b      	bne.n	8001336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131e:	4b89      	ldr	r3, [pc, #548]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d06c      	beq.n	8001404 <HAL_RCC_OscConfig+0x12c>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d168      	bne.n	8001404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e24c      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x76>
 8001340:	4b80      	ldr	r3, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a7f      	ldr	r2, [pc, #508]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e02e      	b.n	80013ac <HAL_RCC_OscConfig+0xd4>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x98>
 8001356:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7a      	ldr	r2, [pc, #488]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800135c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b78      	ldr	r3, [pc, #480]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a77      	ldr	r2, [pc, #476]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e01d      	b.n	80013ac <HAL_RCC_OscConfig+0xd4>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0xbc>
 800137a:	4b72      	ldr	r3, [pc, #456]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a71      	ldr	r2, [pc, #452]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b6f      	ldr	r3, [pc, #444]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a6e      	ldr	r2, [pc, #440]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0xd4>
 8001394:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6a      	ldr	r2, [pc, #424]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800139a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b68      	ldr	r3, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a67      	ldr	r2, [pc, #412]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc2a 	bl	8000c0c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fc26 	bl	8000c0c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e200      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0xe4>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc16 	bl	8000c0c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fc12 	bl	8000c0c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1ec      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x10c>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d063      	beq.n	80014da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001412:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800141e:	4b49      	ldr	r3, [pc, #292]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b08      	cmp	r3, #8
 8001428:	d11c      	bne.n	8001464 <HAL_RCC_OscConfig+0x18c>
 800142a:	4b46      	ldr	r3, [pc, #280]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d116      	bne.n	8001464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x176>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e1c0      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4939      	ldr	r1, [pc, #228]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	e03a      	b.n	80014da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fbcb 	bl	8000c0c <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fbc7 	bl	8000c0c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e1a1      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4927      	ldr	r1, [pc, #156]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
 80014ac:	e015      	b.n	80014da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fbaa 	bl	8000c0c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fba6 	bl	8000c0c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e180      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d03a      	beq.n	800155c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d019      	beq.n	8001522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_RCC_OscConfig+0x274>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fb8a 	bl	8000c0c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fb86 	bl	8000c0c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e160      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800151a:	2001      	movs	r0, #1
 800151c:	f000 face 	bl	8001abc <RCC_Delay>
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_RCC_OscConfig+0x274>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fb70 	bl	8000c0c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152e:	e00f      	b.n	8001550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff fb6c 	bl	8000c0c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d908      	bls.n	8001550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e146      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	42420000 	.word	0x42420000
 800154c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001550:	4b92      	ldr	r3, [pc, #584]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e9      	bne.n	8001530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80a6 	beq.w	80016b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156e:	4b8b      	ldr	r3, [pc, #556]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10d      	bne.n	8001596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b88      	ldr	r3, [pc, #544]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a87      	ldr	r2, [pc, #540]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b85      	ldr	r3, [pc, #532]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001592:	2301      	movs	r3, #1
 8001594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	4b82      	ldr	r3, [pc, #520]	; (80017a0 <HAL_RCC_OscConfig+0x4c8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d118      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a2:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <HAL_RCC_OscConfig+0x4c8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a7e      	ldr	r2, [pc, #504]	; (80017a0 <HAL_RCC_OscConfig+0x4c8>)
 80015a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fb2d 	bl	8000c0c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b6:	f7ff fb29 	bl	8000c0c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b64      	cmp	r3, #100	; 0x64
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e103      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <HAL_RCC_OscConfig+0x4c8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x312>
 80015dc:	4b6f      	ldr	r3, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a6e      	ldr	r2, [pc, #440]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	e02d      	b.n	8001646 <HAL_RCC_OscConfig+0x36e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x334>
 80015f2:	4b6a      	ldr	r3, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a69      	ldr	r2, [pc, #420]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6213      	str	r3, [r2, #32]
 80015fe:	4b67      	ldr	r3, [pc, #412]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a66      	ldr	r2, [pc, #408]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	e01c      	b.n	8001646 <HAL_RCC_OscConfig+0x36e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d10c      	bne.n	800162e <HAL_RCC_OscConfig+0x356>
 8001614:	4b61      	ldr	r3, [pc, #388]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a60      	ldr	r2, [pc, #384]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	4b5e      	ldr	r3, [pc, #376]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a5d      	ldr	r2, [pc, #372]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	e00b      	b.n	8001646 <HAL_RCC_OscConfig+0x36e>
 800162e:	4b5b      	ldr	r3, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a5a      	ldr	r2, [pc, #360]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a57      	ldr	r2, [pc, #348]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d015      	beq.n	800167a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fadd 	bl	8000c0c <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001654:	e00a      	b.n	800166c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff fad9 	bl	8000c0c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	; 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e0b1      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166c:	4b4b      	ldr	r3, [pc, #300]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ee      	beq.n	8001656 <HAL_RCC_OscConfig+0x37e>
 8001678:	e014      	b.n	80016a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167a:	f7ff fac7 	bl	8000c0c <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fac3 	bl	8000c0c <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e09b      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001698:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ee      	bne.n	8001682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d105      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016aa:	4b3c      	ldr	r3, [pc, #240]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a3b      	ldr	r2, [pc, #236]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8087 	beq.w	80017ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c0:	4b36      	ldr	r3, [pc, #216]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d061      	beq.n	8001790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d146      	bne.n	8001762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_RCC_OscConfig+0x4cc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fa97 	bl	8000c0c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff fa93 	bl	8000c0c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e06d      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001708:	d108      	bne.n	800171c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	4921      	ldr	r1, [pc, #132]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a19      	ldr	r1, [r3, #32]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	430b      	orrs	r3, r1
 800172e:	491b      	ldr	r1, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x4cc>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fa67 	bl	8000c0c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff fa63 	bl	8000c0c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e03d      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x46a>
 8001760:	e035      	b.n	80017ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_RCC_OscConfig+0x4cc>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fa50 	bl	8000c0c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fa4c 	bl	8000c0c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e026      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x498>
 800178e:	e01e      	b.n	80017ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e019      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
 800179c:	40021000 	.word	0x40021000
 80017a0:	40007000 	.word	0x40007000
 80017a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_RCC_OscConfig+0x500>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0d0      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d910      	bls.n	8001820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 0207 	bic.w	r2, r3, #7
 8001806:	4965      	ldr	r1, [pc, #404]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0b8      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800185a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	494d      	ldr	r1, [pc, #308]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d040      	beq.n	80018fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d115      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e07f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e073      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06b      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f023 0203 	bic.w	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4936      	ldr	r1, [pc, #216]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018cc:	f7ff f99e 	bl	8000c0c <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d4:	f7ff f99a 	bl	8000c0c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e053      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 020c 	and.w	r2, r3, #12
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1eb      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d210      	bcs.n	800192c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 0207 	bic.w	r2, r3, #7
 8001912:	4922      	ldr	r1, [pc, #136]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e032      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4916      	ldr	r1, [pc, #88]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	490e      	ldr	r1, [pc, #56]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196a:	f000 f821 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	490a      	ldr	r1, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1d0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f8fc 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	080036dc 	.word	0x080036dc
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x94>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x30>
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x36>
 80019de:	e027      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x98>)
 80019e2:	613b      	str	r3, [r7, #16]
      break;
 80019e4:	e027      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	0c9b      	lsrs	r3, r3, #18
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d010      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	0c5b      	lsrs	r3, r3, #17
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a12:	fb03 f202 	mul.w	r2, r3, r2
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e004      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	613b      	str	r3, [r7, #16]
      break;
 8001a2e:	e002      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a32:	613b      	str	r3, [r7, #16]
      break;
 8001a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a36:	693b      	ldr	r3, [r7, #16]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	007a1200 	.word	0x007a1200
 8001a4c:	080036f4 	.word	0x080036f4
 8001a50:	08003704 	.word	0x08003704
 8001a54:	003d0900 	.word	0x003d0900

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b02      	ldr	r3, [pc, #8]	; (8001a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000000 	.word	0x20000000

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a70:	f7ff fff2 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4903      	ldr	r1, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	080036ec 	.word	0x080036ec

08001a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a98:	f7ff ffde 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	0adb      	lsrs	r3, r3, #11
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	080036ec 	.word	0x080036ec

08001abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <RCC_Delay+0x34>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <RCC_Delay+0x38>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0a5b      	lsrs	r3, r3, #9
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad8:	bf00      	nop
  }
  while (Delay --);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	60fa      	str	r2, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f9      	bne.n	8001ad8 <RCC_Delay+0x1c>
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000000 	.word	0x20000000
 8001af4:	10624dd3 	.word	0x10624dd3

08001af8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e041      	b.n	8001b8e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fef8 	bl	8000914 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3304      	adds	r3, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f000 fd0c 	bl	8002554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_TIM_OC_Start_IT+0x28>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	bf14      	ite	ne
 8001bb8:	2301      	movne	r3, #1
 8001bba:	2300      	moveq	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e022      	b.n	8001c06 <HAL_TIM_OC_Start_IT+0x6e>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d109      	bne.n	8001bda <HAL_TIM_OC_Start_IT+0x42>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	e015      	b.n	8001c06 <HAL_TIM_OC_Start_IT+0x6e>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d109      	bne.n	8001bf4 <HAL_TIM_OC_Start_IT+0x5c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e008      	b.n	8001c06 <HAL_TIM_OC_Start_IT+0x6e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0a9      	b.n	8001d62 <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d104      	bne.n	8001c1e <HAL_TIM_OC_Start_IT+0x86>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c1c:	e013      	b.n	8001c46 <HAL_TIM_OC_Start_IT+0xae>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d104      	bne.n	8001c2e <HAL_TIM_OC_Start_IT+0x96>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c2c:	e00b      	b.n	8001c46 <HAL_TIM_OC_Start_IT+0xae>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d104      	bne.n	8001c3e <HAL_TIM_OC_Start_IT+0xa6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c3c:	e003      	b.n	8001c46 <HAL_TIM_OC_Start_IT+0xae>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d841      	bhi.n	8001cd0 <HAL_TIM_OC_Start_IT+0x138>
 8001c4c:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <HAL_TIM_OC_Start_IT+0xbc>)
 8001c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c52:	bf00      	nop
 8001c54:	08001c89 	.word	0x08001c89
 8001c58:	08001cd1 	.word	0x08001cd1
 8001c5c:	08001cd1 	.word	0x08001cd1
 8001c60:	08001cd1 	.word	0x08001cd1
 8001c64:	08001c9b 	.word	0x08001c9b
 8001c68:	08001cd1 	.word	0x08001cd1
 8001c6c:	08001cd1 	.word	0x08001cd1
 8001c70:	08001cd1 	.word	0x08001cd1
 8001c74:	08001cad 	.word	0x08001cad
 8001c78:	08001cd1 	.word	0x08001cd1
 8001c7c:	08001cd1 	.word	0x08001cd1
 8001c80:	08001cd1 	.word	0x08001cd1
 8001c84:	08001cbf 	.word	0x08001cbf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0202 	orr.w	r2, r2, #2
 8001c96:	60da      	str	r2, [r3, #12]
      break;
 8001c98:	e01d      	b.n	8001cd6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0204 	orr.w	r2, r2, #4
 8001ca8:	60da      	str	r2, [r3, #12]
      break;
 8001caa:	e014      	b.n	8001cd6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0208 	orr.w	r2, r2, #8
 8001cba:	60da      	str	r2, [r3, #12]
      break;
 8001cbc:	e00b      	b.n	8001cd6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0210 	orr.w	r2, r2, #16
 8001ccc:	60da      	str	r2, [r3, #12]
      break;
 8001cce:	e002      	b.n	8001cd6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d141      	bne.n	8001d60 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fe1f 	bl	8002928 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_TIM_OC_Start_IT+0x1d4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d107      	bne.n	8001d04 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_TIM_OC_Start_IT+0x1d4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00e      	beq.n	8001d2c <HAL_TIM_OC_Start_IT+0x194>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d16:	d009      	beq.n	8001d2c <HAL_TIM_OC_Start_IT+0x194>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_TIM_OC_Start_IT+0x1d8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_TIM_OC_Start_IT+0x194>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_TIM_OC_Start_IT+0x1dc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d111      	bne.n	8001d50 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d010      	beq.n	8001d60 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4e:	e007      	b.n	8001d60 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40000800 	.word	0x40000800

08001d78 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d841      	bhi.n	8001e10 <HAL_TIM_OC_Stop_IT+0x98>
 8001d8c:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <HAL_TIM_OC_Stop_IT+0x1c>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001dc9 	.word	0x08001dc9
 8001d98:	08001e11 	.word	0x08001e11
 8001d9c:	08001e11 	.word	0x08001e11
 8001da0:	08001e11 	.word	0x08001e11
 8001da4:	08001ddb 	.word	0x08001ddb
 8001da8:	08001e11 	.word	0x08001e11
 8001dac:	08001e11 	.word	0x08001e11
 8001db0:	08001e11 	.word	0x08001e11
 8001db4:	08001ded 	.word	0x08001ded
 8001db8:	08001e11 	.word	0x08001e11
 8001dbc:	08001e11 	.word	0x08001e11
 8001dc0:	08001e11 	.word	0x08001e11
 8001dc4:	08001dff 	.word	0x08001dff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0202 	bic.w	r2, r2, #2
 8001dd6:	60da      	str	r2, [r3, #12]
      break;
 8001dd8:	e01d      	b.n	8001e16 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0204 	bic.w	r2, r2, #4
 8001de8:	60da      	str	r2, [r3, #12]
      break;
 8001dea:	e014      	b.n	8001e16 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0208 	bic.w	r2, r2, #8
 8001dfa:	60da      	str	r2, [r3, #12]
      break;
 8001dfc:	e00b      	b.n	8001e16 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0210 	bic.w	r2, r2, #16
 8001e0c:	60da      	str	r2, [r3, #12]
      break;
 8001e0e:	e002      	b.n	8001e16 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
      break;
 8001e14:	bf00      	nop
  }

  if (status == HAL_OK)
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d157      	bne.n	8001ecc <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fd7f 	bl	8002928 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_TIM_OC_Stop_IT+0x160>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d117      	bne.n	8001e64 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6a1a      	ldr	r2, [r3, #32]
 8001e3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10f      	bne.n	8001e64 <HAL_TIM_OC_Stop_IT+0xec>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a1a      	ldr	r2, [r3, #32]
 8001e4a:	f240 4344 	movw	r3, #1092	; 0x444
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_OC_Stop_IT+0xec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a1a      	ldr	r2, [r3, #32]
 8001e6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10f      	bne.n	8001e94 <HAL_TIM_OC_Stop_IT+0x11c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a1a      	ldr	r2, [r3, #32]
 8001e7a:	f240 4344 	movw	r3, #1092	; 0x444
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_TIM_OC_Stop_IT+0x11c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <HAL_TIM_OC_Stop_IT+0x12c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea2:	e013      	b.n	8001ecc <HAL_TIM_OC_Stop_IT+0x154>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d104      	bne.n	8001eb4 <HAL_TIM_OC_Stop_IT+0x13c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eb2:	e00b      	b.n	8001ecc <HAL_TIM_OC_Stop_IT+0x154>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d104      	bne.n	8001ec4 <HAL_TIM_OC_Stop_IT+0x14c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ec2:	e003      	b.n	8001ecc <HAL_TIM_OC_Stop_IT+0x154>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40012c00 	.word	0x40012c00

08001edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e041      	b.n	8001f72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fce8 	bl	80008d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3304      	adds	r3, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f000 fb1a 	bl	8002554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_TIM_PWM_Start+0x24>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e022      	b.n	8001fe6 <HAL_TIM_PWM_Start+0x6a>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d109      	bne.n	8001fba <HAL_TIM_PWM_Start+0x3e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	e015      	b.n	8001fe6 <HAL_TIM_PWM_Start+0x6a>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d109      	bne.n	8001fd4 <HAL_TIM_PWM_Start+0x58>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e008      	b.n	8001fe6 <HAL_TIM_PWM_Start+0x6a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	bf14      	ite	ne
 8001fe0:	2301      	movne	r3, #1
 8001fe2:	2300      	moveq	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e05e      	b.n	80020ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d104      	bne.n	8001ffe <HAL_TIM_PWM_Start+0x82>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ffc:	e013      	b.n	8002026 <HAL_TIM_PWM_Start+0xaa>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d104      	bne.n	800200e <HAL_TIM_PWM_Start+0x92>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800200c:	e00b      	b.n	8002026 <HAL_TIM_PWM_Start+0xaa>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d104      	bne.n	800201e <HAL_TIM_PWM_Start+0xa2>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800201c:	e003      	b.n	8002026 <HAL_TIM_PWM_Start+0xaa>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2201      	movs	r2, #1
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fc7a 	bl	8002928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_TIM_PWM_Start+0x138>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d107      	bne.n	800204e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_TIM_PWM_Start+0x138>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00e      	beq.n	8002076 <HAL_TIM_PWM_Start+0xfa>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d009      	beq.n	8002076 <HAL_TIM_PWM_Start+0xfa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_TIM_PWM_Start+0x13c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_TIM_PWM_Start+0xfa>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_TIM_PWM_Start+0x140>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d111      	bne.n	800209a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b06      	cmp	r3, #6
 8002086:	d010      	beq.n	80020aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002098:	e007      	b.n	80020aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	40000400 	.word	0x40000400
 80020bc:	40000800 	.word	0x40000800

080020c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d122      	bne.n	800211c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d11b      	bne.n	800211c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0202 	mvn.w	r2, #2
 80020ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa0b 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fb58 	bl	80007c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fa0d 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b04      	cmp	r3, #4
 8002128:	d122      	bne.n	8002170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d11b      	bne.n	8002170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0204 	mvn.w	r2, #4
 8002140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f9e1 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 800215c:	e005      	b.n	800216a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fb2e 	bl	80007c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f9e3 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b08      	cmp	r3, #8
 800217c:	d122      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b08      	cmp	r3, #8
 800218a:	d11b      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0208 	mvn.w	r2, #8
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2204      	movs	r2, #4
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f9b7 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fb04 	bl	80007c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f9b9 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d122      	bne.n	8002218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d11b      	bne.n	8002218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0210 	mvn.w	r2, #16
 80021e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2208      	movs	r2, #8
 80021ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f98d 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 8002204:	e005      	b.n	8002212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fada 	bl	80007c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f98f 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0201 	mvn.w	r2, #1
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f964 	bl	800250c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b80      	cmp	r3, #128	; 0x80
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d107      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fc38 	bl	8002ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d10e      	bne.n	800229c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b40      	cmp	r3, #64	; 0x40
 800228a:	d107      	bne.n	800229c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f953 	bl	8002542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d10e      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d107      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0220 	mvn.w	r2, #32
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fc03 	bl	8002ace <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_OC_ConfigChannel+0x1e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e048      	b.n	8002380 <HAL_TIM_OC_ConfigChannel+0xb0>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d839      	bhi.n	8002370 <HAL_TIM_OC_ConfigChannel+0xa0>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <HAL_TIM_OC_ConfigChannel+0x34>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002339 	.word	0x08002339
 8002308:	08002371 	.word	0x08002371
 800230c:	08002371 	.word	0x08002371
 8002310:	08002371 	.word	0x08002371
 8002314:	08002347 	.word	0x08002347
 8002318:	08002371 	.word	0x08002371
 800231c:	08002371 	.word	0x08002371
 8002320:	08002371 	.word	0x08002371
 8002324:	08002355 	.word	0x08002355
 8002328:	08002371 	.word	0x08002371
 800232c:	08002371 	.word	0x08002371
 8002330:	08002371 	.word	0x08002371
 8002334:	08002363 	.word	0x08002363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f96a 	bl	8002618 <TIM_OC1_SetConfig>
      break;
 8002344:	e017      	b.n	8002376 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f9c9 	bl	80026e4 <TIM_OC2_SetConfig>
      break;
 8002352:	e010      	b.n	8002376 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fa2c 	bl	80027b8 <TIM_OC3_SetConfig>
      break;
 8002360:	e009      	b.n	8002376 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fa8f 	bl	800288c <TIM_OC4_SetConfig>
      break;
 800236e:	e002      	b.n	8002376 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
      break;
 8002374:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800237e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0ae      	b.n	8002504 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	f200 809f 	bhi.w	80024f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023b6:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	080023f1 	.word	0x080023f1
 80023c0:	080024f5 	.word	0x080024f5
 80023c4:	080024f5 	.word	0x080024f5
 80023c8:	080024f5 	.word	0x080024f5
 80023cc:	08002431 	.word	0x08002431
 80023d0:	080024f5 	.word	0x080024f5
 80023d4:	080024f5 	.word	0x080024f5
 80023d8:	080024f5 	.word	0x080024f5
 80023dc:	08002473 	.word	0x08002473
 80023e0:	080024f5 	.word	0x080024f5
 80023e4:	080024f5 	.word	0x080024f5
 80023e8:	080024f5 	.word	0x080024f5
 80023ec:	080024b3 	.word	0x080024b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f90e 	bl	8002618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0208 	orr.w	r2, r2, #8
 800240a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0204 	bic.w	r2, r2, #4
 800241a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6999      	ldr	r1, [r3, #24]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	619a      	str	r2, [r3, #24]
      break;
 800242e:	e064      	b.n	80024fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f954 	bl	80026e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6999      	ldr	r1, [r3, #24]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	021a      	lsls	r2, r3, #8
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	619a      	str	r2, [r3, #24]
      break;
 8002470:	e043      	b.n	80024fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f99d 	bl	80027b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0208 	orr.w	r2, r2, #8
 800248c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69da      	ldr	r2, [r3, #28]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0204 	bic.w	r2, r2, #4
 800249c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69d9      	ldr	r1, [r3, #28]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	61da      	str	r2, [r3, #28]
      break;
 80024b0:	e023      	b.n	80024fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f9e7 	bl	800288c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69d9      	ldr	r1, [r3, #28]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	021a      	lsls	r2, r3, #8
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	61da      	str	r2, [r3, #28]
      break;
 80024f2:	e002      	b.n	80024fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	75fb      	strb	r3, [r7, #23]
      break;
 80024f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a29      	ldr	r2, [pc, #164]	; (800260c <TIM_Base_SetConfig+0xb8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00b      	beq.n	8002584 <TIM_Base_SetConfig+0x30>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002572:	d007      	beq.n	8002584 <TIM_Base_SetConfig+0x30>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a26      	ldr	r2, [pc, #152]	; (8002610 <TIM_Base_SetConfig+0xbc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_Base_SetConfig+0x30>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a25      	ldr	r2, [pc, #148]	; (8002614 <TIM_Base_SetConfig+0xc0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d108      	bne.n	8002596 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <TIM_Base_SetConfig+0xb8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00b      	beq.n	80025b6 <TIM_Base_SetConfig+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d007      	beq.n	80025b6 <TIM_Base_SetConfig+0x62>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a19      	ldr	r2, [pc, #100]	; (8002610 <TIM_Base_SetConfig+0xbc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d003      	beq.n	80025b6 <TIM_Base_SetConfig+0x62>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a18      	ldr	r2, [pc, #96]	; (8002614 <TIM_Base_SetConfig+0xc0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d108      	bne.n	80025c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a07      	ldr	r2, [pc, #28]	; (800260c <TIM_Base_SetConfig+0xb8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d103      	bne.n	80025fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	615a      	str	r2, [r3, #20]
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40000400 	.word	0x40000400
 8002614:	40000800 	.word	0x40000800

08002618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f023 0201 	bic.w	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0303 	bic.w	r3, r3, #3
 800264e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f023 0302 	bic.w	r3, r3, #2
 8002660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <TIM_OC1_SetConfig+0xc8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10c      	bne.n	800268e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f023 0308 	bic.w	r3, r3, #8
 800267a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <TIM_OC1_SetConfig+0xc8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800269c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	621a      	str	r2, [r3, #32]
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40012c00 	.word	0x40012c00

080026e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f023 0210 	bic.w	r2, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0320 	bic.w	r3, r3, #32
 800272e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <TIM_OC2_SetConfig+0xd0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d10d      	bne.n	8002760 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800274a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800275e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <TIM_OC2_SetConfig+0xd0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d113      	bne.n	8002790 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800276e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	621a      	str	r2, [r3, #32]
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	40012c00 	.word	0x40012c00

080027b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0303 	bic.w	r3, r3, #3
 80027ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <TIM_OC3_SetConfig+0xd0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10d      	bne.n	8002832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800281c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <TIM_OC3_SetConfig+0xd0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d113      	bne.n	8002862 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	621a      	str	r2, [r3, #32]
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00

0800288c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	031b      	lsls	r3, r3, #12
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <TIM_OC4_SetConfig+0x98>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d109      	bne.n	8002900 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	019b      	lsls	r3, r3, #6
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	621a      	str	r2, [r3, #32]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	40012c00 	.word	0x40012c00

08002928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2201      	movs	r2, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a1a      	ldr	r2, [r3, #32]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1a      	ldr	r2, [r3, #32]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	431a      	orrs	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	621a      	str	r2, [r3, #32]
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002984:	2302      	movs	r3, #2
 8002986:	e046      	b.n	8002a16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d4:	d009      	beq.n	80029ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10c      	bne.n	8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40000800 	.word	0x40000800

08002a2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e03d      	b.n	8002ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e042      	b.n	8002b8a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7fd ff55 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2224      	movs	r2, #36	; 0x24
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fd0a 	bl	8003550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d121      	bne.n	8002bf0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_UART_Transmit_IT+0x26>
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e01a      	b.n	8002bf2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	88fa      	ldrh	r2, [r7, #6]
 8002bc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	88fa      	ldrh	r2, [r7, #6]
 8002bcc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2221      	movs	r2, #33	; 0x21
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d112      	bne.n	8002c3c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_UART_Receive_IT+0x26>
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00b      	b.n	8002c3e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fab7 	bl	80031a6 <UART_Start_Receive_IT>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	e000      	b.n	8002c3e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
  }
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0ba      	sub	sp, #232	; 0xe8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <HAL_UART_IRQHandler+0x66>
 8002c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fb93 	bl	80033d2 <UART_Receive_IT>
      return;
 8002cac:	e25b      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80de 	beq.w	8002e74 <HAL_UART_IRQHandler+0x22c>
 8002cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80d1 	beq.w	8002e74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xae>
 8002cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_UART_IRQHandler+0xd2>
 8002d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0202 	orr.w	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_UART_IRQHandler+0xf6>
 8002d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f043 0204 	orr.w	r2, r3, #4
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d011      	beq.n	8002d6e <HAL_UART_IRQHandler+0x126>
 8002d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f043 0208 	orr.w	r2, r3, #8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 81f2 	beq.w	800315c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_UART_IRQHandler+0x14e>
 8002d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fb1e 	bl	80033d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d103      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x17a>
 8002dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d04f      	beq.n	8002e62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa28 	bl	8003218 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d041      	beq.n	8002e5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3314      	adds	r3, #20
 8002ddc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3314      	adds	r3, #20
 8002dfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1d9      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d013      	beq.n	8002e52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	4a7e      	ldr	r2, [pc, #504]	; (8003028 <HAL_UART_IRQHandler+0x3e0>)
 8002e30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f83a 	bl	8000eb0 <HAL_DMA_Abort_IT>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	e00e      	b.n	8002e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f993 	bl	800317e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	e00a      	b.n	8002e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f98f 	bl	800317e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	e006      	b.n	8002e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f98b 	bl	800317e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002e6e:	e175      	b.n	800315c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e70:	bf00      	nop
    return;
 8002e72:	e173      	b.n	800315c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	f040 814f 	bne.w	800311c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8148 	beq.w	800311c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8141 	beq.w	800311c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80b6 	beq.w	800302c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ecc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8145 	beq.w	8003160 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	f080 813e 	bcs.w	8003160 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	f000 8088 	beq.w	8003008 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f24:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1d9      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3314      	adds	r3, #20
 8002f64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e1      	bne.n	8002f44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3314      	adds	r3, #20
 8002f86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fa4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fa6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002faa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e3      	bne.n	8002f80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	330c      	adds	r3, #12
 8002fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd8:	f023 0310 	bic.w	r3, r3, #16
 8002fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fea:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e3      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd ff19 	bl	8000e3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003016:	b29b      	uxth	r3, r3
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	b29b      	uxth	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8b6 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003024:	e09c      	b.n	8003160 <HAL_UART_IRQHandler+0x518>
 8003026:	bf00      	nop
 8003028:	080032dd 	.word	0x080032dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003034:	b29b      	uxth	r3, r3
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 808e 	beq.w	8003164 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8089 	beq.w	8003164 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003076:	647a      	str	r2, [r7, #68]	; 0x44
 8003078:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800307c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e3      	bne.n	8003052 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	623b      	str	r3, [r7, #32]
   return(result);
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3314      	adds	r3, #20
 80030aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030ae:	633a      	str	r2, [r7, #48]	; 0x30
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e3      	bne.n	800308a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	60fb      	str	r3, [r7, #12]
   return(result);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0310 	bic.w	r3, r3, #16
 80030e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030f4:	61fa      	str	r2, [r7, #28]
 80030f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	69b9      	ldr	r1, [r7, #24]
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	617b      	str	r3, [r7, #20]
   return(result);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e3      	bne.n	80030d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800310e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f83b 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800311a:	e023      	b.n	8003164 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800311c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_UART_IRQHandler+0x4f4>
 8003128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f8e5 	bl	8003304 <UART_Transmit_IT>
    return;
 800313a:	e014      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800313c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00e      	beq.n	8003166 <HAL_UART_IRQHandler+0x51e>
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f924 	bl	80033a2 <UART_EndTransmit_IT>
    return;
 800315a:	e004      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
    return;
 800315c:	bf00      	nop
 800315e:	e002      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
      return;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
      return;
 8003164:	bf00      	nop
  }
}
 8003166:	37e8      	adds	r7, #232	; 0xe8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	4613      	mov	r3, r2
 80031b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2222      	movs	r2, #34	; 0x22
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0220 	orr.w	r2, r2, #32
 800320a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003218:	b480      	push	{r7}
 800321a:	b095      	sub	sp, #84	; 0x54
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	330c      	adds	r3, #12
 800323e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003240:	643a      	str	r2, [r7, #64]	; 0x40
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e5      	bne.n	8003220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3314      	adds	r3, #20
 800325a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	61fb      	str	r3, [r7, #28]
   return(result);
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	64bb      	str	r3, [r7, #72]	; 0x48
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3314      	adds	r3, #20
 8003272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e5      	bne.n	8003254 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	2b01      	cmp	r3, #1
 800328e:	d119      	bne.n	80032c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	60bb      	str	r3, [r7, #8]
   return(result);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f023 0310 	bic.w	r3, r3, #16
 80032a6:	647b      	str	r3, [r7, #68]	; 0x44
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b0:	61ba      	str	r2, [r7, #24]
 80032b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6979      	ldr	r1, [r7, #20]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	613b      	str	r3, [r7, #16]
   return(result);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e5      	bne.n	8003290 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032d2:	bf00      	nop
 80032d4:	3754      	adds	r7, #84	; 0x54
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff ff41 	bl	800317e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b21      	cmp	r3, #33	; 0x21
 8003316:	d13e      	bne.n	8003396 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003320:	d114      	bne.n	800334c <UART_Transmit_IT+0x48>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d110      	bne.n	800334c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	1c9a      	adds	r2, r3, #2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	621a      	str	r2, [r3, #32]
 800334a:	e008      	b.n	800335e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6211      	str	r1, [r2, #32]
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4619      	mov	r1, r3
 800336c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003380:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003390:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fed2 	bl	800316c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b08c      	sub	sp, #48	; 0x30
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b22      	cmp	r3, #34	; 0x22
 80033e4:	f040 80ae 	bne.w	8003544 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f0:	d117      	bne.n	8003422 <UART_Receive_IT+0x50>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d113      	bne.n	8003422 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003410:	b29a      	uxth	r2, r3
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	1c9a      	adds	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
 8003420:	e026      	b.n	8003470 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003434:	d007      	beq.n	8003446 <UART_Receive_IT+0x74>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <UART_Receive_IT+0x82>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e008      	b.n	8003466 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003460:	b2da      	uxtb	r2, r3
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29b      	uxth	r3, r3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4619      	mov	r1, r3
 800347e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003480:	2b00      	cmp	r3, #0
 8003482:	d15d      	bne.n	8003540 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0220 	bic.w	r2, r2, #32
 8003492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d135      	bne.n	8003536 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	330c      	adds	r3, #12
 80034d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	613b      	str	r3, [r7, #16]
   return(result);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f023 0310 	bic.w	r3, r3, #16
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	623a      	str	r2, [r7, #32]
 80034f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f4:	69f9      	ldr	r1, [r7, #28]
 80034f6:	6a3a      	ldr	r2, [r7, #32]
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e5      	bne.n	80034d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b10      	cmp	r3, #16
 8003510:	d10a      	bne.n	8003528 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff fe2e 	bl	8003190 <HAL_UARTEx_RxEventCallback>
 8003534:	e002      	b.n	800353c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd f8b2 	bl	80006a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e002      	b.n	8003546 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003544:	2302      	movs	r3, #2
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3730      	adds	r7, #48	; 0x30
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800358a:	f023 030c 	bic.w	r3, r3, #12
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	430b      	orrs	r3, r1
 8003596:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2c      	ldr	r2, [pc, #176]	; (8003664 <UART_SetConfig+0x114>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d103      	bne.n	80035c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7fe fa6c 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	e002      	b.n	80035c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035c0:	f7fe fa54 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80035c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009a      	lsls	r2, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	4a22      	ldr	r2, [pc, #136]	; (8003668 <UART_SetConfig+0x118>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	0119      	lsls	r1, r3, #4
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	009a      	lsls	r2, r3, #2
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035fc:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <UART_SetConfig+0x118>)
 80035fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2064      	movs	r0, #100	; 0x64
 8003606:	fb00 f303 	mul.w	r3, r0, r3
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	3332      	adds	r3, #50	; 0x32
 8003610:	4a15      	ldr	r2, [pc, #84]	; (8003668 <UART_SetConfig+0x118>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800361c:	4419      	add	r1, r3
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009a      	lsls	r2, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	fbb2 f2f3 	udiv	r2, r2, r3
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <UART_SetConfig+0x118>)
 8003636:	fba3 0302 	umull	r0, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2064      	movs	r0, #100	; 0x64
 800363e:	fb00 f303 	mul.w	r3, r0, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	3332      	adds	r3, #50	; 0x32
 8003648:	4a07      	ldr	r2, [pc, #28]	; (8003668 <UART_SetConfig+0x118>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	440a      	add	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40013800 	.word	0x40013800
 8003668:	51eb851f 	.word	0x51eb851f

0800366c <memset>:
 800366c:	4603      	mov	r3, r0
 800366e:	4402      	add	r2, r0
 8003670:	4293      	cmp	r3, r2
 8003672:	d100      	bne.n	8003676 <memset+0xa>
 8003674:	4770      	bx	lr
 8003676:	f803 1b01 	strb.w	r1, [r3], #1
 800367a:	e7f9      	b.n	8003670 <memset+0x4>

0800367c <__libc_init_array>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	2600      	movs	r6, #0
 8003680:	4d0c      	ldr	r5, [pc, #48]	; (80036b4 <__libc_init_array+0x38>)
 8003682:	4c0d      	ldr	r4, [pc, #52]	; (80036b8 <__libc_init_array+0x3c>)
 8003684:	1b64      	subs	r4, r4, r5
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	42a6      	cmp	r6, r4
 800368a:	d109      	bne.n	80036a0 <__libc_init_array+0x24>
 800368c:	f000 f81a 	bl	80036c4 <_init>
 8003690:	2600      	movs	r6, #0
 8003692:	4d0a      	ldr	r5, [pc, #40]	; (80036bc <__libc_init_array+0x40>)
 8003694:	4c0a      	ldr	r4, [pc, #40]	; (80036c0 <__libc_init_array+0x44>)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	10a4      	asrs	r4, r4, #2
 800369a:	42a6      	cmp	r6, r4
 800369c:	d105      	bne.n	80036aa <__libc_init_array+0x2e>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a4:	4798      	blx	r3
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7ee      	b.n	8003688 <__libc_init_array+0xc>
 80036aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ae:	4798      	blx	r3
 80036b0:	3601      	adds	r6, #1
 80036b2:	e7f2      	b.n	800369a <__libc_init_array+0x1e>
 80036b4:	08003708 	.word	0x08003708
 80036b8:	08003708 	.word	0x08003708
 80036bc:	08003708 	.word	0x08003708
 80036c0:	0800370c 	.word	0x0800370c

080036c4 <_init>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

080036d0 <_fini>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr
