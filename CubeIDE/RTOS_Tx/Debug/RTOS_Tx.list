
RTOS_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080081e4  080081e4  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008350  08008350  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08008350  08008350  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008350  08008350  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008350  08008350  00018350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008354  08008354  00018354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017ac  2000007c  080083d4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001828  080083d4  00021828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000167ea  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037c5  00000000  00000000  000368d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  0003a098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001055  00000000  00000000  0003b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2f1  00000000  00000000  0003c5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d6e  00000000  00000000  000568e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095449  00000000  00000000  0006e654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005834  00000000  00000000  00103aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001092d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080081cc 	.word	0x080081cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080081cc 	.word	0x080081cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <HAL_voidControlMotors>:
#include "HAL/DC_MOTOR.h"

extern TIM_HandleTypeDef htim1;

void HAL_voidControlMotors(uint8_t speed, uint8_t direction)
{
 800076c:	b5b0      	push	{r4, r5, r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
    if (speed == 0)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d118      	bne.n	80007b4 <HAL_voidControlMotors+0x48>
    {
        HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	4866      	ldr	r0, [pc, #408]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 800078a:	f002 f80a 	bl	80027a2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	4863      	ldr	r0, [pc, #396]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 8000796:	f002 f804 	bl	80027a2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4861      	ldr	r0, [pc, #388]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007a2:	f001 fffe 	bl	80027a2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ac:	485e      	ldr	r0, [pc, #376]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007ae:	f001 fff8 	bl	80027a2 <HAL_GPIO_WritePin>

        // Start the PWM generation for motor1
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

    }
}
 80007b2:	e0b2      	b.n	800091a <HAL_voidControlMotors+0x1ae>
        HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_EN_PIN , GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	485b      	ldr	r0, [pc, #364]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007bc:	f001 fff1 	bl	80027a2 <HAL_GPIO_WritePin>
        if (direction == STOP)
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d118      	bne.n	80007f8 <HAL_voidControlMotors+0x8c>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007cc:	4855      	ldr	r0, [pc, #340]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80007ce:	f001 ffe8 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d8:	4852      	ldr	r0, [pc, #328]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80007da:	f001 ffe2 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e4:	4850      	ldr	r0, [pc, #320]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007e6:	f001 ffdc 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f0:	484d      	ldr	r0, [pc, #308]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007f2:	f001 ffd6 	bl	80027a2 <HAL_GPIO_WritePin>
 80007f6:	e07a      	b.n	80008ee <HAL_voidControlMotors+0x182>
        else if (direction == BACKWARD)
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d118      	bne.n	8000830 <HAL_voidControlMotors+0xc4>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000804:	4847      	ldr	r0, [pc, #284]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 8000806:	f001 ffcc 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000810:	4844      	ldr	r0, [pc, #272]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 8000812:	f001 ffc6 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4842      	ldr	r0, [pc, #264]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 800081e:	f001 ffc0 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	483f      	ldr	r0, [pc, #252]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 800082a:	f001 ffba 	bl	80027a2 <HAL_GPIO_WritePin>
 800082e:	e05e      	b.n	80008ee <HAL_voidControlMotors+0x182>
        else if (direction == FORWARD)
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d118      	bne.n	8000868 <HAL_voidControlMotors+0xfc>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	4839      	ldr	r0, [pc, #228]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 800083e:	f001 ffb0 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4836      	ldr	r0, [pc, #216]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 800084a:	f001 ffaa 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	4834      	ldr	r0, [pc, #208]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 8000856:	f001 ffa4 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000860:	4831      	ldr	r0, [pc, #196]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 8000862:	f001 ff9e 	bl	80027a2 <HAL_GPIO_WritePin>
 8000866:	e042      	b.n	80008ee <HAL_voidControlMotors+0x182>
        else if (direction == RIGHT)
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d11e      	bne.n	80008ac <HAL_voidControlMotors+0x140>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_EN_PIN , GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000874:	482c      	ldr	r0, [pc, #176]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 8000876:	f001 ff94 	bl	80027a2 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000880:	4829      	ldr	r0, [pc, #164]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 8000882:	f001 ff8e 	bl	80027a2 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088c:	4826      	ldr	r0, [pc, #152]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 800088e:	f001 ff88 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000898:	4822      	ldr	r0, [pc, #136]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 800089a:	f001 ff82 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a4:	481f      	ldr	r0, [pc, #124]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80008a6:	f001 ff7c 	bl	80027a2 <HAL_GPIO_WritePin>
 80008aa:	e020      	b.n	80008ee <HAL_voidControlMotors+0x182>
        else if (direction == LEFT)
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d11d      	bne.n	80008ee <HAL_voidControlMotors+0x182>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_EN_PIN , GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b8:	481b      	ldr	r0, [pc, #108]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80008ba:	f001 ff72 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c4:	4818      	ldr	r0, [pc, #96]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80008c6:	f001 ff6c 	bl	80027a2 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d0:	4815      	ldr	r0, [pc, #84]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80008d2:	f001 ff66 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80008de:	f001 ff60 	bl	80027a2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e8:	480e      	ldr	r0, [pc, #56]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80008ea:	f001 ff5a 	bl	80027a2 <HAL_GPIO_WritePin>
        uint64_t dutyCycle1 = (speed * htim1.Init.Period) / 100;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_voidControlMotors+0x1c0>)
 80008f2:	68d2      	ldr	r2, [r2, #12]
 80008f4:	fb02 f303 	mul.w	r3, r2, r3
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_voidControlMotors+0x1c4>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	2200      	movs	r2, #0
 8000902:	461c      	mov	r4, r3
 8000904:	4615      	mov	r5, r2
 8000906:	e9c7 4502 	strd	r4, r5, [r7, #8]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle1);
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_voidControlMotors+0x1c0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000912:	2100      	movs	r1, #0
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_voidControlMotors+0x1c0>)
 8000916:	f003 f9e7 	bl	8003ce8 <HAL_TIM_PWM_Start>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bdb0      	pop	{r4, r5, r7, pc}
 8000922:	bf00      	nop
 8000924:	40010800 	.word	0x40010800
 8000928:	40010c00 	.word	0x40010c00
 800092c:	200007fc 	.word	0x200007fc
 8000930:	51eb851f 	.word	0x51eb851f

08000934 <GSM_VidInit>:
 * @brief: Init and check the GSM module.
 *         Sends AT commands and checks responses for connection status,
 * @return: void
 */
void GSM_VidInit()
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	// Send AT command to check connection status
	while (Glb_u8GSMBuff[5] != 'O' && Glb_u8GSMBuff[6] != 'K')
 8000938:	e00d      	b.n	8000956 <GSM_VidInit+0x22>
	{
		HAL_UART_Transmit(&GSM_UART, Glb_u8CheckCmd, GSM_CHECKCMD_SIZE, GSM_TIMEOUT);
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	2204      	movs	r2, #4
 8000940:	490a      	ldr	r1, [pc, #40]	; (800096c <GSM_VidInit+0x38>)
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <GSM_VidInit+0x3c>)
 8000944:	f003 ff9f 	bl	8004886 <HAL_UART_Transmit>
		HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094c:	2246      	movs	r2, #70	; 0x46
 800094e:	4909      	ldr	r1, [pc, #36]	; (8000974 <GSM_VidInit+0x40>)
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <GSM_VidInit+0x3c>)
 8000952:	f004 f81b 	bl	800498c <HAL_UART_Receive>
	while (Glb_u8GSMBuff[5] != 'O' && Glb_u8GSMBuff[6] != 'K')
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <GSM_VidInit+0x40>)
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	2b4f      	cmp	r3, #79	; 0x4f
 800095c:	d003      	beq.n	8000966 <GSM_VidInit+0x32>
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <GSM_VidInit+0x40>)
 8000960:	799b      	ldrb	r3, [r3, #6]
 8000962:	2b4b      	cmp	r3, #75	; 0x4b
 8000964:	d1e9      	bne.n	800093a <GSM_VidInit+0x6>
	}
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000000 	.word	0x20000000
 8000970:	2000091c 	.word	0x2000091c
 8000974:	20000098 	.word	0x20000098

08000978 <GSM_VidCheckConnection>:
 *        Sends AT commands and checks responses for connection status,
 *        signal quality, and network registration.
 * @return uint8_t Status of Connection
 */
uint8_t GSM_VidCheckConnection(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
	uint8_t Loc_u8StatusConnection = GSM_FALSE;
 800097e:	2300      	movs	r3, #0
 8000980:	71fb      	strb	r3, [r7, #7]
	// Send AT command to check connection status

    for (uint8_t i = 0; i < 2; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	71bb      	strb	r3, [r7, #6]
 8000986:	e01d      	b.n	80009c4 <GSM_VidCheckConnection+0x4c>
    {
    	HAL_UART_Transmit(&GSM_UART, Glb_u8CheckCmd, GSM_CHECKCMD_SIZE, GSM_TIMEOUT);
 8000988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098c:	2204      	movs	r2, #4
 800098e:	4936      	ldr	r1, [pc, #216]	; (8000a68 <GSM_VidCheckConnection+0xf0>)
 8000990:	4836      	ldr	r0, [pc, #216]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 8000992:	f003 ff78 	bl	8004886 <HAL_UART_Transmit>
    	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	2246      	movs	r2, #70	; 0x46
 800099c:	4934      	ldr	r1, [pc, #208]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 800099e:	4833      	ldr	r0, [pc, #204]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 80009a0:	f003 fff4 	bl	800498c <HAL_UART_Receive>
        if (Glb_u8GSMBuff[5] == 'O' && Glb_u8GSMBuff[6] == 'K')
 80009a4:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009a6:	795b      	ldrb	r3, [r3, #5]
 80009a8:	2b4f      	cmp	r3, #79	; 0x4f
 80009aa:	d106      	bne.n	80009ba <GSM_VidCheckConnection+0x42>
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009ae:	799b      	ldrb	r3, [r3, #6]
 80009b0:	2b4b      	cmp	r3, #75	; 0x4b
 80009b2:	d102      	bne.n	80009ba <GSM_VidCheckConnection+0x42>
        {
        	Loc_u8StatusConnection = GSM_TRUE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	71fb      	strb	r3, [r7, #7]
            break;
 80009b8:	e007      	b.n	80009ca <GSM_VidCheckConnection+0x52>
        }
        else
        {
            // If connection status check fails, try again later
            // and send a notification to the dashboard after a set period of time
        	Loc_u8StatusConnection = GSM_FALSE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 2; i++)
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	3301      	adds	r3, #1
 80009c2:	71bb      	strb	r3, [r7, #6]
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d9de      	bls.n	8000988 <GSM_VidCheckConnection+0x10>
    }



    // Check signal quality by sending AT+CSQ command
    for (uint8_t i = 0; i < 2; i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	717b      	strb	r3, [r7, #5]
 80009ce:	e01d      	b.n	8000a0c <GSM_VidCheckConnection+0x94>
    {

    	HAL_UART_Transmit(&GSM_UART, Glb_u8CheckSignalCmd, GSM_CHECKSIG_SIZE, GSM_TIMEOUT);
 80009d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d4:	2208      	movs	r2, #8
 80009d6:	4927      	ldr	r1, [pc, #156]	; (8000a74 <GSM_VidCheckConnection+0xfc>)
 80009d8:	4824      	ldr	r0, [pc, #144]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 80009da:	f003 ff54 	bl	8004886 <HAL_UART_Transmit>
    	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	2246      	movs	r2, #70	; 0x46
 80009e4:	4922      	ldr	r1, [pc, #136]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009e6:	4821      	ldr	r0, [pc, #132]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 80009e8:	f003 ffd0 	bl	800498c <HAL_UART_Receive>

        if (Glb_u8GSMBuff[23] == 'O' && Glb_u8GSMBuff[24] == 'K')
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009ee:	7ddb      	ldrb	r3, [r3, #23]
 80009f0:	2b4f      	cmp	r3, #79	; 0x4f
 80009f2:	d106      	bne.n	8000a02 <GSM_VidCheckConnection+0x8a>
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009f6:	7e1b      	ldrb	r3, [r3, #24]
 80009f8:	2b4b      	cmp	r3, #75	; 0x4b
 80009fa:	d102      	bne.n	8000a02 <GSM_VidCheckConnection+0x8a>
        {

        	Loc_u8StatusConnection = GSM_TRUE;
 80009fc:	2301      	movs	r3, #1
 80009fe:	71fb      	strb	r3, [r7, #7]
            break;
 8000a00:	e007      	b.n	8000a12 <GSM_VidCheckConnection+0x9a>
        }
        else
        {
            // If signal quality check fails, try again later
            // and send a notification to the Dash-board after a set period of time
        	Loc_u8StatusConnection = GSM_FALSE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 2; i++)
 8000a06:	797b      	ldrb	r3, [r7, #5]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	717b      	strb	r3, [r7, #5]
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d9de      	bls.n	80009d0 <GSM_VidCheckConnection+0x58>
        }
    }


    // Check network registration by sending AT+COPS? command
    for (uint8_t i = 0; i < 2; i++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	713b      	strb	r3, [r7, #4]
 8000a16:	e01f      	b.n	8000a58 <GSM_VidCheckConnection+0xe0>
    {
    	HAL_UART_Transmit(&GSM_UART, Glb_u8NetRegCmd, GSM_CHECKNETREG_SIZE, GSM_TIMEOUT);
 8000a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	4916      	ldr	r1, [pc, #88]	; (8000a78 <GSM_VidCheckConnection+0x100>)
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 8000a22:	f003 ff30 	bl	8004886 <HAL_UART_Transmit>
    	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	2246      	movs	r2, #70	; 0x46
 8000a2c:	4910      	ldr	r1, [pc, #64]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 8000a2e:	480f      	ldr	r0, [pc, #60]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 8000a30:	f003 ffac 	bl	800498c <HAL_UART_Receive>

        if (Glb_u8GSMBuff[36] == 'O' && Glb_u8GSMBuff[37] == 'K')
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 8000a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a3a:	2b4f      	cmp	r3, #79	; 0x4f
 8000a3c:	d107      	bne.n	8000a4e <GSM_VidCheckConnection+0xd6>
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 8000a40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a44:	2b4b      	cmp	r3, #75	; 0x4b
 8000a46:	d102      	bne.n	8000a4e <GSM_VidCheckConnection+0xd6>
        {
        	Loc_u8StatusConnection = GSM_TRUE;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	71fb      	strb	r3, [r7, #7]
            break;
 8000a4c:	e007      	b.n	8000a5e <GSM_VidCheckConnection+0xe6>
        }
        else
        {
            // If network registration check fails, try again later
            // and send a notification to the Dash-board after a set period of time
        	Loc_u8StatusConnection = GSM_FALSE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 2; i++)
 8000a52:	793b      	ldrb	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	713b      	strb	r3, [r7, #4]
 8000a58:	793b      	ldrb	r3, [r7, #4]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d9dc      	bls.n	8000a18 <GSM_VidCheckConnection+0xa0>
        }
    }

    return Loc_u8StatusConnection;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	2000091c 	.word	0x2000091c
 8000a70:	20000098 	.word	0x20000098
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000014 	.word	0x20000014

08000a7c <GSM_VidSendSMS>:
 * @param message: Pointer to a string containing the message to be sent
 * @return uint8_t Status of Sending SMS
 */

uint8_t GSM_VidSendSMS(uint8_t *Ptr_u8PhoneNumber, uint8_t *Ptr_u8Message)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	//Capturing the size of the phone number and the message
	uint8_t Loc_u8PhoneNumSize = strlen((const char*)Ptr_u8PhoneNumber);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff fb62 	bl	8000150 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73fb      	strb	r3, [r7, #15]
	uint8_t Loc_u8MessageSize = strlen((const char*)Ptr_u8Message);
 8000a90:	6838      	ldr	r0, [r7, #0]
 8000a92:	f7ff fb5d 	bl	8000150 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	73bb      	strb	r3, [r7, #14]

	// Check the connection
	HAL_UART_Transmit(&GSM_UART, Glb_u8CheckCmd, GSM_CHECKCMD_SIZE, GSM_TIMEOUT);
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	493d      	ldr	r1, [pc, #244]	; (8000b98 <GSM_VidSendSMS+0x11c>)
 8000aa2:	483e      	ldr	r0, [pc, #248]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000aa4:	f003 feef 	bl	8004886 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aac:	2246      	movs	r2, #70	; 0x46
 8000aae:	493c      	ldr	r1, [pc, #240]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000ab0:	483a      	ldr	r0, [pc, #232]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000ab2:	f003 ff6b 	bl	800498c <HAL_UART_Receive>
	HAL_Delay(100);
 8000ab6:	2064      	movs	r0, #100	; 0x64
 8000ab8:	f001 fbd0 	bl	800225c <HAL_Delay>
	// Set text mode for SMS
	HAL_UART_Transmit(&GSM_UART, Glb_u8TxtModeCmd, GSM_TXTMODECMD_SIZE, GSM_TIMEOUT);
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	220b      	movs	r2, #11
 8000ac2:	4938      	ldr	r1, [pc, #224]	; (8000ba4 <GSM_VidSendSMS+0x128>)
 8000ac4:	4835      	ldr	r0, [pc, #212]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000ac6:	f003 fede 	bl	8004886 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	2246      	movs	r2, #70	; 0x46
 8000ad0:	4933      	ldr	r1, [pc, #204]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000ad2:	4832      	ldr	r0, [pc, #200]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000ad4:	f003 ff5a 	bl	800498c <HAL_UART_Receive>
	HAL_Delay(100);
 8000ad8:	2064      	movs	r0, #100	; 0x64
 8000ada:	f001 fbbf 	bl	800225c <HAL_Delay>
	//SMS opening
	HAL_UART_Transmit(&GSM_UART, Glb_u8SMSOPCmd, GSM_SMSOP_SIZE, GSM_TIMEOUT);
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	2209      	movs	r2, #9
 8000ae4:	4930      	ldr	r1, [pc, #192]	; (8000ba8 <GSM_VidSendSMS+0x12c>)
 8000ae6:	482d      	ldr	r0, [pc, #180]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000ae8:	f003 fecd 	bl	8004886 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af0:	2246      	movs	r2, #70	; 0x46
 8000af2:	492b      	ldr	r1, [pc, #172]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000af4:	4829      	ldr	r0, [pc, #164]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000af6:	f003 ff49 	bl	800498c <HAL_UART_Receive>
	HAL_Delay(100);
 8000afa:	2064      	movs	r0, #100	; 0x64
 8000afc:	f001 fbae 	bl	800225c <HAL_Delay>
	//Entering Phone Number
	HAL_UART_Transmit(&GSM_UART, (uint8_t*)Ptr_u8PhoneNumber, Loc_u8PhoneNumSize, GSM_TIMEOUT);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	4824      	ldr	r0, [pc, #144]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b0c:	f003 febb 	bl	8004886 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b14:	2246      	movs	r2, #70	; 0x46
 8000b16:	4922      	ldr	r1, [pc, #136]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000b18:	4820      	ldr	r0, [pc, #128]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b1a:	f003 ff37 	bl	800498c <HAL_UART_Receive>
	HAL_Delay(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
 8000b20:	f001 fb9c 	bl	800225c <HAL_Delay>
	//Closing Number format
	HAL_UART_Transmit(&GSM_UART, Glb_u8SMSCLCmd, GSM_SMSCL_SIZE, GSM_TIMEOUT);
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	2203      	movs	r2, #3
 8000b2a:	4920      	ldr	r1, [pc, #128]	; (8000bac <GSM_VidSendSMS+0x130>)
 8000b2c:	481b      	ldr	r0, [pc, #108]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b2e:	f003 feaa 	bl	8004886 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	2246      	movs	r2, #70	; 0x46
 8000b38:	4919      	ldr	r1, [pc, #100]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b3c:	f003 ff26 	bl	800498c <HAL_UART_Receive>
	HAL_Delay(100);
 8000b40:	2064      	movs	r0, #100	; 0x64
 8000b42:	f001 fb8b 	bl	800225c <HAL_Delay>
	//Entering Message
	HAL_UART_Transmit(&GSM_UART, (uint8_t*)Ptr_u8Message, Loc_u8MessageSize, GSM_TIMEOUT);
 8000b46:	7bbb      	ldrb	r3, [r7, #14]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	6839      	ldr	r1, [r7, #0]
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b52:	f003 fe98 	bl	8004886 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	2246      	movs	r2, #70	; 0x46
 8000b5c:	4910      	ldr	r1, [pc, #64]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000b5e:	480f      	ldr	r0, [pc, #60]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b60:	f003 ff14 	bl	800498c <HAL_UART_Receive>
	HAL_Delay(100);
 8000b64:	2064      	movs	r0, #100	; 0x64
 8000b66:	f001 fb79 	bl	800225c <HAL_Delay>
	//Sending Message
	HAL_UART_Transmit(&GSM_UART, (uint8_t*)"\x1A", 1, GSM_TIMEOUT);
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	2201      	movs	r2, #1
 8000b70:	490f      	ldr	r1, [pc, #60]	; (8000bb0 <GSM_VidSendSMS+0x134>)
 8000b72:	480a      	ldr	r0, [pc, #40]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b74:	f003 fe87 	bl	8004886 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7c:	2246      	movs	r2, #70	; 0x46
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000b80:	4806      	ldr	r0, [pc, #24]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b82:	f003 ff03 	bl	800498c <HAL_UART_Receive>
	HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f001 fb68 	bl	800225c <HAL_Delay>

	return GSM_TRUE;
 8000b8c:	2301      	movs	r3, #1


}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	2000091c 	.word	0x2000091c
 8000ba0:	20000098 	.word	0x20000098
 8000ba4:	20000020 	.word	0x20000020
 8000ba8:	2000002c 	.word	0x2000002c
 8000bac:	20000038 	.word	0x20000038
 8000bb0:	080081e4 	.word	0x080081e4

08000bb4 <NRF_ChipSelect>:
uint8_t Send_Data[10] ;

extern UART_HandleTypeDef huart1;

void NRF_ChipSelect (void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_RESET) ;
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <NRF_ChipSelect+0x14>)
 8000bbe:	f001 fdf0 	bl	80027a2 <HAL_GPIO_WritePin>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010800 	.word	0x40010800

08000bcc <NRF_ChipUnSelect>:

void NRF_ChipUnSelect (void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_SET) ;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <NRF_ChipUnSelect+0x14>)
 8000bd6:	f001 fde4 	bl	80027a2 <HAL_GPIO_WritePin>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40010800 	.word	0x40010800

08000be4 <NRF_ChipEnable>:


void NRF_ChipEnable (void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET) ;
 8000be8:	2201      	movs	r2, #1
 8000bea:	2102      	movs	r1, #2
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <NRF_ChipEnable+0x14>)
 8000bee:	f001 fdd8 	bl	80027a2 <HAL_GPIO_WritePin>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40010800 	.word	0x40010800

08000bfc <NRF_ChipDisable>:

void NRF_ChipDisable (void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET) ;
 8000c00:	2200      	movs	r2, #0
 8000c02:	2102      	movs	r1, #2
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <NRF_ChipDisable+0x14>)
 8000c06:	f001 fdcc 	bl	80027a2 <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40010800 	.word	0x40010800

08000c14 <NRF_voidWriteByteReg>:
 * Return : None
 * note :
 *
 */
void NRF_voidWriteByteReg(uint8_t Copy_u8Reg , uint8_t Copy_u8RegData)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[2] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f043 0320 	orr.w	r3, r3, #32
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	733b      	strb	r3, [r7, #12]

	/* Data to be written */
	Local_Buffer[1] =  Copy_u8RegData ;
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	737b      	strb	r3, [r7, #13]

	/* Chip Select */
	NRF_ChipSelect() ;
 8000c32:	f7ff ffbf 	bl	8000bb4 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, Local_Buffer,2,1000) ;
 8000c36:	f107 010c 	add.w	r1, r7, #12
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <NRF_voidWriteByteReg+0x40>)
 8000c42:	f002 fa5b 	bl	80030fc <HAL_SPI_Transmit>

	/* Release"Unselect"  device */
	NRF_ChipUnSelect () ;
 8000c46:	f7ff ffc1 	bl	8000bcc <NRF_ChipUnSelect>
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200007a4 	.word	0x200007a4

08000c58 <NRF_voidWriteMultiByteReg>:
 * note :
 *
 */

void NRF_voidWriteMultiByteReg(uint8_t Copy_u8Reg , uint8_t *Data , uint8_t Copy_u8Size)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[1] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f043 0320 	orr.w	r3, r3, #32
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	733b      	strb	r3, [r7, #12]

	/* Chip Select */
	NRF_ChipSelect() ;
 8000c72:	f7ff ff9f 	bl	8000bb4 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1,Local_Buffer,1,100) ;
 8000c76:	f107 010c 	add.w	r1, r7, #12
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <NRF_voidWriteMultiByteReg+0x48>)
 8000c80:	f002 fa3c 	bl	80030fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF_SPI1,Data,Copy_u8Size,1000) ;
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8c:	6839      	ldr	r1, [r7, #0]
 8000c8e:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <NRF_voidWriteMultiByteReg+0x48>)
 8000c90:	f002 fa34 	bl	80030fc <HAL_SPI_Transmit>

	/* Release"Unselect"device */
	NRF_ChipUnSelect () ;
 8000c94:	f7ff ff9a 	bl	8000bcc <NRF_ChipUnSelect>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200007a4 	.word	0x200007a4

08000ca4 <NRF_u8ReadByteReg>:
 * Return : Register Value
 * note :
 *
 */
uint8_t NRF_u8ReadByteReg(uint8_t Copy_u8Reg)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_Data = 0 ;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]

	/* Chip Select */
	NRF_ChipSelect() ;
 8000cb2:	f7ff ff7f 	bl	8000bb4 <NRF_ChipSelect>

	/* Receive Data */
	HAL_SPI_Transmit(NRF_SPI1,&Copy_u8Reg,1,100 ) ;
 8000cb6:	1df9      	adds	r1, r7, #7
 8000cb8:	2364      	movs	r3, #100	; 0x64
 8000cba:	2201      	movs	r2, #1
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <NRF_u8ReadByteReg+0x48>)
 8000cbe:	f002 fa1d 	bl	80030fc <HAL_SPI_Transmit>
	HAL_Delay(100) ;
 8000cc2:	2064      	movs	r0, #100	; 0x64
 8000cc4:	f001 faca 	bl	800225c <HAL_Delay>
	HAL_SPI_Receive(NRF_SPI1,&Local_Data,1,1000) ;
 8000cc8:	f107 010f 	add.w	r1, r7, #15
 8000ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <NRF_u8ReadByteReg+0x48>)
 8000cd4:	f002 fb55 	bl	8003382 <HAL_SPI_Receive>
	HAL_Delay(100) ;
 8000cd8:	2064      	movs	r0, #100	; 0x64
 8000cda:	f001 fabf 	bl	800225c <HAL_Delay>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 8000cde:	f7ff ff75 	bl	8000bcc <NRF_ChipUnSelect>

	return Local_Data ;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200007a4 	.word	0x200007a4

08000cf0 <NRF_voidCommandSet>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidCommandSet (uint8_t Copy_u8Command )
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	/* Chip Select */
	NRF_ChipSelect() ;
 8000cfa:	f7ff ff5b 	bl	8000bb4 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, &Copy_u8Command, 1 ,100) ;
 8000cfe:	1df9      	adds	r1, r7, #7
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	2201      	movs	r2, #1
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <NRF_voidCommandSet+0x28>)
 8000d06:	f002 f9f9 	bl	80030fc <HAL_SPI_Transmit>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 8000d0a:	f7ff ff5f 	bl	8000bcc <NRF_ChipUnSelect>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200007a4 	.word	0x200007a4

08000d1c <NRF_voidInit>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidInit ()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	/* Disable Chip */
	NRF_ChipDisable () ;
 8000d20:	f7ff ff6c 	bl	8000bfc <NRF_ChipDisable>

	/* Reset All Registers */
	//NRF_voidResetNRF(0X00) ;

	/* Config Init */
	NRF_voidWriteByteReg(CONFIG,0x00) ;
 8000d24:	2100      	movs	r1, #0
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ff74 	bl	8000c14 <NRF_voidWriteByteReg>

	/* EN_AA Init "NO ACK is Used" */
	NRF_voidWriteByteReg(EN_AA,0x00) ;
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff ff70 	bl	8000c14 <NRF_voidWriteByteReg>

	/* EN_RXADDR Init "Disable Data pipes for now"  */
	NRF_voidWriteByteReg(EN_RXADDR,0x00) ;
 8000d34:	2100      	movs	r1, #0
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff ff6c 	bl	8000c14 <NRF_voidWriteByteReg>

	/* SETUP_AW Init "Width of data pipe Addresses" */
	NRF_voidWriteByteReg(SETUP_AW,0x03) ;	  	  //5 Byte Address Width
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f7ff ff68 	bl	8000c14 <NRF_voidWriteByteReg>

	/* SETUP_RETR Init "Auto Transmit time " */
	NRF_voidWriteByteReg(SETUP_RETR,0x00) ;	  //Disable Auto Transmit
 8000d44:	2100      	movs	r1, #0
 8000d46:	2004      	movs	r0, #4
 8000d48:	f7ff ff64 	bl	8000c14 <NRF_voidWriteByteReg>

	/* RF_CH Init "Channel Number" */
	NRF_voidWriteByteReg(RF_CH,0x00) ;	  	  //Disable for now will be configured later
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2005      	movs	r0, #5
 8000d50:	f7ff ff60 	bl	8000c14 <NRF_voidWriteByteReg>

	/* RF_SETUP Init "BaudRate , Power" */
	NRF_voidWriteByteReg(RF_SETUP,0x0E) ;	   	   //0dBM, 2Mbps
 8000d54:	210e      	movs	r1, #14
 8000d56:	2006      	movs	r0, #6
 8000d58:	f7ff ff5c 	bl	8000c14 <NRF_voidWriteByteReg>

	/* Enable Chip */
	NRF_ChipEnable () ;
 8000d5c:	f7ff ff42 	bl	8000be4 <NRF_ChipEnable>


}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <NRF_voidTransmitterMode>:
 * note :
 *
 */

void NRF_voidTransmitterMode (uint8_t * Address ,uint8_t Copy_u8Channel_Number )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	/* Disable Chip */
	NRF_ChipDisable () ;
 8000d70:	f7ff ff44 	bl	8000bfc <NRF_ChipDisable>

	/* Select Channel */
	NRF_voidWriteByteReg(RF_CH,Copy_u8Channel_Number) ;
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	4619      	mov	r1, r3
 8000d78:	2005      	movs	r0, #5
 8000d7a:	f7ff ff4b 	bl	8000c14 <NRF_voidWriteByteReg>

	/* Transmit Address */
	NRF_voidWriteMultiByteReg(TX_ADDR,Address,5) ;
 8000d7e:	2205      	movs	r2, #5
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	2010      	movs	r0, #16
 8000d84:	f7ff ff68 	bl	8000c58 <NRF_voidWriteMultiByteReg>

	/* Power up Device and select the device as TX */
	uint8_t Temp ;
	Temp = NRF_u8ReadByteReg(CONFIG);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ff8b 	bl	8000ca4 <NRF_u8ReadByteReg>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	73fb      	strb	r3, [r7, #15]
	Temp = Temp | (1<<1) | (0<<0) ;   // 0b0000 0010
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	73fb      	strb	r3, [r7, #15]
	NRF_voidWriteByteReg(CONFIG,0x02) ;
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff ff39 	bl	8000c14 <NRF_voidWriteByteReg>
	HAL_Delay(100) ;
 8000da2:	2064      	movs	r0, #100	; 0x64
 8000da4:	f001 fa5a 	bl	800225c <HAL_Delay>

	/* Enable Chip */
	NRF_ChipEnable () ;
 8000da8:	f7ff ff1c 	bl	8000be4 <NRF_ChipEnable>


}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <NRF_voidSendData>:
 * note :
 *
 */

void NRF_voidSendData (uint8_t * Data , uint8_t Copy_u8SizeinByte ,uint8_t Copy_u8CharFlag  )
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	70bb      	strb	r3, [r7, #2]
	/* Counter of For Loop */
	uint8_t Local_Counter = 0 ;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
	/* Array Index */
	uint8_t Local_ArrayIndex = 0 ;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73bb      	strb	r3, [r7, #14]

	/* Chip Select  */
	NRF_ChipSelect() ;
 8000dcc:	f7ff fef2 	bl	8000bb4 <NRF_ChipSelect>

   uint8_t Temp = W_TX_PAYLOAD ;
 8000dd0:	23a0      	movs	r3, #160	; 0xa0
 8000dd2:	733b      	strb	r3, [r7, #12]

   /* Get the Receiver ready , Next Pay-Load is Data */
   HAL_SPI_Transmit(NRF_SPI1, &Temp, 1 , 100) ;
 8000dd4:	f107 010c 	add.w	r1, r7, #12
 8000dd8:	2364      	movs	r3, #100	; 0x64
 8000dda:	2201      	movs	r2, #1
 8000ddc:	482d      	ldr	r0, [pc, #180]	; (8000e94 <NRF_voidSendData+0xe0>)
 8000dde:	f002 f98d 	bl	80030fc <HAL_SPI_Transmit>

   /* Always First Byte is Character */
   Send_Data[0] = Data[0] ;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <NRF_voidSendData+0xe4>)
 8000de8:	701a      	strb	r2, [r3, #0]
   Local_ArrayIndex ++ ;
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	3301      	adds	r3, #1
 8000dee:	73bb      	strb	r3, [r7, #14]

   if (Copy_u8CharFlag == NRF_NUMBERS_EXIST )
 8000df0:	78bb      	ldrb	r3, [r7, #2]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d115      	bne.n	8000e22 <NRF_voidSendData+0x6e>
   {
	   /* Number(s) */
	   for (Local_Counter = 1 ; Local_Counter < Copy_u8SizeinByte ; Local_Counter++ )
 8000df6:	2301      	movs	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e00e      	b.n	8000e1a <NRF_voidSendData+0x66>
	   {
		   Local_ArrayIndex= HAL_NRF_Send_Number(Data[Local_Counter] ,Local_Counter ) ;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f000 f846 	bl	8000e9c <HAL_NRF_Send_Number>
 8000e10:	4603      	mov	r3, r0
 8000e12:	73bb      	strb	r3, [r7, #14]
	   for (Local_Counter = 1 ; Local_Counter < Copy_u8SizeinByte ; Local_Counter++ )
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	3301      	adds	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	7bfa      	ldrb	r2, [r7, #15]
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3ec      	bcc.n	8000dfc <NRF_voidSendData+0x48>
	   }

   }

   /* Last Element is + */
   Send_Data[Local_ArrayIndex] = '+' ;
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <NRF_voidSendData+0xe4>)
 8000e26:	212b      	movs	r1, #43	; 0x2b
 8000e28:	54d1      	strb	r1, [r2, r3]

   /* Send Pay-Load "Data" */
   HAL_SPI_Transmit(NRF_SPI1, Send_Data, (Local_ArrayIndex+1) , 10000) ;
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e36:	4918      	ldr	r1, [pc, #96]	; (8000e98 <NRF_voidSendData+0xe4>)
 8000e38:	4816      	ldr	r0, [pc, #88]	; (8000e94 <NRF_voidSendData+0xe0>)
 8000e3a:	f002 f95f 	bl	80030fc <HAL_SPI_Transmit>

	/* Chip UnSelect  */
	NRF_ChipUnSelect() ;
 8000e3e:	f7ff fec5 	bl	8000bcc <NRF_ChipUnSelect>

	/* Delay */
	HAL_Delay(1) ;
 8000e42:	2001      	movs	r0, #1
 8000e44:	f001 fa0a 	bl	800225c <HAL_Delay>

	/* Check if TX Buffer is empty or not */
	uint8_t Local_FIFOStatus ;
	Local_FIFOStatus = NRF_u8ReadByteReg(FIFO_STATUS) ;
 8000e48:	2017      	movs	r0, #23
 8000e4a:	f7ff ff2b 	bl	8000ca4 <NRF_u8ReadByteReg>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	737b      	strb	r3, [r7, #13]



	// 4 --> TX_EMPTY(1)
	if ((Local_FIFOStatus & (1<<4)))
 8000e52:	7b7b      	ldrb	r3, [r7, #13]
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d008      	beq.n	8000e6e <NRF_voidSendData+0xba>
	{
		/* Put Any-Condition To Check */

		Temp = FLUSH_TX ;
 8000e5c:	23e1      	movs	r3, #225	; 0xe1
 8000e5e:	733b      	strb	r3, [r7, #12]
		/* Flush TX */
		NRF_voidCommandSet(Temp);
 8000e60:	7b3b      	ldrb	r3, [r7, #12]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff44 	bl	8000cf0 <NRF_voidCommandSet>

		// Reset FIFO_STATUS
		NRF_voidResetNRF(FIFO_STATUS) ;
 8000e68:	2017      	movs	r0, #23
 8000e6a:	f000 f86b 	bl	8000f44 <NRF_voidResetNRF>

	}

	/* Reinitialize the array with Zeros */
   for (Local_Counter = 0 ; Local_Counter<10 ; Local_Counter++ )
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	e006      	b.n	8000e82 <NRF_voidSendData+0xce>
   {
	   Send_Data[Local_Counter] = 0 ;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <NRF_voidSendData+0xe4>)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	54d1      	strb	r1, [r2, r3]
   for (Local_Counter = 0 ; Local_Counter<10 ; Local_Counter++ )
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2b09      	cmp	r3, #9
 8000e86:	d9f5      	bls.n	8000e74 <NRF_voidSendData+0xc0>
   }



}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200007a4 	.word	0x200007a4
 8000e98:	200000e0 	.word	0x200000e0

08000e9c <HAL_NRF_Send_Number>:
 * note :
 *
 */

uint8_t HAL_NRF_Send_Number(uint32_t Copy_u32Number , uint8_t Copy_u8Number_Index)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]

	uint8_t Local_u8Number_Element = 0  ;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
	uint8_t Main_Arr[5] = {0}			;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	733b      	strb	r3, [r7, #12]

	if (Copy_u32Number == 0)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d11e      	bne.n	8000ef8 <HAL_NRF_Send_Number+0x5c>
	{
		Local_u8Number_Element++ ;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e01d      	b.n	8000efe <HAL_NRF_Send_Number+0x62>
	else
	{
    /* Splitting Number */
    while (Copy_u32Number > 0)
    {
    	Main_Arr[Local_u8Number_Element] = (Copy_u32Number % 10) + 48 ;
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_NRF_Send_Number+0xa0>)
 8000ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	1aca      	subs	r2, r1, r3
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	3230      	adds	r2, #48	; 0x30
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	3310      	adds	r3, #16
 8000ee0:	443b      	add	r3, r7
 8000ee2:	f803 2c08 	strb.w	r2, [r3, #-8]
    	Copy_u32Number = Copy_u32Number / 10 ;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_NRF_Send_Number+0xa0>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	08db      	lsrs	r3, r3, #3
 8000ef0:	607b      	str	r3, [r7, #4]
    	Local_u8Number_Element++ ;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
    while (Copy_u32Number > 0)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1e1      	bne.n	8000ec2 <HAL_NRF_Send_Number+0x26>
    }

	}
    /* Copy the elements of Main_Arr --> Reverted_Arr then send them to UART in correct order */

    for (uint8_t Revert_Index = 0 ; Revert_Index<Local_u8Number_Element ; Revert_Index++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	73bb      	strb	r3, [r7, #14]
 8000f02:	e010      	b.n	8000f26 <HAL_NRF_Send_Number+0x8a>
    {
    	Send_Data[Copy_u8Number_Index] = Main_Arr[Local_u8Number_Element-Revert_Index-1] ;
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	3210      	adds	r2, #16
 8000f10:	443a      	add	r2, r7
 8000f12:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_NRF_Send_Number+0xa4>)
 8000f18:	54d1      	strb	r1, [r2, r3]
    	Copy_u8Number_Index ++ ;
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t Revert_Index = 0 ; Revert_Index<Local_u8Number_Element ; Revert_Index++)
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	3301      	adds	r3, #1
 8000f24:	73bb      	strb	r3, [r7, #14]
 8000f26:	7bba      	ldrb	r2, [r7, #14]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3ea      	bcc.n	8000f04 <HAL_NRF_Send_Number+0x68>
    }

    return Copy_u8Number_Index ;
 8000f2e:	78fb      	ldrb	r3, [r7, #3]

}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	cccccccd 	.word	0xcccccccd
 8000f40:	200000e0 	.word	0x200000e0

08000f44 <NRF_voidResetNRF>:
 *
 */


void NRF_voidResetNRF(uint8_t Copy_u8REG)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8REG == STATUS)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d104      	bne.n	8000f5e <NRF_voidResetNRF+0x1a>
	{
		NRF_voidWriteByteReg(STATUS, 0x00);
 8000f54:	2100      	movs	r1, #0
 8000f56:	2007      	movs	r0, #7
 8000f58:	f7ff fe5c 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
	NRF_voidWriteByteReg(DYNPD, 0);
	NRF_voidWriteByteReg(FEATURE, 0);
	}
}
 8000f5c:	e090      	b.n	8001080 <NRF_voidResetNRF+0x13c>
	else if (Copy_u8REG == FIFO_STATUS)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b17      	cmp	r3, #23
 8000f62:	d104      	bne.n	8000f6e <NRF_voidResetNRF+0x2a>
		NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 8000f64:	2111      	movs	r1, #17
 8000f66:	2017      	movs	r0, #23
 8000f68:	f7ff fe54 	bl	8000c14 <NRF_voidWriteByteReg>
}
 8000f6c:	e088      	b.n	8001080 <NRF_voidResetNRF+0x13c>
	NRF_voidWriteByteReg(CONFIG, 0x08);
 8000f6e:	2108      	movs	r1, #8
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fe4f 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_AA, 0x3F);
 8000f76:	213f      	movs	r1, #63	; 0x3f
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff fe4b 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_RXADDR, 0x03);
 8000f7e:	2103      	movs	r1, #3
 8000f80:	2002      	movs	r0, #2
 8000f82:	f7ff fe47 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_AW, 0x03);
 8000f86:	2103      	movs	r1, #3
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f7ff fe43 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_RETR, 0x03);
 8000f8e:	2103      	movs	r1, #3
 8000f90:	2004      	movs	r0, #4
 8000f92:	f7ff fe3f 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_CH, 0x02);
 8000f96:	2102      	movs	r1, #2
 8000f98:	2005      	movs	r0, #5
 8000f9a:	f7ff fe3b 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_SETUP, 0x0E);
 8000f9e:	210e      	movs	r1, #14
 8000fa0:	2006      	movs	r0, #6
 8000fa2:	f7ff fe37 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(STATUS, 0x00);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2007      	movs	r0, #7
 8000faa:	f7ff fe33 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(OBSERVE_TX, 0x00);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2008      	movs	r0, #8
 8000fb2:	f7ff fe2f 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(CD, 0x00);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2009      	movs	r0, #9
 8000fba:	f7ff fe2b 	bl	8000c14 <NRF_voidWriteByteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000fbe:	4a32      	ldr	r2, [pc, #200]	; (8001088 <NRF_voidResetNRF+0x144>)
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc8:	6018      	str	r0, [r3, #0]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	2205      	movs	r2, #5
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f7ff fe3e 	bl	8000c58 <NRF_voidWriteMultiByteReg>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	; (800108c <NRF_voidResetNRF+0x148>)
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe6:	6018      	str	r0, [r3, #0]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	200b      	movs	r0, #11
 8000ff6:	f7ff fe2f 	bl	8000c58 <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P2, 0xC3);
 8000ffa:	21c3      	movs	r1, #195	; 0xc3
 8000ffc:	200c      	movs	r0, #12
 8000ffe:	f7ff fe09 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P3, 0xC4);
 8001002:	21c4      	movs	r1, #196	; 0xc4
 8001004:	200d      	movs	r0, #13
 8001006:	f7ff fe05 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P4, 0xC5);
 800100a:	21c5      	movs	r1, #197	; 0xc5
 800100c:	200e      	movs	r0, #14
 800100e:	f7ff fe01 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P5, 0xC6);
 8001012:	21c6      	movs	r1, #198	; 0xc6
 8001014:	200f      	movs	r0, #15
 8001016:	f7ff fdfd 	bl	8000c14 <NRF_voidWriteByteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <NRF_voidResetNRF+0x144>)
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001024:	6018      	str	r0, [r3, #0]
 8001026:	3304      	adds	r3, #4
 8001028:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(TX_ADDR, tx_addr_def, 5);
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2205      	movs	r2, #5
 8001030:	4619      	mov	r1, r3
 8001032:	2010      	movs	r0, #16
 8001034:	f7ff fe10 	bl	8000c58 <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_PW_P0, 0);
 8001038:	2100      	movs	r1, #0
 800103a:	2011      	movs	r0, #17
 800103c:	f7ff fdea 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P1, 0);
 8001040:	2100      	movs	r1, #0
 8001042:	2012      	movs	r0, #18
 8001044:	f7ff fde6 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P2, 0);
 8001048:	2100      	movs	r1, #0
 800104a:	2013      	movs	r0, #19
 800104c:	f7ff fde2 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P3, 0);
 8001050:	2100      	movs	r1, #0
 8001052:	2014      	movs	r0, #20
 8001054:	f7ff fdde 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P4, 0);
 8001058:	2100      	movs	r1, #0
 800105a:	2015      	movs	r0, #21
 800105c:	f7ff fdda 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
 8001060:	2100      	movs	r1, #0
 8001062:	2016      	movs	r0, #22
 8001064:	f7ff fdd6 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 8001068:	2111      	movs	r1, #17
 800106a:	2017      	movs	r0, #23
 800106c:	f7ff fdd2 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(DYNPD, 0);
 8001070:	2100      	movs	r1, #0
 8001072:	201c      	movs	r0, #28
 8001074:	f7ff fdce 	bl	8000c14 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FEATURE, 0);
 8001078:	2100      	movs	r1, #0
 800107a:	201d      	movs	r0, #29
 800107c:	f7ff fdca 	bl	8000c14 <NRF_voidWriteByteReg>
}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	080081e8 	.word	0x080081e8
 800108c:	080081f0 	.word	0x080081f0

08001090 <HAL_voidUltraSonicInit>:
   // {GPIOB, GPIOB, GPIO_PIN_13, GPIO_PIN_14, &val1_Ultrsonic_3, &val2_Ultrsonic_3, &distance3},
   // {GPIOA, GPIOB, GPIO_PIN_15, GPIO_PIN_15, &val1_Ultrsonic_4, &val2_Ultrsonic_4, &distance4}
};

void HAL_voidUltraSonicInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <HAL_voidUltraSonicInit+0x10>)
 8001096:	f002 fd85 	bl	8003ba4 <HAL_TIM_Base_Start>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000844 	.word	0x20000844
 80010a4:	00000000 	.word	0x00000000

080010a8 <HAL_voidUltraSonic>:


void HAL_voidUltraSonic (uint16_t *UltraSonic_Reading)
{
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < ULTRA_COUNT; i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
 80010b4:	e080      	b.n	80011b8 <HAL_voidUltraSonic+0x110>
	{
		UltrasonicSensor sensor = ultrasonicSensors[i];
 80010b6:	4948      	ldr	r1, [pc, #288]	; (80011d8 <HAL_voidUltraSonic+0x130>)
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	f107 040c 	add.w	r4, r7, #12
 80010c8:	461d      	mov	r5, r3
 80010ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010d2:	e884 0003 	stmia.w	r4, {r0, r1}



		HAL_GPIO_WritePin(sensor.trigPort, sensor.trigPin, GPIO_PIN_SET);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8ab9      	ldrh	r1, [r7, #20]
 80010da:	2201      	movs	r2, #1
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fb60 	bl	80027a2 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80010e2:	4b3e      	ldr	r3, [pc, #248]	; (80011dc <HAL_voidUltraSonic+0x134>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 10);  // wait for 10 us
 80010ea:	bf00      	nop
 80010ec:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <HAL_voidUltraSonic+0x134>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	2b09      	cmp	r3, #9
 80010f4:	d9fa      	bls.n	80010ec <HAL_voidUltraSonic+0x44>
		HAL_GPIO_WritePin(sensor.trigPort, sensor.trigPin, GPIO_PIN_RESET);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8ab9      	ldrh	r1, [r7, #20]
 80010fa:	2200      	movs	r2, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fb50 	bl	80027a2 <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick();
 8001102:	f001 f8a1 	bl	8002248 <HAL_GetTick>
 8001106:	4603      	mov	r3, r0
 8001108:	4a35      	ldr	r2, [pc, #212]	; (80011e0 <HAL_voidUltraSonic+0x138>)
 800110a:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(sensor.echoPort, sensor.echoPin)) && pMillis + 10 > HAL_GetTick());
 800110c:	bf00      	nop
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	8afa      	ldrh	r2, [r7, #22]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fb2d 	bl	8002774 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <HAL_voidUltraSonic+0x8a>
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_voidUltraSonic+0x138>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f103 040a 	add.w	r4, r3, #10
 8001128:	f001 f88e 	bl	8002248 <HAL_GetTick>
 800112c:	4603      	mov	r3, r0
 800112e:	429c      	cmp	r4, r3
 8001130:	d8ed      	bhi.n	800110e <HAL_voidUltraSonic+0x66>
		*(sensor.val1) = __HAL_TIM_GET_COUNTER(&htim2);
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_voidUltraSonic+0x134>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800113a:	601a      	str	r2, [r3, #0]

		pMillis = HAL_GetTick();
 800113c:	f001 f884 	bl	8002248 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <HAL_voidUltraSonic+0x138>)
 8001144:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(sensor.echoPort, sensor.echoPin)) && pMillis + 50 > HAL_GetTick());
 8001146:	bf00      	nop
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	8afa      	ldrh	r2, [r7, #22]
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fb10 	bl	8002774 <HAL_GPIO_ReadPin>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d008      	beq.n	800116c <HAL_voidUltraSonic+0xc4>
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_voidUltraSonic+0x138>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001162:	f001 f871 	bl	8002248 <HAL_GetTick>
 8001166:	4603      	mov	r3, r0
 8001168:	429c      	cmp	r4, r3
 800116a:	d8ed      	bhi.n	8001148 <HAL_voidUltraSonic+0xa0>
		*(sensor.val2) = __HAL_TIM_GET_COUNTER(&htim2);
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_voidUltraSonic+0x134>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001174:	601a      	str	r2, [r3, #0]


		*(sensor.distance) = (*(sensor.val2) - *(sensor.val1)) * 0.0022 ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fa59 	bl	8000638 <__aeabi_ui2d>
 8001186:	a312      	add	r3, pc, #72	; (adr r3, 80011d0 <HAL_voidUltraSonic+0x128>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7fe ffe8 	bl	8000160 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	6a3c      	ldr	r4, [r7, #32]
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fac7 	bl	800072c <__aeabi_d2uiz>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	8023      	strh	r3, [r4, #0]
		{
			*sensor.distance = *sensor.distance - 135 ;
		}
*/
		// Store the distance in the array
		UltraSonic_Reading[i] = *(sensor.distance);
 80011a4:	6a3a      	ldr	r2, [r7, #32]
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	440b      	add	r3, r1
 80011ae:	8812      	ldrh	r2, [r2, #0]
 80011b0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < ULTRA_COUNT; i++)
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	3301      	adds	r3, #1
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f77f af7b 	ble.w	80010b6 <HAL_voidUltraSonic+0xe>


	}

}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	01a36e2f 	.word	0x01a36e2f
 80011d4:	3f6205bc 	.word	0x3f6205bc
 80011d8:	2000003c 	.word	0x2000003c
 80011dc:	20000844 	.word	0x20000844
 80011e0:	200000ec 	.word	0x200000ec

080011e4 <HAL_UltraSonic_Decision>:

uint8_t HAL_UltraSonic_Decision(uint16_t *UltraSonic_Reading)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

	uint8_t Return_Value = 254 ;
 80011ec:	23fe      	movs	r3, #254	; 0xfe
 80011ee:	73fb      	strb	r3, [r7, #15]

	/* About to Hit */
	if ( (UltraSonic_Reading[US_FORWARD]<= 10) )
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	2b0a      	cmp	r3, #10
 80011f6:	d80c      	bhi.n	8001212 <HAL_UltraSonic_Decision+0x2e>
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fe:	4813      	ldr	r0, [pc, #76]	; (800124c <HAL_UltraSonic_Decision+0x68>)
 8001200:	f001 facf 	bl	80027a2 <HAL_GPIO_WritePin>
		Return_Value = STOP ;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
		GSM_VidSendSMS((uint8_t*)"01003676020", (uint8_t*)"SOS");
 8001208:	4911      	ldr	r1, [pc, #68]	; (8001250 <HAL_UltraSonic_Decision+0x6c>)
 800120a:	4812      	ldr	r0, [pc, #72]	; (8001254 <HAL_UltraSonic_Decision+0x70>)
 800120c:	f7ff fc36 	bl	8000a7c <GSM_VidSendSMS>
 8001210:	e016      	b.n	8001240 <HAL_UltraSonic_Decision+0x5c>

	}

	/* Close to Hit */
	else if ((20 < UltraSonic_Reading[US_FORWARD]) &&  (UltraSonic_Reading[US_FORWARD]<= 30) )
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	2b14      	cmp	r3, #20
 8001218:	d90c      	bls.n	8001234 <HAL_UltraSonic_Decision+0x50>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	2b1e      	cmp	r3, #30
 8001220:	d808      	bhi.n	8001234 <HAL_UltraSonic_Decision+0x50>
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <HAL_UltraSonic_Decision+0x68>)
 800122a:	f001 faba 	bl	80027a2 <HAL_GPIO_WritePin>
		Return_Value = SPEED_25 ;
 800122e:	2319      	movs	r3, #25
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e005      	b.n	8001240 <HAL_UltraSonic_Decision+0x5c>

	}
	else HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <HAL_UltraSonic_Decision+0x68>)
 800123c:	f001 fab1 	bl	80027a2 <HAL_GPIO_WritePin>



	return Return_Value ;
 8001240:	7bfb      	ldrb	r3, [r7, #15]

}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40011000 	.word	0x40011000
 8001250:	080081f8 	.word	0x080081f8
 8001254:	080081fc 	.word	0x080081fc

08001258 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a06      	ldr	r2, [pc, #24]	; (8001280 <vApplicationGetIdleTaskMemory+0x28>)
 8001268:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <vApplicationGetIdleTaskMemory+0x2c>)
 800126e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	200000fc 	.word	0x200000fc
 8001284:	20000150 	.word	0x20000150

08001288 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001298:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <vApplicationGetTimerTaskMemory+0x30>)
 800129e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000350 	.word	0x20000350
 80012b8:	200003a4 	.word	0x200003a4

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b0ae      	sub	sp, #184	; 0xb8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f000 ff7b 	bl	80021bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f8dd 	bl	8001484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ca:	f000 fadd 	bl	8001888 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012ce:	f000 f915 	bl	80014fc <MX_SPI1_Init>
  MX_TIM1_Init();
 80012d2:	f000 f949 	bl	8001568 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012d6:	f000 f9e9 	bl	80016ac <MX_TIM2_Init>
  MX_TIM3_Init();
 80012da:	f000 fa33 	bl	8001744 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012de:	f000 fa7f 	bl	80017e0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80012e2:	f000 faa7 	bl	8001834 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Mode_Sem */
  osSemaphoreDef(Mode_Sem);
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  Mode_SemHandle = osSemaphoreCreate(osSemaphore(Mode_Sem), 1);
 80012f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80012f6:	2101      	movs	r1, #1
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fe47 	bl	8004f8c <osSemaphoreCreate>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a4d      	ldr	r2, [pc, #308]	; (8001438 <main+0x17c>)
 8001302:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of ActionDecision_Timer */
  osTimerDef(ActionDecision_Timer, ActionDecision_Callback);
 8001304:	4b4d      	ldr	r3, [pc, #308]	; (800143c <main+0x180>)
 8001306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ActionDecision_TimerHandle = osTimerCreate(osTimer(ActionDecision_Timer), osTimerPeriodic, NULL);
 8001310:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001314:	2200      	movs	r2, #0
 8001316:	2101      	movs	r1, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fdbf 	bl	8004e9c <osTimerCreate>
 800131e:	4603      	mov	r3, r0
 8001320:	4a47      	ldr	r2, [pc, #284]	; (8001440 <main+0x184>)
 8001322:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mode_Timer */
  osTimerDef(Mode_Timer, Mode_Callback);
 8001324:	4b47      	ldr	r3, [pc, #284]	; (8001444 <main+0x188>)
 8001326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  Mode_TimerHandle = osTimerCreate(osTimer(Mode_Timer), osTimerPeriodic, NULL);
 8001330:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001334:	2200      	movs	r2, #0
 8001336:	2101      	movs	r1, #1
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fdaf 	bl	8004e9c <osTimerCreate>
 800133e:	4603      	mov	r3, r0
 8001340:	4a41      	ldr	r2, [pc, #260]	; (8001448 <main+0x18c>)
 8001342:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Tx_Queue */
  osMessageQDef(Tx_Queue, 5, uint8_t);
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <main+0x190>)
 8001346:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800134a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800134c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Tx_QueueHandle = osMessageCreate(osMessageQ(Tx_Queue), NULL);
 8001350:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fece 	bl	80050f8 <osMessageCreate>
 800135c:	4603      	mov	r3, r0
 800135e:	4a3c      	ldr	r2, [pc, #240]	; (8001450 <main+0x194>)
 8001360:	6013      	str	r3, [r2, #0]

  /* definition and creation of Rx_Queue */
  osMessageQDef(Rx_Queue, 10, uint8_t);
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <main+0x198>)
 8001364:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001368:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Rx_QueueHandle = osMessageCreate(osMessageQ(Rx_Queue), NULL);
 800136e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f003 febf 	bl	80050f8 <osMessageCreate>
 800137a:	4603      	mov	r3, r0
 800137c:	4a36      	ldr	r2, [pc, #216]	; (8001458 <main+0x19c>)
 800137e:	6013      	str	r3, [r2, #0]

  /* definition and creation of US_Queue */
  osMessageQDef(US_Queue, 3, uint8_t);
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <main+0x1a0>)
 8001382:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  US_QueueHandle = osMessageCreate(osMessageQ(US_Queue), NULL);
 800138c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f003 feb0 	bl	80050f8 <osMessageCreate>
 8001398:	4603      	mov	r3, r0
 800139a:	4a31      	ldr	r2, [pc, #196]	; (8001460 <main+0x1a4>)
 800139c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <main+0x1a8>)
 80013a0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80013a4:	461d      	mov	r5, r3
 80013a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80013b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fd02 	bl	8004dc2 <osThreadCreate>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a29      	ldr	r2, [pc, #164]	; (8001468 <main+0x1ac>)
 80013c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Init_System */
  osThreadDef(Init_System, Init_Task, osPriorityHigh, 0, 128);
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <main+0x1b0>)
 80013c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013ca:	461d      	mov	r5, r3
 80013cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Init_SystemHandle = osThreadCreate(osThread(Init_System), NULL);
 80013d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fcef 	bl	8004dc2 <osThreadCreate>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a22      	ldr	r2, [pc, #136]	; (8001470 <main+0x1b4>)
 80013e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, DataGathering_Task, osPriorityAboveNormal, 0, 128);
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <main+0x1b8>)
 80013ec:	f107 041c 	add.w	r4, r7, #28
 80013f0:	461d      	mov	r5, r3
 80013f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fcdc 	bl	8004dc2 <osThreadCreate>
 800140a:	4603      	mov	r3, r0
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <main+0x1bc>)
 800140e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, VehicleComm_Task, osPriorityNormal, 0, 128);
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <main+0x1c0>)
 8001412:	463c      	mov	r4, r7
 8001414:	461d      	mov	r5, r3
 8001416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800141e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001422:	463b      	mov	r3, r7
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fccb 	bl	8004dc2 <osThreadCreate>
 800142c:	4603      	mov	r3, r0
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <main+0x1c4>)
 8001430:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001432:	f003 fcbf 	bl	8004db4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001436:	e7fe      	b.n	8001436 <main+0x17a>
 8001438:	20000988 	.word	0x20000988
 800143c:	08001b11 	.word	0x08001b11
 8001440:	20000980 	.word	0x20000980
 8001444:	08001db9 	.word	0x08001db9
 8001448:	20000984 	.word	0x20000984
 800144c:	08008208 	.word	0x08008208
 8001450:	20000974 	.word	0x20000974
 8001454:	08008218 	.word	0x08008218
 8001458:	20000978 	.word	0x20000978
 800145c:	08008228 	.word	0x08008228
 8001460:	2000097c 	.word	0x2000097c
 8001464:	08008244 	.word	0x08008244
 8001468:	20000964 	.word	0x20000964
 800146c:	0800826c 	.word	0x0800826c
 8001470:	20000968 	.word	0x20000968
 8001474:	08008294 	.word	0x08008294
 8001478:	2000096c 	.word	0x2000096c
 800147c:	080082bc 	.word	0x080082bc
 8001480:	20000970 	.word	0x20000970

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b090      	sub	sp, #64	; 0x40
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	2228      	movs	r2, #40	; 0x28
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f006 fe60 	bl	8008158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014aa:	2301      	movs	r3, #1
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ae:	2310      	movs	r3, #16
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 f98a 	bl	80027d4 <HAL_RCC_OscConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014c6:	f000 fcb3 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ca:	230f      	movs	r3, #15
 80014cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fbf8 	bl	8002cd8 <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014ee:	f000 fc9f 	bl	8001e30 <Error_Handler>
  }
}
 80014f2:	bf00      	nop
 80014f4:	3740      	adds	r7, #64	; 0x40
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_SPI1_Init+0x64>)
 8001502:	4a18      	ldr	r2, [pc, #96]	; (8001564 <MX_SPI1_Init+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_SPI1_Init+0x64>)
 8001508:	f44f 7282 	mov.w	r2, #260	; 0x104
 800150c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_SPI1_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_SPI1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_SPI1_Init+0x64>)
 8001528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_SPI1_Init+0x64>)
 8001530:	2208      	movs	r2, #8
 8001532:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_SPI1_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_SPI1_Init+0x64>)
 8001548:	220a      	movs	r2, #10
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_SPI1_Init+0x64>)
 800154e:	f001 fd51 	bl	8002ff4 <HAL_SPI_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001558:	f000 fc6a 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200007a4 	.word	0x200007a4
 8001564:	40013000 	.word	0x40013000

08001568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b096      	sub	sp, #88	; 0x58
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2220      	movs	r2, #32
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f006 fdd9 	bl	8008158 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015a8:	4a3f      	ldr	r2, [pc, #252]	; (80016a8 <MX_TIM1_Init+0x140>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80015ac:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 80015b8:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015d2:	4834      	ldr	r0, [pc, #208]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015d4:	f002 fa96 	bl	8003b04 <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015de:	f000 fc27 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ec:	4619      	mov	r1, r3
 80015ee:	482d      	ldr	r0, [pc, #180]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015f0:	f002 fcde 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015fa:	f000 fc19 	bl	8001e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015fe:	4829      	ldr	r0, [pc, #164]	; (80016a4 <MX_TIM1_Init+0x13c>)
 8001600:	f002 fb1a 	bl	8003c38 <HAL_TIM_PWM_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800160a:	f000 fc11 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001616:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800161a:	4619      	mov	r1, r3
 800161c:	4821      	ldr	r0, [pc, #132]	; (80016a4 <MX_TIM1_Init+0x13c>)
 800161e:	f003 f833 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001628:	f000 fc02 	bl	8001e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162c:	2360      	movs	r3, #96	; 0x60
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 8001630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800163a:	2300      	movs	r3, #0
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_TIM1_Init+0x13c>)
 8001654:	f002 fbea 	bl	8003e2c <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800165e:	f000 fbe7 	bl	8001e30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM1_Init+0x13c>)
 8001686:	f003 f85d 	bl	8004744 <HAL_TIMEx_ConfigBreakDeadTime>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001690:	f000 fbce 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM1_Init+0x13c>)
 8001696:	f000 fc87 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3758      	adds	r7, #88	; 0x58
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200007fc 	.word	0x200007fc
 80016a8:	40012c00 	.word	0x40012c00

080016ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM2_Init+0x94>)
 80016ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_TIM2_Init+0x94>)
 80016d2:	2207      	movs	r2, #7
 80016d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM2_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM2_Init+0x94>)
 80016de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_TIM2_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_TIM2_Init+0x94>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f0:	4813      	ldr	r0, [pc, #76]	; (8001740 <MX_TIM2_Init+0x94>)
 80016f2:	f002 fa07 	bl	8003b04 <HAL_TIM_Base_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016fc:	f000 fb98 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM2_Init+0x94>)
 800170e:	f002 fc4f 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001718:	f000 fb8a 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001724:	463b      	mov	r3, r7
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_TIM2_Init+0x94>)
 800172a:	f002 ffad 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001734:	f000 fb7c 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000844 	.word	0x20000844

08001744 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM3_Init+0x94>)
 8001762:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <MX_TIM3_Init+0x98>)
 8001764:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM3_Init+0x94>)
 8001768:	2220      	movs	r2, #32
 800176a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM3_Init+0x94>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_TIM3_Init+0x94>)
 8001774:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001778:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_TIM3_Init+0x94>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_TIM3_Init+0x94>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <MX_TIM3_Init+0x94>)
 8001788:	f002 f9bc 	bl	8003b04 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001792:	f000 fb4d 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	4619      	mov	r1, r3
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_TIM3_Init+0x94>)
 80017a4:	f002 fc04 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80017ae:	f000 fb3f 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <MX_TIM3_Init+0x94>)
 80017c0:	f002 ff62 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017ca:	f000 fb31 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000088c 	.word	0x2000088c
 80017dc:	40000400 	.word	0x40000400

080017e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USART1_UART_Init+0x4c>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_USART1_UART_Init+0x50>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_USART1_UART_Init+0x4c>)
 80017ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USART1_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USART1_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USART1_UART_Init+0x4c>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USART1_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USART1_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USART1_UART_Init+0x4c>)
 8001818:	f002 ffe5 	bl	80047e6 <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001822:	f000 fb05 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200008d4 	.word	0x200008d4
 8001830:	40013800 	.word	0x40013800

08001834 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_USART3_UART_Init+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <MX_USART3_UART_Init+0x50>)
 800183c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_USART3_UART_Init+0x4c>)
 8001840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001844:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_USART3_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_USART3_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_USART3_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_USART3_UART_Init+0x4c>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_USART3_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_USART3_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_USART3_UART_Init+0x4c>)
 800186c:	f002 ffbb 	bl	80047e6 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001876:	f000 fadb 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000091c 	.word	0x2000091c
 8001884:	40004800 	.word	0x40004800

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <MX_GPIO_Init+0xec>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a34      	ldr	r2, [pc, #208]	; (8001974 <MX_GPIO_Init+0xec>)
 80018a2:	f043 0320 	orr.w	r3, r3, #32
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b32      	ldr	r3, [pc, #200]	; (8001974 <MX_GPIO_Init+0xec>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <MX_GPIO_Init+0xec>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a2e      	ldr	r2, [pc, #184]	; (8001974 <MX_GPIO_Init+0xec>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <MX_GPIO_Init+0xec>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <MX_GPIO_Init+0xec>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a28      	ldr	r2, [pc, #160]	; (8001974 <MX_GPIO_Init+0xec>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <MX_GPIO_Init+0xec>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, US1_Trig_Pin|NRF_CE_Pin|NRF_CSN_Pin|IN1_Pin
 80018e4:	2200      	movs	r2, #0
 80018e6:	f649 0107 	movw	r1, #38919	; 0x9807
 80018ea:	4823      	ldr	r0, [pc, #140]	; (8001978 <MX_GPIO_Init+0xf0>)
 80018ec:	f000 ff59 	bl	80027a2 <HAL_GPIO_WritePin>
                          |IN2_Pin|US4_Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US2_Trig_Pin|EN2_Pin|US3_Trig_Pin|IN3_Pin
 80018f0:	2200      	movs	r2, #0
 80018f2:	f243 3101 	movw	r1, #13057	; 0x3301
 80018f6:	4821      	ldr	r0, [pc, #132]	; (800197c <MX_GPIO_Init+0xf4>)
 80018f8:	f000 ff53 	bl	80027a2 <HAL_GPIO_WritePin>
                          |IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : US1_Trig_Pin NRF_CE_Pin NRF_CSN_Pin IN1_Pin
                           IN2_Pin US4_Trig_Pin */
  GPIO_InitStruct.Pin = US1_Trig_Pin|NRF_CE_Pin|NRF_CSN_Pin|IN1_Pin
 80018fc:	f649 0307 	movw	r3, #38919	; 0x9807
 8001900:	613b      	str	r3, [r7, #16]
                          |IN2_Pin|US4_Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2302      	movs	r3, #2
 800190c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4619      	mov	r1, r3
 8001914:	4818      	ldr	r0, [pc, #96]	; (8001978 <MX_GPIO_Init+0xf0>)
 8001916:	f000 fda9 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : Emergency_switch_Pin US1_ECHO_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin|US1_ECHO_Pin;
 800191a:	2318      	movs	r3, #24
 800191c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	4812      	ldr	r0, [pc, #72]	; (8001978 <MX_GPIO_Init+0xf0>)
 800192e:	f000 fd9d 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : US2_Trig_Pin EN2_Pin US3_Trig_Pin IN3_Pin
                           IN4_Pin */
  GPIO_InitStruct.Pin = US2_Trig_Pin|EN2_Pin|US3_Trig_Pin|IN3_Pin
 8001932:	f243 3301 	movw	r3, #13057	; 0x3301
 8001936:	613b      	str	r3, [r7, #16]
                          |IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2302      	movs	r3, #2
 8001942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_GPIO_Init+0xf4>)
 800194c:	f000 fd8e 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : US2_ECHO_Pin US3_ECHO_Pin US4_ECHO_Pin */
  GPIO_InitStruct.Pin = US2_ECHO_Pin|US3_ECHO_Pin|US4_ECHO_Pin;
 8001950:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_GPIO_Init+0xf4>)
 8001966:	f000 fd81 	bl	800246c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800196a:	bf00      	nop
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	40010800 	.word	0x40010800
 800197c:	40010c00 	.word	0x40010c00

08001980 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001988:	2001      	movs	r0, #1
 800198a:	f003 fa72 	bl	8004e72 <osDelay>
 800198e:	e7fb      	b.n	8001988 <StartDefaultTask+0x8>

08001990 <Init_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Init_Task */
void Init_Task(void const * argument)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Init_Task */
  /* Infinite loop */
  for(;;)
  {
	  	HAL_voidUltraSonicInit() ;
 8001998:	f7ff fb7a 	bl	8001090 <HAL_voidUltraSonicInit>
	    NRF_voidInit();
 800199c:	f7ff f9be 	bl	8000d1c <NRF_voidInit>
	    NRF_voidTransmitterMode (TxAddress ,10 );
 80019a0:	210a      	movs	r1, #10
 80019a2:	4819      	ldr	r0, [pc, #100]	; (8001a08 <Init_Task+0x78>)
 80019a4:	f7ff f9de 	bl	8000d64 <NRF_voidTransmitterMode>
	    GSM_VidInit();
 80019a8:	f7fe ffc4 	bl	8000934 <GSM_VidInit>
	    GSM_VidCheckConnection();
 80019ac:	f7fe ffe4 	bl	8000978 <GSM_VidCheckConnection>
	    HAL_UART_Transmit(&huart1,'R',1,100); //indicate initialization finished
 80019b0:	2364      	movs	r3, #100	; 0x64
 80019b2:	2201      	movs	r2, #1
 80019b4:	2152      	movs	r1, #82	; 0x52
 80019b6:	4815      	ldr	r0, [pc, #84]	; (8001a0c <Init_Task+0x7c>)
 80019b8:	f002 ff65 	bl	8004886 <HAL_UART_Transmit>

	    /*Emergency mode Robbery*/
	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 80019bc:	e006      	b.n	80019cc <Init_Task+0x3c>
	    {
	    	System_Mode = Emergency_Mode;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <Init_Task+0x80>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	701a      	strb	r2, [r3, #0]
	    	GSM_VidSendSMS((uint8_t*)"01003676020", (uint8_t*)"Robbery is Happening");
 80019c4:	4913      	ldr	r1, [pc, #76]	; (8001a14 <Init_Task+0x84>)
 80019c6:	4814      	ldr	r0, [pc, #80]	; (8001a18 <Init_Task+0x88>)
 80019c8:	f7ff f858 	bl	8000a7c <GSM_VidSendSMS>
	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 80019cc:	2108      	movs	r1, #8
 80019ce:	4813      	ldr	r0, [pc, #76]	; (8001a1c <Init_Task+0x8c>)
 80019d0:	f000 fed0 	bl	8002774 <HAL_GPIO_ReadPin>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f1      	bne.n	80019be <Init_Task+0x2e>
	    }
	    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 80019da:	2201      	movs	r2, #1
 80019dc:	4910      	ldr	r1, [pc, #64]	; (8001a20 <Init_Task+0x90>)
 80019de:	480b      	ldr	r0, [pc, #44]	; (8001a0c <Init_Task+0x7c>)
 80019e0:	f003 f866 	bl	8004ab0 <HAL_UART_Receive_IT>

	    osTimerStart(ActionDecision_TimerHandle, 1.6);
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <Init_Task+0x94>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fa8a 	bl	8004f04 <osTimerStart>
	    osTimerStart(Mode_TimerHandle, 1.3);
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <Init_Task+0x98>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fa84 	bl	8004f04 <osTimerStart>
	    osThreadTerminate(Init_SystemHandle); //delete task
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <Init_Task+0x9c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 fa2a 	bl	8004e5a <osThreadTerminate>
	  	HAL_voidUltraSonicInit() ;
 8001a06:	e7c7      	b.n	8001998 <Init_Task+0x8>
 8001a08:	20000060 	.word	0x20000060
 8001a0c:	200008d4 	.word	0x200008d4
 8001a10:	20000054 	.word	0x20000054
 8001a14:	080082d8 	.word	0x080082d8
 8001a18:	080082f0 	.word	0x080082f0
 8001a1c:	40010800 	.word	0x40010800
 8001a20:	20000990 	.word	0x20000990
 8001a24:	20000980 	.word	0x20000980
 8001a28:	20000984 	.word	0x20000984
 8001a2c:	20000968 	.word	0x20000968

08001a30 <DataGathering_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataGathering_Task */
void DataGathering_Task(void const * argument)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataGathering_Task */
  /* Infinite loop */
  for(;;)
  {
	  //read 4 US and insert data into Tx queue
	  HAL_voidUltraSonic (US_ARR);
 8001a38:	4811      	ldr	r0, [pc, #68]	; (8001a80 <DataGathering_Task+0x50>)
 8001a3a:	f7ff fb35 	bl	80010a8 <HAL_voidUltraSonic>
	  for(uint8_t i = 0 ; i < 4 ; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e00d      	b.n	8001a60 <DataGathering_Task+0x30>
	  {
		  xQueueSend( Tx_QueueHandle, &US_ARR[i] , portMAX_DELAY );
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <DataGathering_Task+0x54>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <DataGathering_Task+0x50>)
 8001a4e:	1899      	adds	r1, r3, r2
 8001a50:	2300      	movs	r3, #0
 8001a52:	f04f 32ff 	mov.w	r2, #4294967295
 8001a56:	f003 fd63 	bl	8005520 <xQueueGenericSend>
	  for(uint8_t i = 0 ; i < 4 ; i++)
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d9ee      	bls.n	8001a44 <DataGathering_Task+0x14>
	  }

	  //insert BM reading into Tx queue
	  xQueueSend( Tx_QueueHandle, &rxData , portMAX_DELAY );
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <DataGathering_Task+0x54>)
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	4905      	ldr	r1, [pc, #20]	; (8001a88 <DataGathering_Task+0x58>)
 8001a72:	f003 fd55 	bl	8005520 <xQueueGenericSend>

    osDelay(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f003 f9fb 	bl	8004e72 <osDelay>
	  HAL_voidUltraSonic (US_ARR);
 8001a7c:	e7dc      	b.n	8001a38 <DataGathering_Task+0x8>
 8001a7e:	bf00      	nop
 8001a80:	20000058 	.word	0x20000058
 8001a84:	20000974 	.word	0x20000974
 8001a88:	20000990 	.word	0x20000990

08001a8c <VehicleComm_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_VehicleComm_Task */
void VehicleComm_Task(void const * argument)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN VehicleComm_Task */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t Rx_data[8];
	  for(uint8_t i = 0 ; i < 8 ; i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]
 8001a98:	e00d      	b.n	8001ab6 <VehicleComm_Task+0x2a>
	  {
		  xQueueReceive(Rx_QueueHandle, &Rx_data[i], portMAX_DELAY);
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <VehicleComm_Task+0x78>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	f107 020c 	add.w	r2, r7, #12
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f003 ff5c 	bl	8005968 <xQueueReceive>
	  for(uint8_t i = 0 ; i < 8 ; i++)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
 8001ab8:	2b07      	cmp	r3, #7
 8001aba:	d9ee      	bls.n	8001a9a <VehicleComm_Task+0xe>
	  }
	  osSemaphoreWait(Mode_SemHandle, osWaitForever);
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <VehicleComm_Task+0x7c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fa93 	bl	8004ff0 <osSemaphoreWait>
	  if(System_Mode == Comm_Mode || System_Mode == Dominant_Mode || System_Mode == Emergency_Mode)
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <VehicleComm_Task+0x80>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <VehicleComm_Task+0x56>
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <VehicleComm_Task+0x80>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d003      	beq.n	8001ae2 <VehicleComm_Task+0x56>
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <VehicleComm_Task+0x80>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d106      	bne.n	8001af0 <VehicleComm_Task+0x64>
	  {
		  NRF_voidSendData (Rx_data, 8 ,NRF_NUMBERS_EXIST  );
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2108      	movs	r1, #8
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f962 	bl	8000db4 <NRF_voidSendData>
	  }
	  osSemaphoreRelease(Mode_SemHandle);
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <VehicleComm_Task+0x7c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fac9 	bl	800508c <osSemaphoreRelease>
    osDelay(2);
 8001afa:	2002      	movs	r0, #2
 8001afc:	f003 f9b9 	bl	8004e72 <osDelay>
  {
 8001b00:	e7c8      	b.n	8001a94 <VehicleComm_Task+0x8>
 8001b02:	bf00      	nop
 8001b04:	20000978 	.word	0x20000978
 8001b08:	20000988 	.word	0x20000988
 8001b0c:	20000054 	.word	0x20000054

08001b10 <ActionDecision_Callback>:
  /* USER CODE END VehicleComm_Task */
}

/* ActionDecision_Callback function */
void ActionDecision_Callback(void const * argument)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ActionDecision_Callback */
	uint16_t US_data[4] , BM , US_Decision;
	 for(uint8_t i = 0 ; i < 4 ; i++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	75fb      	strb	r3, [r7, #23]
 8001b1c:	e00e      	b.n	8001b3c <ActionDecision_Callback+0x2c>
	  {
		 xQueueReceive( Tx_QueueHandle, &US_data[i] , portMAX_DELAY );
 8001b1e:	4b92      	ldr	r3, [pc, #584]	; (8001d68 <ActionDecision_Callback+0x258>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	f107 020c 	add.w	r2, r7, #12
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	4619      	mov	r1, r3
 8001b32:	f003 ff19 	bl	8005968 <xQueueReceive>
	 for(uint8_t i = 0 ; i < 4 ; i++)
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	75fb      	strb	r3, [r7, #23]
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d9ed      	bls.n	8001b1e <ActionDecision_Callback+0xe>
	  }
	 xQueueSend( US_QueueHandle, &US_data[0] , portMAX_DELAY );
 8001b42:	4b8a      	ldr	r3, [pc, #552]	; (8001d6c <ActionDecision_Callback+0x25c>)
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	f107 010c 	add.w	r1, r7, #12
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	f003 fce6 	bl	8005520 <xQueueGenericSend>
	 xQueueSend( US_QueueHandle, &US_data[3] , portMAX_DELAY );
 8001b54:	4b85      	ldr	r3, [pc, #532]	; (8001d6c <ActionDecision_Callback+0x25c>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	1d99      	adds	r1, r3, #6
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	f003 fcdc 	bl	8005520 <xQueueGenericSend>
	 xQueueReceive( Tx_QueueHandle, &BM , portMAX_DELAY );
 8001b68:	4b7f      	ldr	r3, [pc, #508]	; (8001d68 <ActionDecision_Callback+0x258>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f107 010a 	add.w	r1, r7, #10
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fef7 	bl	8005968 <xQueueReceive>
	switch (BM)
 8001b7a:	897b      	ldrh	r3, [r7, #10]
 8001b7c:	3b42      	subs	r3, #66	; 0x42
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d848      	bhi.n	8001c14 <ActionDecision_Callback+0x104>
 8001b82:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <ActionDecision_Callback+0x78>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001bdb 	.word	0x08001bdb
 8001b8c:	08001c15 	.word	0x08001c15
 8001b90:	08001c15 	.word	0x08001c15
 8001b94:	08001c15 	.word	0x08001c15
 8001b98:	08001bcd 	.word	0x08001bcd
 8001b9c:	08001c15 	.word	0x08001c15
 8001ba0:	08001c15 	.word	0x08001c15
 8001ba4:	08001c15 	.word	0x08001c15
 8001ba8:	08001c15 	.word	0x08001c15
 8001bac:	08001c15 	.word	0x08001c15
 8001bb0:	08001bf7 	.word	0x08001bf7
 8001bb4:	08001c15 	.word	0x08001c15
 8001bb8:	08001c15 	.word	0x08001c15
 8001bbc:	08001c15 	.word	0x08001c15
 8001bc0:	08001c05 	.word	0x08001c05
 8001bc4:	08001c15 	.word	0x08001c15
 8001bc8:	08001be9 	.word	0x08001be9
		  	{

		  	case 'F' :
		  		Car_Direction = FORWARD ;
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <ActionDecision_Callback+0x260>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
		  		Car_State = STATE_MOVING ;
 8001bd2:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <ActionDecision_Callback+0x264>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
		  		break ;
 8001bd8:	e01c      	b.n	8001c14 <ActionDecision_Callback+0x104>

		  	case 'B' :
		  		Car_Direction = BACKWARD ;
 8001bda:	4b65      	ldr	r3, [pc, #404]	; (8001d70 <ActionDecision_Callback+0x260>)
 8001bdc:	2202      	movs	r2, #2
 8001bde:	701a      	strb	r2, [r3, #0]
		      	Car_State = STATE_MOVING ;
 8001be0:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <ActionDecision_Callback+0x264>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
		      	break ;
 8001be6:	e015      	b.n	8001c14 <ActionDecision_Callback+0x104>

		  	case 'R' :
		  		Car_Direction = RIGHT ;
 8001be8:	4b61      	ldr	r3, [pc, #388]	; (8001d70 <ActionDecision_Callback+0x260>)
 8001bea:	2203      	movs	r2, #3
 8001bec:	701a      	strb	r2, [r3, #0]
		  		Car_State = STATE_MOVING ;
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <ActionDecision_Callback+0x264>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
		      	break ;
 8001bf4:	e00e      	b.n	8001c14 <ActionDecision_Callback+0x104>

		  	case 'L' :
		  		Car_Direction = LEFT ;
 8001bf6:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <ActionDecision_Callback+0x260>)
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	701a      	strb	r2, [r3, #0]
		  		Car_State = STATE_MOVING ;
 8001bfc:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <ActionDecision_Callback+0x264>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
		      	break ;
 8001c02:	e007      	b.n	8001c14 <ActionDecision_Callback+0x104>

		  	case 'P' :
		  		HAL_voidControlMotors(SPEED_0,STOP) ;
 8001c04:	2100      	movs	r1, #0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7fe fdb0 	bl	800076c <HAL_voidControlMotors>
		  		Car_State = STATE_STOP ;
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <ActionDecision_Callback+0x264>)
 8001c0e:	2202      	movs	r2, #2
 8001c10:	701a      	strb	r2, [r3, #0]
		      	break ;
 8001c12:	bf00      	nop
		  	}
	US_Decision = HAL_UltraSonic_Decision(US_data);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fae3 	bl	80011e4 <HAL_UltraSonic_Decision>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	82bb      	strh	r3, [r7, #20]

	if (US_Decision == 254)
 8001c22:	8abb      	ldrh	r3, [r7, #20]
 8001c24:	2bfe      	cmp	r3, #254	; 0xfe
 8001c26:	d112      	bne.n	8001c4e <ActionDecision_Callback+0x13e>
		{
		    Indication_value = INDICATION_NORMAL ;
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <ActionDecision_Callback+0x268>)
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	701a      	strb	r2, [r3, #0]
			HAL_voidControlMotors(Normal_SPEED,Car_Direction) ;
 8001c2e:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <ActionDecision_Callback+0x260>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	2032      	movs	r0, #50	; 0x32
 8001c36:	f7fe fd99 	bl	800076c <HAL_voidControlMotors>
			Car_Speed = Normal_SPEED ;
 8001c3a:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <ActionDecision_Callback+0x26c>)
 8001c3c:	2232      	movs	r2, #50	; 0x32
 8001c3e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"D",1,100);
 8001c40:	2364      	movs	r3, #100	; 0x64
 8001c42:	2201      	movs	r2, #1
 8001c44:	494e      	ldr	r1, [pc, #312]	; (8001d80 <ActionDecision_Callback+0x270>)
 8001c46:	484f      	ldr	r0, [pc, #316]	; (8001d84 <ActionDecision_Callback+0x274>)
 8001c48:	f002 fe1d 	bl	8004886 <HAL_UART_Transmit>
 8001c4c:	e028      	b.n	8001ca0 <ActionDecision_Callback+0x190>
		}
		else if (US_Decision == STOP)
 8001c4e:	8abb      	ldrh	r3, [r7, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d110      	bne.n	8001c76 <ActionDecision_Callback+0x166>
		{
			Indication_value = INDICATION_OBSTACLE ;
 8001c54:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <ActionDecision_Callback+0x268>)
 8001c56:	2202      	movs	r2, #2
 8001c58:	701a      	strb	r2, [r3, #0]
			HAL_voidControlMotors(SPEED_0,STOP) ;
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7fe fd85 	bl	800076c <HAL_voidControlMotors>
			Car_Speed = SPEED_0 ;
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <ActionDecision_Callback+0x26c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"P",1,100);
 8001c68:	2364      	movs	r3, #100	; 0x64
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4946      	ldr	r1, [pc, #280]	; (8001d88 <ActionDecision_Callback+0x278>)
 8001c6e:	4845      	ldr	r0, [pc, #276]	; (8001d84 <ActionDecision_Callback+0x274>)
 8001c70:	f002 fe09 	bl	8004886 <HAL_UART_Transmit>
 8001c74:	e014      	b.n	8001ca0 <ActionDecision_Callback+0x190>
		}
		else if (US_Decision == SPEED_25)
 8001c76:	8abb      	ldrh	r3, [r7, #20]
 8001c78:	2b19      	cmp	r3, #25
 8001c7a:	d111      	bne.n	8001ca0 <ActionDecision_Callback+0x190>
		{
			Indication_value = INDICATION_TRAFFIC ;
 8001c7c:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <ActionDecision_Callback+0x268>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
			HAL_voidControlMotors(SPEED_25,Car_Direction) ;
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <ActionDecision_Callback+0x260>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4619      	mov	r1, r3
 8001c88:	2019      	movs	r0, #25
 8001c8a:	f7fe fd6f 	bl	800076c <HAL_voidControlMotors>
			Car_Speed = SPEED_25 ;
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <ActionDecision_Callback+0x26c>)
 8001c90:	2219      	movs	r2, #25
 8001c92:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"S",1,100);
 8001c94:	2364      	movs	r3, #100	; 0x64
 8001c96:	2201      	movs	r2, #1
 8001c98:	493c      	ldr	r1, [pc, #240]	; (8001d8c <ActionDecision_Callback+0x27c>)
 8001c9a:	483a      	ldr	r0, [pc, #232]	; (8001d84 <ActionDecision_Callback+0x274>)
 8001c9c:	f002 fdf3 	bl	8004886 <HAL_UART_Transmit>
		}
	/* Update NRF values*/
	Data_Sent[0]	 = Data_States[0]						;
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <ActionDecision_Callback+0x280>)
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <ActionDecision_Callback+0x284>)
 8001ca6:	701a      	strb	r2, [r3, #0]
	Data_Sent[1]	 = Car_Speed							;
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <ActionDecision_Callback+0x26c>)
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <ActionDecision_Callback+0x284>)
 8001cae:	705a      	strb	r2, [r3, #1]
	Data_Sent[2]	 = Data_States[1]						;
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <ActionDecision_Callback+0x280>)
 8001cb2:	785a      	ldrb	r2, [r3, #1]
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <ActionDecision_Callback+0x284>)
 8001cb6:	709a      	strb	r2, [r3, #2]
	Data_Sent[3]	 = Car_Direction						;
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <ActionDecision_Callback+0x260>)
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <ActionDecision_Callback+0x284>)
 8001cbe:	70da      	strb	r2, [r3, #3]
	Data_Sent[4]     = Data_States[2]						;  /* Distance  */
 8001cc0:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <ActionDecision_Callback+0x280>)
 8001cc2:	789a      	ldrb	r2, [r3, #2]
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <ActionDecision_Callback+0x284>)
 8001cc6:	711a      	strb	r2, [r3, #4]
	Data_Sent[5]     = US_data[3]			    			;
 8001cc8:	8a7b      	ldrh	r3, [r7, #18]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <ActionDecision_Callback+0x284>)
 8001cce:	715a      	strb	r2, [r3, #5]
	Data_Sent[6]	 = Data_States[3]						;
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <ActionDecision_Callback+0x280>)
 8001cd2:	78da      	ldrb	r2, [r3, #3]
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <ActionDecision_Callback+0x284>)
 8001cd6:	719a      	strb	r2, [r3, #6]
	Data_Sent[7]	 = Indication_value						;
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <ActionDecision_Callback+0x268>)
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <ActionDecision_Callback+0x284>)
 8001cde:	71da      	strb	r2, [r3, #7]

	xQueueSend( Rx_QueueHandle, &Data_States[0] , portMAX_DELAY );
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <ActionDecision_Callback+0x288>)
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cea:	4929      	ldr	r1, [pc, #164]	; (8001d90 <ActionDecision_Callback+0x280>)
 8001cec:	f003 fc18 	bl	8005520 <xQueueGenericSend>
	xQueueSend( Rx_QueueHandle, &Data_Sent[1] , portMAX_DELAY );
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <ActionDecision_Callback+0x288>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfa:	4928      	ldr	r1, [pc, #160]	; (8001d9c <ActionDecision_Callback+0x28c>)
 8001cfc:	f003 fc10 	bl	8005520 <xQueueGenericSend>
	xQueueSend( Rx_QueueHandle, &Data_States[1] , portMAX_DELAY );
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <ActionDecision_Callback+0x288>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	2300      	movs	r3, #0
 8001d06:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0a:	4925      	ldr	r1, [pc, #148]	; (8001da0 <ActionDecision_Callback+0x290>)
 8001d0c:	f003 fc08 	bl	8005520 <xQueueGenericSend>
	xQueueSend( Rx_QueueHandle, &Data_Sent[3] , portMAX_DELAY );
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <ActionDecision_Callback+0x288>)
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	2300      	movs	r3, #0
 8001d16:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1a:	4922      	ldr	r1, [pc, #136]	; (8001da4 <ActionDecision_Callback+0x294>)
 8001d1c:	f003 fc00 	bl	8005520 <xQueueGenericSend>
	xQueueSend( Rx_QueueHandle, &Data_States[2] , portMAX_DELAY );
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <ActionDecision_Callback+0x288>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	2300      	movs	r3, #0
 8001d26:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2a:	491f      	ldr	r1, [pc, #124]	; (8001da8 <ActionDecision_Callback+0x298>)
 8001d2c:	f003 fbf8 	bl	8005520 <xQueueGenericSend>
	xQueueSend( Rx_QueueHandle, &Data_Sent[5] , portMAX_DELAY );
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <ActionDecision_Callback+0x288>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	2300      	movs	r3, #0
 8001d36:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3a:	491c      	ldr	r1, [pc, #112]	; (8001dac <ActionDecision_Callback+0x29c>)
 8001d3c:	f003 fbf0 	bl	8005520 <xQueueGenericSend>
	xQueueSend( Rx_QueueHandle, &Data_States[3] , portMAX_DELAY );
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <ActionDecision_Callback+0x288>)
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	2300      	movs	r3, #0
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	4919      	ldr	r1, [pc, #100]	; (8001db0 <ActionDecision_Callback+0x2a0>)
 8001d4c:	f003 fbe8 	bl	8005520 <xQueueGenericSend>
	xQueueSend( Rx_QueueHandle, &Data_Sent[7] , portMAX_DELAY );
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <ActionDecision_Callback+0x288>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	2300      	movs	r3, #0
 8001d56:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5a:	4916      	ldr	r1, [pc, #88]	; (8001db4 <ActionDecision_Callback+0x2a4>)
 8001d5c:	f003 fbe0 	bl	8005520 <xQueueGenericSend>
  /* USER CODE END ActionDecision_Callback */
}
 8001d60:	bf00      	nop
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000974 	.word	0x20000974
 8001d6c:	2000097c 	.word	0x2000097c
 8001d70:	2000098d 	.word	0x2000098d
 8001d74:	2000098c 	.word	0x2000098c
 8001d78:	2000098f 	.word	0x2000098f
 8001d7c:	2000098e 	.word	0x2000098e
 8001d80:	080082fc 	.word	0x080082fc
 8001d84:	200008d4 	.word	0x200008d4
 8001d88:	08008300 	.word	0x08008300
 8001d8c:	08008304 	.word	0x08008304
 8001d90:	20000068 	.word	0x20000068
 8001d94:	20000994 	.word	0x20000994
 8001d98:	20000978 	.word	0x20000978
 8001d9c:	20000995 	.word	0x20000995
 8001da0:	20000069 	.word	0x20000069
 8001da4:	20000997 	.word	0x20000997
 8001da8:	2000006a 	.word	0x2000006a
 8001dac:	20000999 	.word	0x20000999
 8001db0:	2000006b 	.word	0x2000006b
 8001db4:	2000099b 	.word	0x2000099b

08001db8 <Mode_Callback>:

/* Mode_Callback function */
void Mode_Callback(void const * argument)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mode_Callback */
	uint8_t US_Forward , US_Backward;
	xQueueReceive( US_QueueHandle, &US_Forward , portMAX_DELAY );
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <Mode_Callback+0x6c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f107 010f 	add.w	r1, r7, #15
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fdcb 	bl	8005968 <xQueueReceive>
	xQueueReceive( US_QueueHandle, &US_Backward , portMAX_DELAY );
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <Mode_Callback+0x6c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f107 010e 	add.w	r1, r7, #14
 8001dda:	f04f 32ff 	mov.w	r2, #4294967295
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 fdc2 	bl	8005968 <xQueueReceive>

	osSemaphoreWait(Mode_SemHandle, osWaitForever);
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <Mode_Callback+0x70>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 f8ff 	bl	8004ff0 <osSemaphoreWait>
	if(US_Backward < 60)
 8001df2:	7bbb      	ldrb	r3, [r7, #14]
 8001df4:	2b3b      	cmp	r3, #59	; 0x3b
 8001df6:	d802      	bhi.n	8001dfe <Mode_Callback+0x46>
	{
		System_Mode = Comm_Mode ;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <Mode_Callback+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
	}

	if(US_Forward <= 10)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	2b0a      	cmp	r3, #10
 8001e02:	d803      	bhi.n	8001e0c <Mode_Callback+0x54>
	{
		System_Mode = Dominant_Mode ;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <Mode_Callback+0x74>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e002      	b.n	8001e12 <Mode_Callback+0x5a>

	}
	else
		System_Mode = Normal_Mode ;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <Mode_Callback+0x74>)
 8001e0e:	2204      	movs	r2, #4
 8001e10:	701a      	strb	r2, [r3, #0]
	osSemaphoreRelease(Mode_SemHandle);
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <Mode_Callback+0x70>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 f938 	bl	800508c <osSemaphoreRelease>
  /* USER CODE END Mode_Callback */
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000097c 	.word	0x2000097c
 8001e28:	20000988 	.word	0x20000988
 8001e2c:	20000054 	.word	0x20000054

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <Error_Handler+0x8>
	...

08001e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_MspInit+0x4c>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_MspInit+0x4c>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6193      	str	r3, [r2, #24]
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_MspInit+0x4c>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_MspInit+0x4c>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_MspInit+0x4c>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_MspInit+0x4c>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	210f      	movs	r1, #15
 8001e76:	f06f 0001 	mvn.w	r0, #1
 8001e7a:	f000 face 	bl	800241a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000

08001e8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_SPI_MspInit+0x88>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d12f      	bne.n	8001f0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_SPI_MspInit+0x8c>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_SPI_MspInit+0x8c>)
 8001eb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_SPI_MspInit+0x8c>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_SPI_MspInit+0x8c>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <HAL_SPI_MspInit+0x8c>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_SPI_MspInit+0x8c>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001edc:	23a0      	movs	r3, #160	; 0xa0
 8001ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4619      	mov	r1, r3
 8001eee:	480b      	ldr	r0, [pc, #44]	; (8001f1c <HAL_SPI_MspInit+0x90>)
 8001ef0:	f000 fabc 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	4619      	mov	r1, r3
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_SPI_MspInit+0x90>)
 8001f08:	f000 fab0 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010800 	.word	0x40010800

08001f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_TIM_Base_MspInit+0x7c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10c      	bne.n	8001f4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <HAL_TIM_Base_MspInit+0x80>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <HAL_TIM_Base_MspInit+0x80>)
 8001f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3c:	6193      	str	r3, [r2, #24]
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_TIM_Base_MspInit+0x80>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f4a:	e022      	b.n	8001f92 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d10c      	bne.n	8001f70 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_TIM_Base_MspInit+0x80>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_TIM_Base_MspInit+0x80>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_TIM_Base_MspInit+0x80>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
}
 8001f6e:	e010      	b.n	8001f92 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <HAL_TIM_Base_MspInit+0x84>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10b      	bne.n	8001f92 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_TIM_Base_MspInit+0x80>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_TIM_Base_MspInit+0x80>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	61d3      	str	r3, [r2, #28]
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_TIM_Base_MspInit+0x80>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_TIM_MspPostInit+0x5c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d118      	bne.n	8001ffa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_TIM_MspPostInit+0x60>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <HAL_TIM_MspPostInit+0x60>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_TIM_MspPostInit+0x60>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EN1_Pin;
 8001fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <HAL_TIM_MspPostInit+0x64>)
 8001ff6:	f000 fa39 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40021000 	.word	0x40021000
 800200c:	40010800 	.word	0x40010800

08002010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a3e      	ldr	r2, [pc, #248]	; (8002124 <HAL_UART_MspInit+0x114>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d13e      	bne.n	80020ae <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002030:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_UART_MspInit+0x118>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a3c      	ldr	r2, [pc, #240]	; (8002128 <HAL_UART_MspInit+0x118>)
 8002036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <HAL_UART_MspInit+0x118>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_UART_MspInit+0x118>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a36      	ldr	r2, [pc, #216]	; (8002128 <HAL_UART_MspInit+0x118>)
 800204e:	f043 0308 	orr.w	r3, r3, #8
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b34      	ldr	r3, [pc, #208]	; (8002128 <HAL_UART_MspInit+0x118>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002060:	2340      	movs	r3, #64	; 0x40
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	482e      	ldr	r0, [pc, #184]	; (800212c <HAL_UART_MspInit+0x11c>)
 8002074:	f000 f9fa 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	4828      	ldr	r0, [pc, #160]	; (800212c <HAL_UART_MspInit+0x11c>)
 800208c:	f000 f9ee 	bl	800246c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_UART_MspInit+0x120>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a6:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_UART_MspInit+0x120>)
 80020a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020aa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ac:	e036      	b.n	800211c <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_UART_MspInit+0x124>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d131      	bne.n	800211c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_UART_MspInit+0x118>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HAL_UART_MspInit+0x118>)
 80020be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c2:	61d3      	str	r3, [r2, #28]
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_UART_MspInit+0x118>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_UART_MspInit+0x118>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a14      	ldr	r2, [pc, #80]	; (8002128 <HAL_UART_MspInit+0x118>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_UART_MspInit+0x118>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	480b      	ldr	r0, [pc, #44]	; (800212c <HAL_UART_MspInit+0x11c>)
 80020fe:	f000 f9b5 	bl	800246c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	4619      	mov	r1, r3
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_UART_MspInit+0x11c>)
 8002118:	f000 f9a8 	bl	800246c <HAL_GPIO_Init>
}
 800211c:	bf00      	nop
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40013800 	.word	0x40013800
 8002128:	40021000 	.word	0x40021000
 800212c:	40010c00 	.word	0x40010c00
 8002130:	40010000 	.word	0x40010000
 8002134:	40004800 	.word	0x40004800

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
	...

08002170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002170:	f7ff fff7 	bl	8002162 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002174:	480b      	ldr	r0, [pc, #44]	; (80021a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002176:	490c      	ldr	r1, [pc, #48]	; (80021a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002178:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800218c:	4c09      	ldr	r4, [pc, #36]	; (80021b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219a:	f005 ffe5 	bl	8008168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219e:	f7ff f88d 	bl	80012bc <main>
  bx lr
 80021a2:	4770      	bx	lr
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80021ac:	08008358 	.word	0x08008358
  ldr r2, =_sbss
 80021b0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80021b4:	20001828 	.word	0x20001828

080021b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC1_2_IRQHandler>
	...

080021bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_Init+0x28>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_Init+0x28>)
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 f919 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fe30 	bl	8001e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f923 	bl	8002452 <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 f8f9 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	2000006c 	.word	0x2000006c
 8002240:	20000074 	.word	0x20000074
 8002244:	20000070 	.word	0x20000070

08002248 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b02      	ldr	r3, [pc, #8]	; (8002258 <HAL_GetTick+0x10>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	2000099c 	.word	0x2000099c

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff fff0 	bl	8002248 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffe0 	bl	8002248 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000074 	.word	0x20000074

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff90 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff49 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff5e 	bl	80022ec <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff90 	bl	800235c <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5f 	bl	8002308 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffb0 	bl	80023c0 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b08b      	sub	sp, #44	; 0x2c
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247e:	e169      	b.n	8002754 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002480:	2201      	movs	r2, #1
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 8158 	bne.w	800274e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4a9a      	ldr	r2, [pc, #616]	; (800270c <HAL_GPIO_Init+0x2a0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d05e      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024a8:	4a98      	ldr	r2, [pc, #608]	; (800270c <HAL_GPIO_Init+0x2a0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d875      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024ae:	4a98      	ldr	r2, [pc, #608]	; (8002710 <HAL_GPIO_Init+0x2a4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d058      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024b4:	4a96      	ldr	r2, [pc, #600]	; (8002710 <HAL_GPIO_Init+0x2a4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d86f      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024ba:	4a96      	ldr	r2, [pc, #600]	; (8002714 <HAL_GPIO_Init+0x2a8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d052      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024c0:	4a94      	ldr	r2, [pc, #592]	; (8002714 <HAL_GPIO_Init+0x2a8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d869      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024c6:	4a94      	ldr	r2, [pc, #592]	; (8002718 <HAL_GPIO_Init+0x2ac>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d04c      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024cc:	4a92      	ldr	r2, [pc, #584]	; (8002718 <HAL_GPIO_Init+0x2ac>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d863      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024d2:	4a92      	ldr	r2, [pc, #584]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d046      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024d8:	4a90      	ldr	r2, [pc, #576]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d85d      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024de:	2b12      	cmp	r3, #18
 80024e0:	d82a      	bhi.n	8002538 <HAL_GPIO_Init+0xcc>
 80024e2:	2b12      	cmp	r3, #18
 80024e4:	d859      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <HAL_GPIO_Init+0x80>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	08002567 	.word	0x08002567
 80024f0:	08002541 	.word	0x08002541
 80024f4:	08002553 	.word	0x08002553
 80024f8:	08002595 	.word	0x08002595
 80024fc:	0800259b 	.word	0x0800259b
 8002500:	0800259b 	.word	0x0800259b
 8002504:	0800259b 	.word	0x0800259b
 8002508:	0800259b 	.word	0x0800259b
 800250c:	0800259b 	.word	0x0800259b
 8002510:	0800259b 	.word	0x0800259b
 8002514:	0800259b 	.word	0x0800259b
 8002518:	0800259b 	.word	0x0800259b
 800251c:	0800259b 	.word	0x0800259b
 8002520:	0800259b 	.word	0x0800259b
 8002524:	0800259b 	.word	0x0800259b
 8002528:	0800259b 	.word	0x0800259b
 800252c:	0800259b 	.word	0x0800259b
 8002530:	08002549 	.word	0x08002549
 8002534:	0800255d 	.word	0x0800255d
 8002538:	4a79      	ldr	r2, [pc, #484]	; (8002720 <HAL_GPIO_Init+0x2b4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800253e:	e02c      	b.n	800259a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	623b      	str	r3, [r7, #32]
          break;
 8002546:	e029      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	3304      	adds	r3, #4
 800254e:	623b      	str	r3, [r7, #32]
          break;
 8002550:	e024      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	3308      	adds	r3, #8
 8002558:	623b      	str	r3, [r7, #32]
          break;
 800255a:	e01f      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	330c      	adds	r3, #12
 8002562:	623b      	str	r3, [r7, #32]
          break;
 8002564:	e01a      	b.n	800259c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800256e:	2304      	movs	r3, #4
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e013      	b.n	800259c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800257c:	2308      	movs	r3, #8
 800257e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	611a      	str	r2, [r3, #16]
          break;
 8002586:	e009      	b.n	800259c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002588:	2308      	movs	r3, #8
 800258a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	615a      	str	r2, [r3, #20]
          break;
 8002592:	e003      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
          break;
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x130>
          break;
 800259a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	d801      	bhi.n	80025a6 <HAL_GPIO_Init+0x13a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	e001      	b.n	80025aa <HAL_GPIO_Init+0x13e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2bff      	cmp	r3, #255	; 0xff
 80025b0:	d802      	bhi.n	80025b8 <HAL_GPIO_Init+0x14c>
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0x152>
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	3b08      	subs	r3, #8
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	210f      	movs	r1, #15
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	6a39      	ldr	r1, [r7, #32]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	431a      	orrs	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80b1 	beq.w	800274e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025ec:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_GPIO_Init+0x2b8>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_GPIO_Init+0x2b8>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <HAL_GPIO_Init+0x2b8>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002604:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_GPIO_Init+0x2bc>)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a40      	ldr	r2, [pc, #256]	; (800272c <HAL_GPIO_Init+0x2c0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <HAL_GPIO_Init+0x1ec>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3f      	ldr	r2, [pc, #252]	; (8002730 <HAL_GPIO_Init+0x2c4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00d      	beq.n	8002654 <HAL_GPIO_Init+0x1e8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3e      	ldr	r2, [pc, #248]	; (8002734 <HAL_GPIO_Init+0x2c8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <HAL_GPIO_Init+0x1e4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a3d      	ldr	r2, [pc, #244]	; (8002738 <HAL_GPIO_Init+0x2cc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d101      	bne.n	800264c <HAL_GPIO_Init+0x1e0>
 8002648:	2303      	movs	r3, #3
 800264a:	e006      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 800264c:	2304      	movs	r3, #4
 800264e:	e004      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 8002650:	2302      	movs	r3, #2
 8002652:	e002      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 8002658:	2300      	movs	r3, #0
 800265a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265c:	f002 0203 	and.w	r2, r2, #3
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	4093      	lsls	r3, r2
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800266a:	492f      	ldr	r1, [pc, #188]	; (8002728 <HAL_GPIO_Init+0x2bc>)
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	492c      	ldr	r1, [pc, #176]	; (800273c <HAL_GPIO_Init+0x2d0>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	43db      	mvns	r3, r3
 800269a:	4928      	ldr	r1, [pc, #160]	; (800273c <HAL_GPIO_Init+0x2d0>)
 800269c:	4013      	ands	r3, r2
 800269e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	4922      	ldr	r1, [pc, #136]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60cb      	str	r3, [r1, #12]
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	491e      	ldr	r1, [pc, #120]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4918      	ldr	r1, [pc, #96]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	4914      	ldr	r1, [pc, #80]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d021      	beq.n	8002740 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e021      	b.n	800274e <HAL_GPIO_Init+0x2e2>
 800270a:	bf00      	nop
 800270c:	10320000 	.word	0x10320000
 8002710:	10310000 	.word	0x10310000
 8002714:	10220000 	.word	0x10220000
 8002718:	10210000 	.word	0x10210000
 800271c:	10120000 	.word	0x10120000
 8002720:	10110000 	.word	0x10110000
 8002724:	40021000 	.word	0x40021000
 8002728:	40010000 	.word	0x40010000
 800272c:	40010800 	.word	0x40010800
 8002730:	40010c00 	.word	0x40010c00
 8002734:	40011000 	.word	0x40011000
 8002738:	40011400 	.word	0x40011400
 800273c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	43db      	mvns	r3, r3
 8002748:	4909      	ldr	r1, [pc, #36]	; (8002770 <HAL_GPIO_Init+0x304>)
 800274a:	4013      	ands	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	3301      	adds	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	f47f ae8e 	bne.w	8002480 <HAL_GPIO_Init+0x14>
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	372c      	adds	r7, #44	; 0x2c
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e001      	b.n	8002796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	807b      	strh	r3, [r7, #2]
 80027ae:	4613      	mov	r3, r2
 80027b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b2:	787b      	ldrb	r3, [r7, #1]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b8:	887a      	ldrh	r2, [r7, #2]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027be:	e003      	b.n	80027c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	041a      	lsls	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	611a      	str	r2, [r3, #16]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e272      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8087 	beq.w	8002902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f4:	4b92      	ldr	r3, [pc, #584]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d00c      	beq.n	800281a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002800:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d112      	bne.n	8002832 <HAL_RCC_OscConfig+0x5e>
 800280c:	4b8c      	ldr	r3, [pc, #560]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d10b      	bne.n	8002832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281a:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d06c      	beq.n	8002900 <HAL_RCC_OscConfig+0x12c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d168      	bne.n	8002900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e24c      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x76>
 800283c:	4b80      	ldr	r3, [pc, #512]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7f      	ldr	r2, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e02e      	b.n	80028a8 <HAL_RCC_OscConfig+0xd4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x98>
 8002852:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7a      	ldr	r2, [pc, #488]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a77      	ldr	r2, [pc, #476]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xd4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0xbc>
 8002876:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a71      	ldr	r2, [pc, #452]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xd4>
 8002890:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6a      	ldr	r2, [pc, #424]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a67      	ldr	r2, [pc, #412]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff fcca 	bl	8002248 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7ff fcc6 	bl	8002248 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e200      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe4>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fcb6 	bl	8002248 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff fcb2 	bl	8002248 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1ec      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x10c>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d063      	beq.n	80029d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x18c>
 8002926:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x176>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e1c0      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4939      	ldr	r1, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	e03a      	b.n	80029d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x270>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff fc6b 	bl	8002248 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7ff fc67 	bl	8002248 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1a1      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4927      	ldr	r1, [pc, #156]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_RCC_OscConfig+0x270>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff fc4a 	bl	8002248 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7ff fc46 	bl	8002248 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e180      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d03a      	beq.n	8002a58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d019      	beq.n	8002a1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_RCC_OscConfig+0x274>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f0:	f7ff fc2a 	bl	8002248 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff fc26 	bl	8002248 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e160      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a16:	2001      	movs	r0, #1
 8002a18:	f000 face 	bl	8002fb8 <RCC_Delay>
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7ff fc10 	bl	8002248 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2a:	e00f      	b.n	8002a4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7ff fc0c 	bl	8002248 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d908      	bls.n	8002a4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e146      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	42420000 	.word	0x42420000
 8002a48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e9      	bne.n	8002a2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80a6 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a87      	ldr	r2, [pc, #540]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	61d3      	str	r3, [r2, #28]
 8002a82:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d118      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7e      	ldr	r2, [pc, #504]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7ff fbcd 	bl	8002248 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7ff fbc9 	bl	8002248 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b64      	cmp	r3, #100	; 0x64
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e103      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	4b75      	ldr	r3, [pc, #468]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x312>
 8002ad8:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6213      	str	r3, [r2, #32]
 8002ae4:	e02d      	b.n	8002b42 <HAL_RCC_OscConfig+0x36e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x334>
 8002aee:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a69      	ldr	r2, [pc, #420]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a66      	ldr	r2, [pc, #408]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
 8002b06:	e01c      	b.n	8002b42 <HAL_RCC_OscConfig+0x36e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCC_OscConfig+0x356>
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6213      	str	r3, [r2, #32]
 8002b1c:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a5d      	ldr	r2, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e00b      	b.n	8002b42 <HAL_RCC_OscConfig+0x36e>
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a5a      	ldr	r2, [pc, #360]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6213      	str	r3, [r2, #32]
 8002b36:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a57      	ldr	r2, [pc, #348]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d015      	beq.n	8002b76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7ff fb7d 	bl	8002248 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7ff fb79 	bl	8002248 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0b1      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ee      	beq.n	8002b52 <HAL_RCC_OscConfig+0x37e>
 8002b74:	e014      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7ff fb67 	bl	8002248 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7ff fb63 	bl	8002248 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e09b      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ee      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a3b      	ldr	r2, [pc, #236]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8087 	beq.w	8002cca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bbc:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d061      	beq.n	8002c8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d146      	bne.n	8002c5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCC_OscConfig+0x4cc>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7ff fb37 	bl	8002248 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7ff fb33 	bl	8002248 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e06d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d108      	bne.n	8002c18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4921      	ldr	r1, [pc, #132]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c18:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a19      	ldr	r1, [r3, #32]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	491b      	ldr	r1, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x4cc>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7ff fb07 	bl	8002248 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7ff fb03 	bl	8002248 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e03d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x46a>
 8002c5c:	e035      	b.n	8002cca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff faf0 	bl	8002248 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7ff faec 	bl	8002248 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e026      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x498>
 8002c8a:	e01e      	b.n	8002cca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e019      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x500>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0d0      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d910      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b67      	ldr	r3, [pc, #412]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4965      	ldr	r1, [pc, #404]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	494d      	ldr	r1, [pc, #308]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d040      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d115      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e073      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06b      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f023 0203 	bic.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4936      	ldr	r1, [pc, #216]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc8:	f7ff fa3e 	bl	8002248 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7ff fa3a 	bl	8002248 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e053      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 020c 	and.w	r2, r3, #12
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1eb      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d210      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 0207 	bic.w	r2, r3, #7
 8002e0e:	4922      	ldr	r1, [pc, #136]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e032      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4916      	ldr	r1, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490e      	ldr	r1, [pc, #56]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f821 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490a      	ldr	r1, [pc, #40]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f9ae 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08008324 	.word	0x08008324
 8002ea4:	2000006c 	.word	0x2000006c
 8002ea8:	20000070 	.word	0x20000070

08002eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x30>
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eda:	e027      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ede:	613b      	str	r3, [r7, #16]
      break;
 8002ee0:	e027      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d010      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0c5b      	lsrs	r3, r3, #17
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f0e:	fb03 f202 	mul.w	r2, r3, r2
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e004      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	613b      	str	r3, [r7, #16]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f2e:	613b      	str	r3, [r7, #16]
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	693b      	ldr	r3, [r7, #16]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	007a1200 	.word	0x007a1200
 8002f48:	0800833c 	.word	0x0800833c
 8002f4c:	0800834c 	.word	0x0800834c
 8002f50:	003d0900 	.word	0x003d0900

08002f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	2000006c 	.word	0x2000006c

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f6c:	f7ff fff2 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08008334 	.word	0x08008334

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f94:	f7ff ffde 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	0adb      	lsrs	r3, r3, #11
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08008334 	.word	0x08008334

08002fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <RCC_Delay+0x34>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <RCC_Delay+0x38>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0a5b      	lsrs	r3, r3, #9
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fd4:	bf00      	nop
  }
  while (Delay --);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1e5a      	subs	r2, r3, #1
 8002fda:	60fa      	str	r2, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f9      	bne.n	8002fd4 <RCC_Delay+0x1c>
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	2000006c 	.word	0x2000006c
 8002ff0:	10624dd3 	.word	0x10624dd3

08002ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e076      	b.n	80030f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003016:	d009      	beq.n	800302c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
 800301e:	e005      	b.n	800302c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe ff20 	bl	8001e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003062:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	ea42 0103 	orr.w	r1, r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	0c1a      	lsrs	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f002 0204 	and.w	r2, r2, #4
 80030d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_SPI_Transmit+0x22>
 800311a:	2302      	movs	r3, #2
 800311c:	e12d      	b.n	800337a <HAL_SPI_Transmit+0x27e>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003126:	f7ff f88f 	bl	8002248 <HAL_GetTick>
 800312a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d002      	beq.n	8003142 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800313c:	2302      	movs	r3, #2
 800313e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003140:	e116      	b.n	8003370 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_SPI_Transmit+0x52>
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003152:	e10d      	b.n	8003370 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2203      	movs	r2, #3
 8003158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	88fa      	ldrh	r2, [r7, #6]
 8003172:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319a:	d10f      	bne.n	80031bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d007      	beq.n	80031da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e2:	d14f      	bne.n	8003284 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_SPI_Transmit+0xf6>
 80031ec:	8afb      	ldrh	r3, [r7, #22]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d142      	bne.n	8003278 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	1c9a      	adds	r2, r3, #2
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003216:	e02f      	b.n	8003278 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d112      	bne.n	800324c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	881a      	ldrh	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	1c9a      	adds	r2, r3, #2
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	86da      	strh	r2, [r3, #54]	; 0x36
 800324a:	e015      	b.n	8003278 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800324c:	f7fe fffc 	bl	8002248 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d803      	bhi.n	8003264 <HAL_SPI_Transmit+0x168>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d102      	bne.n	800326a <HAL_SPI_Transmit+0x16e>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003276:	e07b      	b.n	8003370 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ca      	bne.n	8003218 <HAL_SPI_Transmit+0x11c>
 8003282:	e050      	b.n	8003326 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_Transmit+0x196>
 800328c:	8afb      	ldrh	r3, [r7, #22]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d144      	bne.n	800331c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80032b8:	e030      	b.n	800331c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d113      	bne.n	80032f0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	7812      	ldrb	r2, [r2, #0]
 80032d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80032ee:	e015      	b.n	800331c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032f0:	f7fe ffaa 	bl	8002248 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d803      	bhi.n	8003308 <HAL_SPI_Transmit+0x20c>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d102      	bne.n	800330e <HAL_SPI_Transmit+0x212>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800331a:	e029      	b.n	8003370 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1c9      	bne.n	80032ba <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fbcc 	bl	8003ac8 <SPI_EndRxTxTransaction>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e003      	b.n	8003370 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003378:	7ffb      	ldrb	r3, [r7, #31]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b088      	sub	sp, #32
 8003386:	af02      	add	r7, sp, #8
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d002      	beq.n	80033a8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
 80033a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033a6:	e0fb      	b.n	80035a0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b0:	d112      	bne.n	80033d8 <HAL_SPI_Receive+0x56>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10e      	bne.n	80033d8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2204      	movs	r2, #4
 80033be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f8ef 	bl	80035b2 <HAL_SPI_TransmitReceive>
 80033d4:	4603      	mov	r3, r0
 80033d6:	e0e8      	b.n	80035aa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_SPI_Receive+0x64>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e0e1      	b.n	80035aa <HAL_SPI_Receive+0x228>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ee:	f7fe ff2b 	bl	8002248 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Receive+0x7e>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003404:	e0cc      	b.n	80035a0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2204      	movs	r2, #4
 800340a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	d10f      	bne.n	800346e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d007      	beq.n	800348c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d16a      	bne.n	800356a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003494:	e032      	b.n	80034fc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d115      	bne.n	80034d0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f103 020c 	add.w	r2, r3, #12
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034ce:	e015      	b.n	80034fc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034d0:	f7fe feba 	bl	8002248 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d803      	bhi.n	80034e8 <HAL_SPI_Receive+0x166>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d102      	bne.n	80034ee <HAL_SPI_Receive+0x16c>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80034fa:	e051      	b.n	80035a0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1c7      	bne.n	8003496 <HAL_SPI_Receive+0x114>
 8003506:	e035      	b.n	8003574 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b01      	cmp	r3, #1
 8003514:	d113      	bne.n	800353e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	b292      	uxth	r2, r2
 8003522:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	1c9a      	adds	r2, r3, #2
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800353c:	e015      	b.n	800356a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800353e:	f7fe fe83 	bl	8002248 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d803      	bhi.n	8003556 <HAL_SPI_Receive+0x1d4>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d102      	bne.n	800355c <HAL_SPI_Receive+0x1da>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003568:	e01a      	b.n	80035a0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1c9      	bne.n	8003508 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fa53 	bl	8003a24 <SPI_EndRxTransaction>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
 8003596:	e003      	b.n	80035a0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b08c      	sub	sp, #48	; 0x30
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035c0:	2301      	movs	r3, #1
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_SPI_TransmitReceive+0x26>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e198      	b.n	800390a <HAL_SPI_TransmitReceive+0x358>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035e0:	f7fe fe32 	bl	8002248 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d00f      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x70>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003608:	d107      	bne.n	800361a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <HAL_SPI_TransmitReceive+0x68>
 8003612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003616:	2b04      	cmp	r3, #4
 8003618:	d003      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800361a:	2302      	movs	r3, #2
 800361c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003620:	e16d      	b.n	80038fe <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x82>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x82>
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800363a:	e160      	b.n	80038fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b04      	cmp	r3, #4
 8003646:	d003      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	887a      	ldrh	r2, [r7, #2]
 8003660:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	887a      	ldrh	r2, [r7, #2]
 8003666:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	887a      	ldrh	r2, [r7, #2]
 8003672:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d007      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ac:	d17c      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x10a>
 80036b6:	8b7b      	ldrh	r3, [r7, #26]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d16a      	bne.n	8003792 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	881a      	ldrh	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	1c9a      	adds	r2, r3, #2
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e0:	e057      	b.n	8003792 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d11b      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x176>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <HAL_SPI_TransmitReceive+0x176>
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d113      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d119      	bne.n	800376a <HAL_SPI_TransmitReceive+0x1b8>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d014      	beq.n	800376a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	b292      	uxth	r2, r2
 800374c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	1c9a      	adds	r2, r3, #2
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003766:	2301      	movs	r3, #1
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800376a:	f7fe fd6d 	bl	8002248 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003776:	429a      	cmp	r2, r3
 8003778:	d80b      	bhi.n	8003792 <HAL_SPI_TransmitReceive+0x1e0>
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d007      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003790:	e0b5      	b.n	80038fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1a2      	bne.n	80036e2 <HAL_SPI_TransmitReceive+0x130>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d19d      	bne.n	80036e2 <HAL_SPI_TransmitReceive+0x130>
 80037a6:	e080      	b.n	80038aa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x204>
 80037b0:	8b7b      	ldrh	r3, [r7, #26]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d16f      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037dc:	e05b      	b.n	8003896 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d11c      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x274>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d017      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x274>
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d114      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	7812      	ldrb	r2, [r2, #0]
 8003808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d119      	bne.n	8003868 <HAL_SPI_TransmitReceive+0x2b6>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d014      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003864:	2301      	movs	r3, #1
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003868:	f7fe fcee 	bl	8002248 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003874:	429a      	cmp	r2, r3
 8003876:	d803      	bhi.n	8003880 <HAL_SPI_TransmitReceive+0x2ce>
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d102      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x2d4>
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003894:	e033      	b.n	80038fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d19e      	bne.n	80037de <HAL_SPI_TransmitReceive+0x22c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d199      	bne.n	80037de <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f90a 	bl	8003ac8 <SPI_EndRxTxTransaction>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d006      	beq.n	80038c8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80038c6:	e01a      	b.n	80038fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f4:	e003      	b.n	80038fe <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003906:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800390a:	4618      	mov	r0, r3
 800390c:	3730      	adds	r7, #48	; 0x30
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003924:	f7fe fc90 	bl	8002248 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	4413      	add	r3, r2
 8003932:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003934:	f7fe fc88 	bl	8002248 <HAL_GetTick>
 8003938:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800393a:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	015b      	lsls	r3, r3, #5
 8003940:	0d1b      	lsrs	r3, r3, #20
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800394a:	e054      	b.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d050      	beq.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003954:	f7fe fc78 	bl	8002248 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	429a      	cmp	r2, r3
 8003962:	d902      	bls.n	800396a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d13d      	bne.n	80039e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003978:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003982:	d111      	bne.n	80039a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398c:	d004      	beq.n	8003998 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003996:	d107      	bne.n	80039a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b0:	d10f      	bne.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e017      	b.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d19b      	bne.n	800394c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2000006c 	.word	0x2000006c

08003a24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a38:	d111      	bne.n	8003a5e <SPI_EndRxTransaction+0x3a>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a42:	d004      	beq.n	8003a4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d107      	bne.n	8003a5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a66:	d117      	bne.n	8003a98 <SPI_EndRxTransaction+0x74>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d112      	bne.n	8003a98 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f7ff ff49 	bl	8003914 <SPI_WaitFlagStateUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01a      	beq.n	8003abe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e013      	b.n	8003ac0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff ff36 	bl	8003914 <SPI_WaitFlagStateUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e000      	b.n	8003ac0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2200      	movs	r2, #0
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff ff18 	bl	8003914 <SPI_WaitFlagStateUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	f043 0220 	orr.w	r2, r3, #32
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e000      	b.n	8003afc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e041      	b.n	8003b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fe f9f8 	bl	8001f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f000 fafc 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d001      	beq.n	8003bbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e032      	b.n	8003c22 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_TIM_Base_Start+0x88>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00e      	beq.n	8003bec <HAL_TIM_Base_Start+0x48>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd6:	d009      	beq.n	8003bec <HAL_TIM_Base_Start+0x48>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <HAL_TIM_Base_Start+0x8c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_TIM_Base_Start+0x48>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <HAL_TIM_Base_Start+0x90>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d111      	bne.n	8003c10 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b06      	cmp	r3, #6
 8003bfc:	d010      	beq.n	8003c20 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0201 	orr.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	e007      	b.n	8003c20 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800

08003c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e041      	b.n	8003cce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f839 	bl	8003cd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f000 fa62 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <HAL_TIM_PWM_Start+0x24>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e022      	b.n	8003d52 <HAL_TIM_PWM_Start+0x6a>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d109      	bne.n	8003d26 <HAL_TIM_PWM_Start+0x3e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	bf14      	ite	ne
 8003d1e:	2301      	movne	r3, #1
 8003d20:	2300      	moveq	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	e015      	b.n	8003d52 <HAL_TIM_PWM_Start+0x6a>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d109      	bne.n	8003d40 <HAL_TIM_PWM_Start+0x58>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e008      	b.n	8003d52 <HAL_TIM_PWM_Start+0x6a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e05e      	b.n	8003e18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_PWM_Start+0x82>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d68:	e013      	b.n	8003d92 <HAL_TIM_PWM_Start+0xaa>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_PWM_Start+0x92>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d78:	e00b      	b.n	8003d92 <HAL_TIM_PWM_Start+0xaa>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_PWM_Start+0xa2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	e003      	b.n	8003d92 <HAL_TIM_PWM_Start+0xaa>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2201      	movs	r2, #1
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fc50 	bl	8004640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_TIM_PWM_Start+0x138>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d107      	bne.n	8003dba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <HAL_TIM_PWM_Start+0x138>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_TIM_PWM_Start+0xfa>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIM_PWM_Start+0xfa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <HAL_TIM_PWM_Start+0x13c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIM_PWM_Start+0xfa>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <HAL_TIM_PWM_Start+0x140>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d111      	bne.n	8003e06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b06      	cmp	r3, #6
 8003df2:	d010      	beq.n	8003e16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	e007      	b.n	8003e16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800

08003e2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0ae      	b.n	8003fa8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	f200 809f 	bhi.w	8003f98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e5a:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003e95 	.word	0x08003e95
 8003e64:	08003f99 	.word	0x08003f99
 8003e68:	08003f99 	.word	0x08003f99
 8003e6c:	08003f99 	.word	0x08003f99
 8003e70:	08003ed5 	.word	0x08003ed5
 8003e74:	08003f99 	.word	0x08003f99
 8003e78:	08003f99 	.word	0x08003f99
 8003e7c:	08003f99 	.word	0x08003f99
 8003e80:	08003f17 	.word	0x08003f17
 8003e84:	08003f99 	.word	0x08003f99
 8003e88:	08003f99 	.word	0x08003f99
 8003e8c:	08003f99 	.word	0x08003f99
 8003e90:	08003f57 	.word	0x08003f57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f9b2 	bl	8004204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0204 	bic.w	r2, r2, #4
 8003ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6999      	ldr	r1, [r3, #24]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	619a      	str	r2, [r3, #24]
      break;
 8003ed2:	e064      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f9f8 	bl	80042d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6999      	ldr	r1, [r3, #24]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	619a      	str	r2, [r3, #24]
      break;
 8003f14:	e043      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fa41 	bl	80043a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0208 	orr.w	r2, r2, #8
 8003f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0204 	bic.w	r2, r2, #4
 8003f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69d9      	ldr	r1, [r3, #28]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	61da      	str	r2, [r3, #28]
      break;
 8003f54:	e023      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fa8b 	bl	8004478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69d9      	ldr	r1, [r3, #28]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	021a      	lsls	r2, r3, #8
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	61da      	str	r2, [r3, #28]
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIM_ConfigClockSource+0x1c>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e0b4      	b.n	8004136 <HAL_TIM_ConfigClockSource+0x186>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004004:	d03e      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0xd4>
 8004006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400a:	f200 8087 	bhi.w	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800400e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004012:	f000 8086 	beq.w	8004122 <HAL_TIM_ConfigClockSource+0x172>
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401a:	d87f      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b70      	cmp	r3, #112	; 0x70
 800401e:	d01a      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0xa6>
 8004020:	2b70      	cmp	r3, #112	; 0x70
 8004022:	d87b      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b60      	cmp	r3, #96	; 0x60
 8004026:	d050      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x11a>
 8004028:	2b60      	cmp	r3, #96	; 0x60
 800402a:	d877      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b50      	cmp	r3, #80	; 0x50
 800402e:	d03c      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0xfa>
 8004030:	2b50      	cmp	r3, #80	; 0x50
 8004032:	d873      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d058      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x13a>
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d86f      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b30      	cmp	r3, #48	; 0x30
 800403e:	d064      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x15a>
 8004040:	2b30      	cmp	r3, #48	; 0x30
 8004042:	d86b      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 8004044:	2b20      	cmp	r3, #32
 8004046:	d060      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x15a>
 8004048:	2b20      	cmp	r3, #32
 800404a:	d867      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d05c      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x15a>
 8004050:	2b10      	cmp	r3, #16
 8004052:	d05a      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x15a>
 8004054:	e062      	b.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004066:	f000 facc 	bl	8004602 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	609a      	str	r2, [r3, #8]
      break;
 8004082:	e04f      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004094:	f000 fab5 	bl	8004602 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040a6:	609a      	str	r2, [r3, #8]
      break;
 80040a8:	e03c      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 fa2c 	bl	8004514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2150      	movs	r1, #80	; 0x50
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fa83 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 80040c8:	e02c      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 fa4a 	bl	8004570 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2160      	movs	r1, #96	; 0x60
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fa73 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 80040e8:	e01c      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 fa0c 	bl	8004514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2140      	movs	r1, #64	; 0x40
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fa63 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 8004108:	e00c      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f000 fa5a 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 800411a:	e003      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e000      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004134:	7bfb      	ldrb	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a29      	ldr	r2, [pc, #164]	; (80041f8 <TIM_Base_SetConfig+0xb8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00b      	beq.n	8004170 <TIM_Base_SetConfig+0x30>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d007      	beq.n	8004170 <TIM_Base_SetConfig+0x30>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a26      	ldr	r2, [pc, #152]	; (80041fc <TIM_Base_SetConfig+0xbc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_Base_SetConfig+0x30>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a25      	ldr	r2, [pc, #148]	; (8004200 <TIM_Base_SetConfig+0xc0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d108      	bne.n	8004182 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1c      	ldr	r2, [pc, #112]	; (80041f8 <TIM_Base_SetConfig+0xb8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00b      	beq.n	80041a2 <TIM_Base_SetConfig+0x62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004190:	d007      	beq.n	80041a2 <TIM_Base_SetConfig+0x62>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a19      	ldr	r2, [pc, #100]	; (80041fc <TIM_Base_SetConfig+0xbc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_Base_SetConfig+0x62>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a18      	ldr	r2, [pc, #96]	; (8004200 <TIM_Base_SetConfig+0xc0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d108      	bne.n	80041b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <TIM_Base_SetConfig+0xb8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d103      	bne.n	80041e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	615a      	str	r2, [r3, #20]
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800

08004204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f023 0201 	bic.w	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 0302 	bic.w	r3, r3, #2
 800424c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <TIM_OC1_SetConfig+0xc8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10c      	bne.n	800427a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0308 	bic.w	r3, r3, #8
 8004266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f023 0304 	bic.w	r3, r3, #4
 8004278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a13      	ldr	r2, [pc, #76]	; (80042cc <TIM_OC1_SetConfig+0xc8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d111      	bne.n	80042a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	621a      	str	r2, [r3, #32]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40012c00 	.word	0x40012c00

080042d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f023 0210 	bic.w	r2, r3, #16
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0320 	bic.w	r3, r3, #32
 800431a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a1d      	ldr	r2, [pc, #116]	; (80043a0 <TIM_OC2_SetConfig+0xd0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10d      	bne.n	800434c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a14      	ldr	r2, [pc, #80]	; (80043a0 <TIM_OC2_SetConfig+0xd0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d113      	bne.n	800437c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800435a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr
 80043a0:	40012c00 	.word	0x40012c00

080043a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <TIM_OC3_SetConfig+0xd0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10d      	bne.n	800441e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800441c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <TIM_OC3_SetConfig+0xd0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d113      	bne.n	800444e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800442c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40012c00 	.word	0x40012c00

08004478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <TIM_OC4_SetConfig+0x98>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d109      	bne.n	80044ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	019b      	lsls	r3, r3, #6
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00

08004514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800453e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 030a 	bic.w	r3, r3, #10
 8004550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0210 	bic.w	r2, r3, #16
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800459a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	031b      	lsls	r3, r3, #12
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	621a      	str	r2, [r3, #32]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f043 0307 	orr.w	r3, r3, #7
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004602:	b480      	push	{r7}
 8004604:	b087      	sub	sp, #28
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800461c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	021a      	lsls	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	431a      	orrs	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	609a      	str	r2, [r3, #8]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2201      	movs	r2, #1
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1a      	ldr	r2, [r3, #32]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800469c:	2302      	movs	r3, #2
 800469e:	e046      	b.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a16      	ldr	r2, [pc, #88]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d009      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a12      	ldr	r2, [pc, #72]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a10      	ldr	r2, [pc, #64]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10c      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4313      	orrs	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	40012c00 	.word	0x40012c00
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800

08004744 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800475c:	2302      	movs	r3, #2
 800475e:	e03d      	b.n	80047dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr

080047e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e042      	b.n	800487e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fd fbff 	bl	8002010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2224      	movs	r2, #36	; 0x24
 8004816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004828:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa0c 	bl	8004c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800483e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800484e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b08a      	sub	sp, #40	; 0x28
 800488a:	af02      	add	r7, sp, #8
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	4613      	mov	r3, r2
 8004894:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d16d      	bne.n	8004982 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_UART_Transmit+0x2c>
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e066      	b.n	8004984 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2221      	movs	r2, #33	; 0x21
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048c4:	f7fd fcc0 	bl	8002248 <HAL_GetTick>
 80048c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048de:	d108      	bne.n	80048f2 <HAL_UART_Transmit+0x6c>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	e003      	b.n	80048fa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048fa:	e02a      	b.n	8004952 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2200      	movs	r2, #0
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f8f7 	bl	8004afa <UART_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e036      	b.n	8004984 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	3302      	adds	r3, #2
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e007      	b.n	8004944 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	781a      	ldrb	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3301      	adds	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1cf      	bne.n	80048fc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2200      	movs	r2, #0
 8004964:	2140      	movs	r1, #64	; 0x40
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f8c7 	bl	8004afa <UART_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e006      	b.n	8004984 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d17c      	bne.n	8004aa6 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_UART_Receive+0x2c>
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e075      	b.n	8004aa8 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2222      	movs	r2, #34	; 0x22
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049d0:	f7fd fc3a 	bl	8002248 <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	88fa      	ldrh	r2, [r7, #6]
 80049da:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	88fa      	ldrh	r2, [r7, #6]
 80049e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	d108      	bne.n	80049fe <HAL_UART_Receive+0x72>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	e003      	b.n	8004a06 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004a06:	e043      	b.n	8004a90 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2120      	movs	r1, #32
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f871 	bl	8004afa <UART_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e042      	b.n	8004aa8 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10c      	bne.n	8004a42 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e01f      	b.n	8004a82 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	d007      	beq.n	8004a5c <HAL_UART_Receive+0xd0>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <HAL_UART_Receive+0xde>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e008      	b.n	8004a7c <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1b6      	bne.n	8004a08 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d112      	bne.n	8004af0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_UART_Receive_IT+0x26>
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e00b      	b.n	8004af2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f875 	bl	8004bd6 <UART_Start_Receive_IT>
 8004aec:	4603      	mov	r3, r0
 8004aee:	e000      	b.n	8004af2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b090      	sub	sp, #64	; 0x40
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0a:	e050      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d04c      	beq.n	8004bae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b1a:	f7fd fb95 	bl	8002248 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d241      	bcs.n	8004bae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b4a:	637a      	str	r2, [r7, #52]	; 0x34
 8004b4c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e5      	bne.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3314      	adds	r3, #20
 8004b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b7e:	623a      	str	r2, [r7, #32]
 8004b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	69f9      	ldr	r1, [r7, #28]
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e5      	bne.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e00f      	b.n	8004bce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2301      	moveq	r3, #1
 8004bc0:	2300      	movne	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d09f      	beq.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3740      	adds	r7, #64	; 0x40
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	4613      	mov	r3, r2
 8004be2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2222      	movs	r2, #34	; 0x22
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0220 	orr.w	r2, r2, #32
 8004c3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr

08004c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c82:	f023 030c 	bic.w	r3, r3, #12
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <UART_SetConfig+0x114>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d103      	bne.n	8004cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fe f96e 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	e002      	b.n	8004cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cb8:	f7fe f956 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8004cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009a      	lsls	r2, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <UART_SetConfig+0x118>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	0119      	lsls	r1, r3, #4
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009a      	lsls	r2, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <UART_SetConfig+0x118>)
 8004cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2064      	movs	r0, #100	; 0x64
 8004cfe:	fb00 f303 	mul.w	r3, r0, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	3332      	adds	r3, #50	; 0x32
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <UART_SetConfig+0x118>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d14:	4419      	add	r1, r3
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009a      	lsls	r2, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <UART_SetConfig+0x118>)
 8004d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2064      	movs	r0, #100	; 0x64
 8004d36:	fb00 f303 	mul.w	r3, r0, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	3332      	adds	r3, #50	; 0x32
 8004d40:	4a07      	ldr	r2, [pc, #28]	; (8004d60 <UART_SetConfig+0x118>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	440a      	add	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40013800 	.word	0x40013800
 8004d60:	51eb851f 	.word	0x51eb851f

08004d64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d76:	2b84      	cmp	r3, #132	; 0x84
 8004d78:	d005      	beq.n	8004d86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	3303      	adds	r3, #3
 8004d84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d86:	68fb      	ldr	r3, [r7, #12]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d98:	f3ef 8305 	mrs	r3, IPSR
 8004d9c:	607b      	str	r3, [r7, #4]
  return(result);
 8004d9e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004db8:	f001 fc14 	bl	80065e4 <vTaskStartScheduler>
  
  return osOK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc4:	b089      	sub	sp, #36	; 0x24
 8004dc6:	af04      	add	r7, sp, #16
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <osThreadCreate+0x54>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01c      	beq.n	8004e16 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685c      	ldr	r4, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691e      	ldr	r6, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff ffb8 	bl	8004d64 <makeFreeRtosPriority>
 8004df4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dfe:	9202      	str	r2, [sp, #8]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	9100      	str	r1, [sp, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	4632      	mov	r2, r6
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f001 f99c 	bl	8006148 <xTaskCreateStatic>
 8004e10:	4603      	mov	r3, r0
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e01c      	b.n	8004e50 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685c      	ldr	r4, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e22:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff ff9a 	bl	8004d64 <makeFreeRtosPriority>
 8004e30:	4602      	mov	r2, r0
 8004e32:	f107 030c 	add.w	r3, r7, #12
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	9200      	str	r2, [sp, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	4632      	mov	r2, r6
 8004e3e:	4629      	mov	r1, r5
 8004e40:	4620      	mov	r0, r4
 8004e42:	f001 f9dd 	bl	8006200 <xTaskCreate>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e50:	68fb      	ldr	r3, [r7, #12]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e5a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f001 fafa 	bl	800645c <vTaskDelete>
  return osOK;
 8004e68:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <osDelay+0x16>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	e000      	b.n	8004e8a <osDelay+0x18>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f001 fb76 	bl	800657c <vTaskDelay>
  
  return osOK;
 8004e90:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d013      	beq.n	8004eda <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8004eb2:	7afb      	ldrb	r3, [r7, #11]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <osTimerCreate+0x20>
 8004eb8:	2101      	movs	r1, #1
 8004eba:	e000      	b.n	8004ebe <osTimerCreate+0x22>
 8004ebc:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004ec6:	9201      	str	r2, [sp, #4]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	460a      	mov	r2, r1
 8004ece:	2101      	movs	r1, #1
 8004ed0:	480b      	ldr	r0, [pc, #44]	; (8004f00 <osTimerCreate+0x64>)
 8004ed2:	f002 fa7a 	bl	80073ca <xTimerCreateStatic>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	e00e      	b.n	8004ef8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8004eda:	7afb      	ldrb	r3, [r7, #11]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <osTimerCreate+0x48>
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	e000      	b.n	8004ee6 <osTimerCreate+0x4a>
 8004ee4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4803      	ldr	r0, [pc, #12]	; (8004f00 <osTimerCreate+0x64>)
 8004ef2:	f002 fa49 	bl	8007388 <xTimerCreate>
 8004ef6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	08008308 	.word	0x08008308

08004f04 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <osTimerStart+0x20>
    ticks = 1;
 8004f20:	2301      	movs	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8004f24:	f7ff ff35 	bl	8004d92 <inHandlerMode>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01a      	beq.n	8004f64 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8004f2e:	f107 030c 	add.w	r3, r7, #12
 8004f32:	2200      	movs	r2, #0
 8004f34:	9200      	str	r2, [sp, #0]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	2109      	movs	r1, #9
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f002 fab4 	bl	80074a8 <xTimerGenericCommand>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d002      	beq.n	8004f4c <osTimerStart+0x48>
    {
      result = osErrorOS;
 8004f46:	23ff      	movs	r3, #255	; 0xff
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e018      	b.n	8004f7e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d015      	beq.n	8004f7e <osTimerStart+0x7a>
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <osTimerStart+0x84>)
 8004f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	e00c      	b.n	8004f7e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8004f64:	2300      	movs	r3, #0
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	2104      	movs	r1, #4
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f002 fa9a 	bl	80074a8 <xTimerGenericCommand>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d001      	beq.n	8004f7e <osTimerStart+0x7a>
      result = osErrorOS;
 8004f7a:	23ff      	movs	r3, #255	; 0xff
 8004f7c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8004f7e:	697b      	ldr	r3, [r7, #20]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00f      	beq.n	8004fbe <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10a      	bne.n	8004fba <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	9200      	str	r2, [sp, #0]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2100      	movs	r1, #0
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	f000 f9e1 	bl	8005378 <xQueueGenericCreateStatic>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	e016      	b.n	8004fe8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e014      	b.n	8004fe8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d110      	bne.n	8004fe6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	2001      	movs	r0, #1
 8004fca:	f000 fa4c 	bl	8005466 <xQueueGenericCreate>
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <osSemaphoreCreate+0x56>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2100      	movs	r1, #0
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fa9f 	bl	8005520 <xQueueGenericSend>
      return sema;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	e000      	b.n	8004fe8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004fe6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	e03a      	b.n	800507e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d103      	bne.n	800501c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005014:	f04f 33ff 	mov.w	r3, #4294967295
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e009      	b.n	8005030 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d006      	beq.n	8005030 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <osSemaphoreWait+0x40>
      ticks = 1;
 800502c:	2301      	movs	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005030:	f7ff feaf 	bl	8004d92 <inHandlerMode>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d017      	beq.n	800506a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800503a:	f107 0308 	add.w	r3, r7, #8
 800503e:	461a      	mov	r2, r3
 8005040:	2100      	movs	r1, #0
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fe7c 	bl	8005d40 <xQueueReceiveFromISR>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d001      	beq.n	8005052 <osSemaphoreWait+0x62>
      return osErrorOS;
 800504e:	23ff      	movs	r3, #255	; 0xff
 8005050:	e015      	b.n	800507e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d011      	beq.n	800507c <osSemaphoreWait+0x8c>
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <osSemaphoreWait+0x98>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	e008      	b.n	800507c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fd5b 	bl	8005b28 <xQueueSemaphoreTake>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d001      	beq.n	800507c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005078:	23ff      	movs	r3, #255	; 0xff
 800507a:	e000      	b.n	800507e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005098:	2300      	movs	r3, #0
 800509a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800509c:	f7ff fe79 	bl	8004d92 <inHandlerMode>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d016      	beq.n	80050d4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80050a6:	f107 0308 	add.w	r3, r7, #8
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fbcd 	bl	800584c <xQueueGiveFromISR>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80050b8:	23ff      	movs	r3, #255	; 0xff
 80050ba:	e017      	b.n	80050ec <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d013      	beq.n	80050ea <osSemaphoreRelease+0x5e>
 80050c2:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <osSemaphoreRelease+0x68>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	e00a      	b.n	80050ea <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80050d4:	2300      	movs	r3, #0
 80050d6:	2200      	movs	r2, #0
 80050d8:	2100      	movs	r1, #0
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa20 	bl	8005520 <xQueueGenericSend>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d001      	beq.n	80050ea <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80050e6:	23ff      	movs	r3, #255	; 0xff
 80050e8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80050ea:	68fb      	ldr	r3, [r7, #12]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d011      	beq.n	800512e <osMessageCreate+0x36>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2400      	movs	r4, #0
 8005124:	9400      	str	r4, [sp, #0]
 8005126:	f000 f927 	bl	8005378 <xQueueGenericCreateStatic>
 800512a:	4603      	mov	r3, r0
 800512c:	e008      	b.n	8005140 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	4619      	mov	r1, r3
 800513a:	f000 f994 	bl	8005466 <xQueueGenericCreate>
 800513e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bd90      	pop	{r4, r7, pc}

08005148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f103 0208 	add.w	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f103 0208 	add.w	r2, r3, #8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f103 0208 	add.w	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	601a      	str	r2, [r3, #0]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d103      	bne.n	8005204 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e00c      	b.n	800521e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3308      	adds	r3, #8
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e002      	b.n	8005212 <vListInsert+0x2e>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d2f6      	bcs.n	800520c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6892      	ldr	r2, [r2, #8]
 800526a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6852      	ldr	r2, [r2, #4]
 8005274:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d103      	bne.n	8005288 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1e5a      	subs	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
	...

080052a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052d2:	f002 fc8b 	bl	8007bec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	68f9      	ldr	r1, [r7, #12]
 80052e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052e2:	fb01 f303 	mul.w	r3, r1, r3
 80052e6:	441a      	add	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	3b01      	subs	r3, #1
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	22ff      	movs	r2, #255	; 0xff
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	22ff      	movs	r2, #255	; 0xff
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d114      	bne.n	8005352 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01a      	beq.n	8005366 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3310      	adds	r3, #16
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fbdb 	bl	8006af0 <xTaskRemoveFromEventList>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d012      	beq.n	8005366 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <xQueueGenericReset+0xcc>)
 8005342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	e009      	b.n	8005366 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3310      	adds	r3, #16
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fef6 	bl	8005148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3324      	adds	r3, #36	; 0x24
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fef1 	bl	8005148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005366:	f002 fc71 	bl	8007c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800536a:	2301      	movs	r3, #1
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	; 0x38
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <xQueueGenericCreateStatic+0x52>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <xQueueGenericCreateStatic+0x56>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <xQueueGenericCreateStatic+0x58>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	623b      	str	r3, [r7, #32]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <xQueueGenericCreateStatic+0x7e>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <xQueueGenericCreateStatic+0x82>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xQueueGenericCreateStatic+0x84>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	61fb      	str	r3, [r7, #28]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005416:	2348      	movs	r3, #72	; 0x48
 8005418:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b48      	cmp	r3, #72	; 0x48
 800541e:	d00a      	beq.n	8005436 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	61bb      	str	r3, [r7, #24]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005448:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	4613      	mov	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f843 	bl	80054e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800545e:	4618      	mov	r0, r3
 8005460:	3730      	adds	r7, #48	; 0x30
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005466:	b580      	push	{r7, lr}
 8005468:	b08a      	sub	sp, #40	; 0x28
 800546a:	af02      	add	r7, sp, #8
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	4613      	mov	r3, r2
 8005472:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <xQueueGenericCreate+0x2a>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	613b      	str	r3, [r7, #16]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e004      	b.n	80054a6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	fb02 f303 	mul.w	r3, r2, r3
 80054a4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	3348      	adds	r3, #72	; 0x48
 80054aa:	4618      	mov	r0, r3
 80054ac:	f002 fc7c 	bl	8007da8 <pvPortMalloc>
 80054b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00f      	beq.n	80054d8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	3348      	adds	r3, #72	; 0x48
 80054bc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c6:	79fa      	ldrb	r2, [r7, #7]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f805 	bl	80054e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054d8:	69bb      	ldr	r3, [r7, #24]
	}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e002      	b.n	8005504 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005510:	2101      	movs	r1, #1
 8005512:	69b8      	ldr	r0, [r7, #24]
 8005514:	f7ff fec8 	bl	80052a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xQueueGenericSend+0x32>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <xQueueGenericSend+0x40>
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <xQueueGenericSend+0x44>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <xQueueGenericSend+0x46>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <xQueueGenericSend+0x60>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d103      	bne.n	800558e <xQueueGenericSend+0x6e>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <xQueueGenericSend+0x72>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <xQueueGenericSend+0x74>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <xQueueGenericSend+0x8e>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	623b      	str	r3, [r7, #32]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055ae:	f001 fc5f 	bl	8006e70 <xTaskGetSchedulerState>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <xQueueGenericSend+0x9e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <xQueueGenericSend+0xa2>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <xQueueGenericSend+0xa4>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xQueueGenericSend+0xbe>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	61fb      	str	r3, [r7, #28]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055de:	f002 fb05 	bl	8007bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d302      	bcc.n	80055f4 <xQueueGenericSend+0xd4>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d129      	bne.n	8005648 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fa:	f000 fc38 	bl	8005e6e <prvCopyDataToQueue>
 80055fe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d010      	beq.n	800562a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	3324      	adds	r3, #36	; 0x24
 800560c:	4618      	mov	r0, r3
 800560e:	f001 fa6f 	bl	8006af0 <xTaskRemoveFromEventList>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d013      	beq.n	8005640 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005618:	4b3f      	ldr	r3, [pc, #252]	; (8005718 <xQueueGenericSend+0x1f8>)
 800561a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	e00a      	b.n	8005640 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005630:	4b39      	ldr	r3, [pc, #228]	; (8005718 <xQueueGenericSend+0x1f8>)
 8005632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005640:	f002 fb04 	bl	8007c4c <vPortExitCritical>
				return pdPASS;
 8005644:	2301      	movs	r3, #1
 8005646:	e063      	b.n	8005710 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800564e:	f002 fafd 	bl	8007c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005652:	2300      	movs	r3, #0
 8005654:	e05c      	b.n	8005710 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800565c:	f107 0314 	add.w	r3, r7, #20
 8005660:	4618      	mov	r0, r3
 8005662:	f001 faa7 	bl	8006bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005666:	2301      	movs	r3, #1
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800566a:	f002 faef 	bl	8007c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800566e:	f001 f81f 	bl	80066b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005672:	f002 fabb 	bl	8007bec <vPortEnterCritical>
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800567c:	b25b      	sxtb	r3, r3
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d103      	bne.n	800568c <xQueueGenericSend+0x16c>
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005692:	b25b      	sxtb	r3, r3
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d103      	bne.n	80056a2 <xQueueGenericSend+0x182>
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a2:	f002 fad3 	bl	8007c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056a6:	1d3a      	adds	r2, r7, #4
 80056a8:	f107 0314 	add.w	r3, r7, #20
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 fa96 	bl	8006be0 <xTaskCheckForTimeOut>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d124      	bne.n	8005704 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056bc:	f000 fccf 	bl	800605e <prvIsQueueFull>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d018      	beq.n	80056f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	3310      	adds	r3, #16
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4611      	mov	r1, r2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 f9be 	bl	8006a50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d6:	f000 fc5a 	bl	8005f8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056da:	f000 fff7 	bl	80066cc <xTaskResumeAll>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f47f af7c 	bne.w	80055de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <xQueueGenericSend+0x1f8>)
 80056e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	e772      	b.n	80055de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056fa:	f000 fc48 	bl	8005f8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056fe:	f000 ffe5 	bl	80066cc <xTaskResumeAll>
 8005702:	e76c      	b.n	80055de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005706:	f000 fc42 	bl	8005f8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800570a:	f000 ffdf 	bl	80066cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800570e:	2300      	movs	r3, #0
		}
	}
}
 8005710:	4618      	mov	r0, r3
 8005712:	3738      	adds	r7, #56	; 0x38
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	; 0x38
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <xQueueGenericSendFromISR+0x3c>
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <xQueueGenericSendFromISR+0x40>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <xQueueGenericSendFromISR+0x42>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	623b      	str	r3, [r7, #32]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d103      	bne.n	8005786 <xQueueGenericSendFromISR+0x6a>
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <xQueueGenericSendFromISR+0x6e>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <xQueueGenericSendFromISR+0x70>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	61fb      	str	r3, [r7, #28]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057a6:	f002 fac1 	bl	8007d2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057aa:	f3ef 8211 	mrs	r2, BASEPRI
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	61ba      	str	r2, [r7, #24]
 80057c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <xQueueGenericSendFromISR+0xbc>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d12c      	bne.n	8005832 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e8:	f000 fb41 	bl	8005e6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d112      	bne.n	800581c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d016      	beq.n	800582c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	3324      	adds	r3, #36	; 0x24
 8005802:	4618      	mov	r0, r3
 8005804:	f001 f974 	bl	8006af0 <xTaskRemoveFromEventList>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00e      	beq.n	800582c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e007      	b.n	800582c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800581c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005820:	3301      	adds	r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	b25a      	sxtb	r2, r3
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800582c:	2301      	movs	r3, #1
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005830:	e001      	b.n	8005836 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005832:	2300      	movs	r3, #0
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005840:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005844:	4618      	mov	r0, r3
 8005846:	3738      	adds	r7, #56	; 0x38
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	623b      	str	r3, [r7, #32]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <xQueueGiveFromISR+0x48>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	61fb      	str	r3, [r7, #28]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <xQueueGiveFromISR+0x58>
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <xQueueGiveFromISR+0x5c>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <xQueueGiveFromISR+0x5e>
 80058a8:	2300      	movs	r3, #0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	61bb      	str	r3, [r7, #24]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058c4:	f002 fa32 	bl	8007d2c <vPortValidateInterruptPriority>
	__asm volatile
 80058c8:	f3ef 8211 	mrs	r2, BASEPRI
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	617a      	str	r2, [r7, #20]
 80058de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80058e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d22b      	bcs.n	800594c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005906:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590e:	d112      	bne.n	8005936 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d016      	beq.n	8005946 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	3324      	adds	r3, #36	; 0x24
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f8e7 	bl	8006af0 <xTaskRemoveFromEventList>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00e      	beq.n	8005946 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2201      	movs	r2, #1
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e007      	b.n	8005946 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800593a:	3301      	adds	r3, #1
 800593c:	b2db      	uxtb	r3, r3
 800593e:	b25a      	sxtb	r2, r3
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005946:	2301      	movs	r3, #1
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
 800594a:	e001      	b.n	8005950 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800594c:	2300      	movs	r3, #0
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
 8005950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005952:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f383 8811 	msr	BASEPRI, r3
}
 800595a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800595e:	4618      	mov	r0, r3
 8005960:	3738      	adds	r7, #56	; 0x38
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	; 0x30
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <xQueueReceive+0x30>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	623b      	str	r3, [r7, #32]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <xQueueReceive+0x3e>
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <xQueueReceive+0x42>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueReceive+0x44>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueReceive+0x5e>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	61fb      	str	r3, [r7, #28]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059c6:	f001 fa53 	bl	8006e70 <xTaskGetSchedulerState>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <xQueueReceive+0x6e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <xQueueReceive+0x72>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <xQueueReceive+0x74>
 80059da:	2300      	movs	r3, #0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <xQueueReceive+0x8e>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	61bb      	str	r3, [r7, #24]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80059f6:	f002 f8f9 	bl	8007bec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01f      	beq.n	8005a46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a0a:	f000 fa9a 	bl	8005f42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00f      	beq.n	8005a3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	3310      	adds	r3, #16
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 f864 	bl	8006af0 <xTaskRemoveFromEventList>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a2e:	4b3d      	ldr	r3, [pc, #244]	; (8005b24 <xQueueReceive+0x1bc>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a3e:	f002 f905 	bl	8007c4c <vPortExitCritical>
				return pdPASS;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e069      	b.n	8005b1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a4c:	f002 f8fe 	bl	8007c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a50:	2300      	movs	r3, #0
 8005a52:	e062      	b.n	8005b1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a5a:	f107 0310 	add.w	r3, r7, #16
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f8a8 	bl	8006bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a68:	f002 f8f0 	bl	8007c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a6c:	f000 fe20 	bl	80066b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a70:	f002 f8bc 	bl	8007bec <vPortEnterCritical>
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a7a:	b25b      	sxtb	r3, r3
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d103      	bne.n	8005a8a <xQueueReceive+0x122>
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a90:	b25b      	sxtb	r3, r3
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d103      	bne.n	8005aa0 <xQueueReceive+0x138>
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aa0:	f002 f8d4 	bl	8007c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aa4:	1d3a      	adds	r2, r7, #4
 8005aa6:	f107 0310 	add.w	r3, r7, #16
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 f897 	bl	8006be0 <xTaskCheckForTimeOut>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d123      	bne.n	8005b00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aba:	f000 faba 	bl	8006032 <prvIsQueueEmpty>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d017      	beq.n	8005af4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	3324      	adds	r3, #36	; 0x24
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 ffbf 	bl	8006a50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad4:	f000 fa5b 	bl	8005f8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ad8:	f000 fdf8 	bl	80066cc <xTaskResumeAll>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d189      	bne.n	80059f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <xQueueReceive+0x1bc>)
 8005ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	e780      	b.n	80059f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af6:	f000 fa4a 	bl	8005f8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005afa:	f000 fde7 	bl	80066cc <xTaskResumeAll>
 8005afe:	e77a      	b.n	80059f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b02:	f000 fa44 	bl	8005f8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b06:	f000 fde1 	bl	80066cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0c:	f000 fa91 	bl	8006032 <prvIsQueueEmpty>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f43f af6f 	beq.w	80059f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3730      	adds	r7, #48	; 0x30
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08e      	sub	sp, #56	; 0x38
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	623b      	str	r3, [r7, #32]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	61fb      	str	r3, [r7, #28]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b78:	f001 f97a 	bl	8006e70 <xTaskGetSchedulerState>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d102      	bne.n	8005b88 <xQueueSemaphoreTake+0x60>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <xQueueSemaphoreTake+0x64>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <xQueueSemaphoreTake+0x66>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	61bb      	str	r3, [r7, #24]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ba8:	f002 f820 	bl	8007bec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d024      	beq.n	8005c02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	1e5a      	subs	r2, r3, #1
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005bc8:	f001 fb1c 	bl	8007204 <pvTaskIncrementMutexHeldCount>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00f      	beq.n	8005bfa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	3310      	adds	r3, #16
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 ff86 	bl	8006af0 <xTaskRemoveFromEventList>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d007      	beq.n	8005bfa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bea:	4b54      	ldr	r3, [pc, #336]	; (8005d3c <xQueueSemaphoreTake+0x214>)
 8005bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bfa:	f002 f827 	bl	8007c4c <vPortExitCritical>
				return pdPASS;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e097      	b.n	8005d32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d111      	bne.n	8005c2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	617b      	str	r3, [r7, #20]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c24:	f002 f812 	bl	8007c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e082      	b.n	8005d32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c32:	f107 030c 	add.w	r3, r7, #12
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 ffbc 	bl	8006bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c40:	f002 f804 	bl	8007c4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c44:	f000 fd34 	bl	80066b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c48:	f001 ffd0 	bl	8007bec <vPortEnterCritical>
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c52:	b25b      	sxtb	r3, r3
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d103      	bne.n	8005c62 <xQueueSemaphoreTake+0x13a>
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c68:	b25b      	sxtb	r3, r3
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d103      	bne.n	8005c78 <xQueueSemaphoreTake+0x150>
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c78:	f001 ffe8 	bl	8007c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c7c:	463a      	mov	r2, r7
 8005c7e:	f107 030c 	add.w	r3, r7, #12
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 ffab 	bl	8006be0 <xTaskCheckForTimeOut>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d132      	bne.n	8005cf6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c92:	f000 f9ce 	bl	8006032 <prvIsQueueEmpty>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d026      	beq.n	8005cea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d109      	bne.n	8005cb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005ca4:	f001 ffa2 	bl	8007bec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 f8fd 	bl	8006eac <xTaskPriorityInherit>
 8005cb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005cb4:	f001 ffca 	bl	8007c4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	3324      	adds	r3, #36	; 0x24
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fec5 	bl	8006a50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cc8:	f000 f961 	bl	8005f8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ccc:	f000 fcfe 	bl	80066cc <xTaskResumeAll>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f47f af68 	bne.w	8005ba8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005cd8:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <xQueueSemaphoreTake+0x214>)
 8005cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	e75e      	b.n	8005ba8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cec:	f000 f94f 	bl	8005f8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cf0:	f000 fcec 	bl	80066cc <xTaskResumeAll>
 8005cf4:	e758      	b.n	8005ba8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cf8:	f000 f949 	bl	8005f8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cfc:	f000 fce6 	bl	80066cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d02:	f000 f996 	bl	8006032 <prvIsQueueEmpty>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f43f af4d 	beq.w	8005ba8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00d      	beq.n	8005d30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005d14:	f001 ff6a 	bl	8007bec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d1a:	f000 f891 	bl	8005e40 <prvGetDisinheritPriorityAfterTimeout>
 8005d1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f9cc 	bl	80070c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d2c:	f001 ff8e 	bl	8007c4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3738      	adds	r7, #56	; 0x38
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08e      	sub	sp, #56	; 0x38
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	623b      	str	r3, [r7, #32]
}
 8005d68:	bf00      	nop
 8005d6a:	e7fe      	b.n	8005d6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d103      	bne.n	8005d7a <xQueueReceiveFromISR+0x3a>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <xQueueReceiveFromISR+0x3e>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <xQueueReceiveFromISR+0x40>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	61fb      	str	r3, [r7, #28]
}
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d9a:	f001 ffc7 	bl	8007d2c <vPortValidateInterruptPriority>
	__asm volatile
 8005d9e:	f3ef 8211 	mrs	r2, BASEPRI
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	61ba      	str	r2, [r7, #24]
 8005db4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005db6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d02f      	beq.n	8005e26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd4:	f000 f8b5 	bl	8005f42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	1e5a      	subs	r2, r3, #1
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005de0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de8:	d112      	bne.n	8005e10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d016      	beq.n	8005e20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	3310      	adds	r3, #16
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fe7a 	bl	8006af0 <xTaskRemoveFromEventList>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	e007      	b.n	8005e20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e14:	3301      	adds	r3, #1
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	b25a      	sxtb	r2, r3
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e20:	2301      	movs	r3, #1
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
 8005e24:	e001      	b.n	8005e2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f383 8811 	msr	BASEPRI, r3
}
 8005e34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3738      	adds	r7, #56	; 0x38
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d006      	beq.n	8005e5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1c3 0307 	rsb	r3, r3, #7
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e001      	b.n	8005e62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005e62:	68fb      	ldr	r3, [r7, #12]
	}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr

08005e6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b086      	sub	sp, #24
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10d      	bne.n	8005ea8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d14d      	bne.n	8005f30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 f88d 	bl	8006fb8 <xTaskPriorityDisinherit>
 8005e9e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	e043      	b.n	8005f30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d119      	bne.n	8005ee2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6898      	ldr	r0, [r3, #8]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	f002 f979 	bl	80081b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	441a      	add	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d32b      	bcc.n	8005f30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	609a      	str	r2, [r3, #8]
 8005ee0:	e026      	b.n	8005f30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68d8      	ldr	r0, [r3, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	461a      	mov	r2, r3
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	f002 f95f 	bl	80081b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	425b      	negs	r3, r3
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d207      	bcs.n	8005f1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	425b      	negs	r3, r3
 8005f18:	441a      	add	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d105      	bne.n	8005f30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f38:	697b      	ldr	r3, [r7, #20]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d018      	beq.n	8005f86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	441a      	add	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d303      	bcc.n	8005f76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68d9      	ldr	r1, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	461a      	mov	r2, r3
 8005f80:	6838      	ldr	r0, [r7, #0]
 8005f82:	f002 f915 	bl	80081b0 <memcpy>
	}
}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f96:	f001 fe29 	bl	8007bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fa0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fa2:	e011      	b.n	8005fc8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d012      	beq.n	8005fd2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3324      	adds	r3, #36	; 0x24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fd9d 	bl	8006af0 <xTaskRemoveFromEventList>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fbc:	f000 fe72 	bl	8006ca4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	dce9      	bgt.n	8005fa4 <prvUnlockQueue+0x16>
 8005fd0:	e000      	b.n	8005fd4 <prvUnlockQueue+0x46>
					break;
 8005fd2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	22ff      	movs	r2, #255	; 0xff
 8005fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fdc:	f001 fe36 	bl	8007c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fe0:	f001 fe04 	bl	8007bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fec:	e011      	b.n	8006012 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d012      	beq.n	800601c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3310      	adds	r3, #16
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fd78 	bl	8006af0 <xTaskRemoveFromEventList>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006006:	f000 fe4d 	bl	8006ca4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800600a:	7bbb      	ldrb	r3, [r7, #14]
 800600c:	3b01      	subs	r3, #1
 800600e:	b2db      	uxtb	r3, r3
 8006010:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006016:	2b00      	cmp	r3, #0
 8006018:	dce9      	bgt.n	8005fee <prvUnlockQueue+0x60>
 800601a:	e000      	b.n	800601e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800601c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	22ff      	movs	r2, #255	; 0xff
 8006022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006026:	f001 fe11 	bl	8007c4c <vPortExitCritical>
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800603a:	f001 fdd7 	bl	8007bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	2b00      	cmp	r3, #0
 8006044:	d102      	bne.n	800604c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006046:	2301      	movs	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e001      	b.n	8006050 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006050:	f001 fdfc 	bl	8007c4c <vPortExitCritical>

	return xReturn;
 8006054:	68fb      	ldr	r3, [r7, #12]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006066:	f001 fdc1 	bl	8007bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006072:	429a      	cmp	r2, r3
 8006074:	d102      	bne.n	800607c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006076:	2301      	movs	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e001      	b.n	8006080 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006080:	f001 fde4 	bl	8007c4c <vPortExitCritical>

	return xReturn;
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e014      	b.n	80060ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060a0:	4a0e      	ldr	r2, [pc, #56]	; (80060dc <vQueueAddToRegistry+0x4c>)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060ac:	490b      	ldr	r1, [pc, #44]	; (80060dc <vQueueAddToRegistry+0x4c>)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060b6:	4a09      	ldr	r2, [pc, #36]	; (80060dc <vQueueAddToRegistry+0x4c>)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4413      	add	r3, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060c2:	e006      	b.n	80060d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b07      	cmp	r3, #7
 80060ce:	d9e7      	bls.n	80060a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr
 80060dc:	200009a0 	.word	0x200009a0

080060e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060f0:	f001 fd7c 	bl	8007bec <vPortEnterCritical>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d103      	bne.n	800610a <vQueueWaitForMessageRestricted+0x2a>
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006110:	b25b      	sxtb	r3, r3
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d103      	bne.n	8006120 <vQueueWaitForMessageRestricted+0x40>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006120:	f001 fd94 	bl	8007c4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	3324      	adds	r3, #36	; 0x24
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fcaf 	bl	8006a98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800613a:	6978      	ldr	r0, [r7, #20]
 800613c:	f7ff ff27 	bl	8005f8e <prvUnlockQueue>
	}
 8006140:	bf00      	nop
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	; 0x38
 800614c:	af04      	add	r7, sp, #16
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xTaskCreateStatic+0x2a>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	623b      	str	r3, [r7, #32]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xTaskCreateStatic+0x46>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	61fb      	str	r3, [r7, #28]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800618e:	2354      	movs	r3, #84	; 0x54
 8006190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b54      	cmp	r3, #84	; 0x54
 8006196:	d00a      	beq.n	80061ae <xTaskCreateStatic+0x66>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	61bb      	str	r3, [r7, #24]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01e      	beq.n	80061f2 <xTaskCreateStatic+0xaa>
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01b      	beq.n	80061f2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061cc:	2300      	movs	r3, #0
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	9302      	str	r3, [sp, #8]
 80061d4:	f107 0314 	add.w	r3, r7, #20
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f850 	bl	800628a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061ec:	f000 f8cc 	bl	8006388 <prvAddNewTaskToReadyList>
 80061f0:	e001      	b.n	80061f6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061f6:	697b      	ldr	r3, [r7, #20]
	}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3728      	adds	r7, #40	; 0x28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08c      	sub	sp, #48	; 0x30
 8006204:	af04      	add	r7, sp, #16
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4618      	mov	r0, r3
 8006216:	f001 fdc7 	bl	8007da8 <pvPortMalloc>
 800621a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00e      	beq.n	8006240 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006222:	2054      	movs	r0, #84	; 0x54
 8006224:	f001 fdc0 	bl	8007da8 <pvPortMalloc>
 8006228:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
 8006236:	e005      	b.n	8006244 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006238:	6978      	ldr	r0, [r7, #20]
 800623a:	f001 fe79 	bl	8007f30 <vPortFree>
 800623e:	e001      	b.n	8006244 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006240:	2300      	movs	r3, #0
 8006242:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d017      	beq.n	800627a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	2300      	movs	r3, #0
 8006256:	9303      	str	r3, [sp, #12]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	9302      	str	r3, [sp, #8]
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f80e 	bl	800628a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800626e:	69f8      	ldr	r0, [r7, #28]
 8006270:	f000 f88a 	bl	8006388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006274:	2301      	movs	r3, #1
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	e002      	b.n	8006280 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800627a:	f04f 33ff 	mov.w	r3, #4294967295
 800627e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006280:	69bb      	ldr	r3, [r7, #24]
	}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b088      	sub	sp, #32
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062a2:	3b01      	subs	r3, #1
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f023 0307 	bic.w	r3, r3, #7
 80062b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	617b      	str	r3, [r7, #20]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
 80062d6:	e012      	b.n	80062fe <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	7819      	ldrb	r1, [r3, #0]
 80062e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	3334      	adds	r3, #52	; 0x34
 80062e8:	460a      	mov	r2, r1
 80062ea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d006      	beq.n	8006306 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	3301      	adds	r3, #1
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	2b0f      	cmp	r3, #15
 8006302:	d9e9      	bls.n	80062d8 <prvInitialiseNewTask+0x4e>
 8006304:	e000      	b.n	8006308 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006306:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2b06      	cmp	r3, #6
 8006314:	d901      	bls.n	800631a <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006316:	2306      	movs	r3, #6
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006324:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	2200      	movs	r2, #0
 800632a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	3304      	adds	r3, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe ff28 	bl	8005186 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	3318      	adds	r3, #24
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe ff23 	bl	8005186 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006344:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	f1c3 0207 	rsb	r2, r3, #7
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006354:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2200      	movs	r2, #0
 800635a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	69b8      	ldr	r0, [r7, #24]
 800636a:	f001 fb4d 	bl	8007a08 <pxPortInitialiseStack>
 800636e:	4602      	mov	r2, r0
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006380:	bf00      	nop
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006390:	f001 fc2c 	bl	8007bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006394:	4b2a      	ldr	r3, [pc, #168]	; (8006440 <prvAddNewTaskToReadyList+0xb8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	4a29      	ldr	r2, [pc, #164]	; (8006440 <prvAddNewTaskToReadyList+0xb8>)
 800639c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800639e:	4b29      	ldr	r3, [pc, #164]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063a6:	4a27      	ldr	r2, [pc, #156]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063ac:	4b24      	ldr	r3, [pc, #144]	; (8006440 <prvAddNewTaskToReadyList+0xb8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d110      	bne.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063b4:	f000 fc9a 	bl	8006cec <prvInitialiseTaskLists>
 80063b8:	e00d      	b.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <prvAddNewTaskToReadyList+0xc0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063c2:	4b20      	ldr	r3, [pc, #128]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d802      	bhi.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063d0:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	4a1b      	ldr	r2, [pc, #108]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 80063de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	2201      	movs	r2, #1
 80063e6:	409a      	lsls	r2, r3
 80063e8:	4b19      	ldr	r3, [pc, #100]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	4a18      	ldr	r2, [pc, #96]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4a15      	ldr	r2, [pc, #84]	; (8006454 <prvAddNewTaskToReadyList+0xcc>)
 8006400:	441a      	add	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3304      	adds	r3, #4
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f7fe fec8 	bl	800519e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800640e:	f001 fc1d 	bl	8007c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <prvAddNewTaskToReadyList+0xc0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00e      	beq.n	8006438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	429a      	cmp	r2, r3
 8006426:	d207      	bcs.n	8006438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <prvAddNewTaskToReadyList+0xd0>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20000ae0 	.word	0x20000ae0
 8006444:	200009e0 	.word	0x200009e0
 8006448:	20000aec 	.word	0x20000aec
 800644c:	20000afc 	.word	0x20000afc
 8006450:	20000ae8 	.word	0x20000ae8
 8006454:	200009e4 	.word	0x200009e4
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006464:	f001 fbc2 	bl	8007bec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <vTaskDelete+0x18>
 800646e:	4b39      	ldr	r3, [pc, #228]	; (8006554 <vTaskDelete+0xf8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	e000      	b.n	8006476 <vTaskDelete+0x1a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3304      	adds	r3, #4
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe fee9 	bl	8005254 <uxListRemove>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d115      	bne.n	80064b4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4932      	ldr	r1, [pc, #200]	; (8006558 <vTaskDelete+0xfc>)
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <vTaskDelete+0x58>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	2201      	movs	r2, #1
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	43da      	mvns	r2, r3
 80064aa:	4b2c      	ldr	r3, [pc, #176]	; (800655c <vTaskDelete+0x100>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4013      	ands	r3, r2
 80064b0:	4a2a      	ldr	r2, [pc, #168]	; (800655c <vTaskDelete+0x100>)
 80064b2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3318      	adds	r3, #24
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe fec7 	bl	8005254 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80064c6:	4b26      	ldr	r3, [pc, #152]	; (8006560 <vTaskDelete+0x104>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	4a24      	ldr	r2, [pc, #144]	; (8006560 <vTaskDelete+0x104>)
 80064ce:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80064d0:	4b20      	ldr	r3, [pc, #128]	; (8006554 <vTaskDelete+0xf8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d10b      	bne.n	80064f2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3304      	adds	r3, #4
 80064de:	4619      	mov	r1, r3
 80064e0:	4820      	ldr	r0, [pc, #128]	; (8006564 <vTaskDelete+0x108>)
 80064e2:	f7fe fe5c 	bl	800519e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80064e6:	4b20      	ldr	r3, [pc, #128]	; (8006568 <vTaskDelete+0x10c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3301      	adds	r3, #1
 80064ec:	4a1e      	ldr	r2, [pc, #120]	; (8006568 <vTaskDelete+0x10c>)
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	e009      	b.n	8006506 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80064f2:	4b1e      	ldr	r3, [pc, #120]	; (800656c <vTaskDelete+0x110>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	4a1c      	ldr	r2, [pc, #112]	; (800656c <vTaskDelete+0x110>)
 80064fa:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fc63 	bl	8006dc8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006502:	f000 fc91 	bl	8006e28 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006506:	f001 fba1 	bl	8007c4c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800650a:	4b19      	ldr	r3, [pc, #100]	; (8006570 <vTaskDelete+0x114>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01b      	beq.n	800654a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <vTaskDelete+0xf8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	429a      	cmp	r2, r3
 800651a:	d116      	bne.n	800654a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <vTaskDelete+0x118>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <vTaskDelete+0xde>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	60bb      	str	r3, [r7, #8]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800653a:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <vTaskDelete+0x11c>)
 800653c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200009e0 	.word	0x200009e0
 8006558:	200009e4 	.word	0x200009e4
 800655c:	20000ae8 	.word	0x20000ae8
 8006560:	20000afc 	.word	0x20000afc
 8006564:	20000ab4 	.word	0x20000ab4
 8006568:	20000ac8 	.word	0x20000ac8
 800656c:	20000ae0 	.word	0x20000ae0
 8006570:	20000aec 	.word	0x20000aec
 8006574:	20000b08 	.word	0x20000b08
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d017      	beq.n	80065be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <vTaskDelay+0x60>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <vTaskDelay+0x30>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60bb      	str	r3, [r7, #8]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065ac:	f000 f880 	bl	80066b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065b0:	2100      	movs	r1, #0
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fe3a 	bl	800722c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065b8:	f000 f888 	bl	80066cc <xTaskResumeAll>
 80065bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d107      	bne.n	80065d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <vTaskDelay+0x64>)
 80065c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000b08 	.word	0x20000b08
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065f2:	463a      	mov	r2, r7
 80065f4:	1d39      	adds	r1, r7, #4
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fa fe2c 	bl	8001258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	9202      	str	r2, [sp, #8]
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	2300      	movs	r3, #0
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	2300      	movs	r3, #0
 8006610:	460a      	mov	r2, r1
 8006612:	4921      	ldr	r1, [pc, #132]	; (8006698 <vTaskStartScheduler+0xb4>)
 8006614:	4821      	ldr	r0, [pc, #132]	; (800669c <vTaskStartScheduler+0xb8>)
 8006616:	f7ff fd97 	bl	8006148 <xTaskCreateStatic>
 800661a:	4603      	mov	r3, r0
 800661c:	4a20      	ldr	r2, [pc, #128]	; (80066a0 <vTaskStartScheduler+0xbc>)
 800661e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006620:	4b1f      	ldr	r3, [pc, #124]	; (80066a0 <vTaskStartScheduler+0xbc>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006628:	2301      	movs	r3, #1
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	e001      	b.n	8006632 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800662e:	2300      	movs	r3, #0
 8006630:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d102      	bne.n	800663e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006638:	f000 fe5e 	bl	80072f8 <xTimerCreateTimerTask>
 800663c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d116      	bne.n	8006672 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	613b      	str	r3, [r7, #16]
}
 8006656:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <vTaskStartScheduler+0xc0>)
 800665a:	f04f 32ff 	mov.w	r2, #4294967295
 800665e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006660:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <vTaskStartScheduler+0xc4>)
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006666:	4b11      	ldr	r3, [pc, #68]	; (80066ac <vTaskStartScheduler+0xc8>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800666c:	f001 fa4c 	bl	8007b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006670:	e00e      	b.n	8006690 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d10a      	bne.n	8006690 <vTaskStartScheduler+0xac>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	60fb      	str	r3, [r7, #12]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <vTaskStartScheduler+0xaa>
}
 8006690:	bf00      	nop
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	0800830c 	.word	0x0800830c
 800669c:	08006cbd 	.word	0x08006cbd
 80066a0:	20000b04 	.word	0x20000b04
 80066a4:	20000b00 	.word	0x20000b00
 80066a8:	20000aec 	.word	0x20000aec
 80066ac:	20000ae4 	.word	0x20000ae4

080066b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066b4:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <vTaskSuspendAll+0x18>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	4a03      	ldr	r2, [pc, #12]	; (80066c8 <vTaskSuspendAll+0x18>)
 80066bc:	6013      	str	r3, [r2, #0]
}
 80066be:	bf00      	nop
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000b08 	.word	0x20000b08

080066cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066da:	4b41      	ldr	r3, [pc, #260]	; (80067e0 <xTaskResumeAll+0x114>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	603b      	str	r3, [r7, #0]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066f8:	f001 fa78 	bl	8007bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066fc:	4b38      	ldr	r3, [pc, #224]	; (80067e0 <xTaskResumeAll+0x114>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3b01      	subs	r3, #1
 8006702:	4a37      	ldr	r2, [pc, #220]	; (80067e0 <xTaskResumeAll+0x114>)
 8006704:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006706:	4b36      	ldr	r3, [pc, #216]	; (80067e0 <xTaskResumeAll+0x114>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d161      	bne.n	80067d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800670e:	4b35      	ldr	r3, [pc, #212]	; (80067e4 <xTaskResumeAll+0x118>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d05d      	beq.n	80067d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006716:	e02e      	b.n	8006776 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006718:	4b33      	ldr	r3, [pc, #204]	; (80067e8 <xTaskResumeAll+0x11c>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3318      	adds	r3, #24
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe fd95 	bl	8005254 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3304      	adds	r3, #4
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fd90 	bl	8005254 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	2201      	movs	r2, #1
 800673a:	409a      	lsls	r2, r3
 800673c:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <xTaskResumeAll+0x120>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4313      	orrs	r3, r2
 8006742:	4a2a      	ldr	r2, [pc, #168]	; (80067ec <xTaskResumeAll+0x120>)
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4a27      	ldr	r2, [pc, #156]	; (80067f0 <xTaskResumeAll+0x124>)
 8006754:	441a      	add	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3304      	adds	r3, #4
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f7fe fd1e 	bl	800519e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006766:	4b23      	ldr	r3, [pc, #140]	; (80067f4 <xTaskResumeAll+0x128>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	429a      	cmp	r2, r3
 800676e:	d302      	bcc.n	8006776 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006770:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <xTaskResumeAll+0x12c>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006776:	4b1c      	ldr	r3, [pc, #112]	; (80067e8 <xTaskResumeAll+0x11c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1cc      	bne.n	8006718 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006784:	f000 fb50 	bl	8006e28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006788:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <xTaskResumeAll+0x130>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d010      	beq.n	80067b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006794:	f000 f844 	bl	8006820 <xTaskIncrementTick>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800679e:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <xTaskResumeAll+0x12c>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f1      	bne.n	8006794 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80067b0:	4b12      	ldr	r3, [pc, #72]	; (80067fc <xTaskResumeAll+0x130>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <xTaskResumeAll+0x12c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067c2:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <xTaskResumeAll+0x134>)
 80067c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067d2:	f001 fa3b 	bl	8007c4c <vPortExitCritical>

	return xAlreadyYielded;
 80067d6:	68bb      	ldr	r3, [r7, #8]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000b08 	.word	0x20000b08
 80067e4:	20000ae0 	.word	0x20000ae0
 80067e8:	20000aa0 	.word	0x20000aa0
 80067ec:	20000ae8 	.word	0x20000ae8
 80067f0:	200009e4 	.word	0x200009e4
 80067f4:	200009e0 	.word	0x200009e0
 80067f8:	20000af4 	.word	0x20000af4
 80067fc:	20000af0 	.word	0x20000af0
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800680a:	4b04      	ldr	r3, [pc, #16]	; (800681c <xTaskGetTickCount+0x18>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006810:	687b      	ldr	r3, [r7, #4]
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr
 800681c:	20000ae4 	.word	0x20000ae4

08006820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800682a:	4b51      	ldr	r3, [pc, #324]	; (8006970 <xTaskIncrementTick+0x150>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 808d 	bne.w	800694e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006834:	4b4f      	ldr	r3, [pc, #316]	; (8006974 <xTaskIncrementTick+0x154>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800683c:	4a4d      	ldr	r2, [pc, #308]	; (8006974 <xTaskIncrementTick+0x154>)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d120      	bne.n	800688a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006848:	4b4b      	ldr	r3, [pc, #300]	; (8006978 <xTaskIncrementTick+0x158>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <xTaskIncrementTick+0x48>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	603b      	str	r3, [r7, #0]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <xTaskIncrementTick+0x46>
 8006868:	4b43      	ldr	r3, [pc, #268]	; (8006978 <xTaskIncrementTick+0x158>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	4b43      	ldr	r3, [pc, #268]	; (800697c <xTaskIncrementTick+0x15c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a41      	ldr	r2, [pc, #260]	; (8006978 <xTaskIncrementTick+0x158>)
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4a41      	ldr	r2, [pc, #260]	; (800697c <xTaskIncrementTick+0x15c>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	4b40      	ldr	r3, [pc, #256]	; (8006980 <xTaskIncrementTick+0x160>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	4a3f      	ldr	r2, [pc, #252]	; (8006980 <xTaskIncrementTick+0x160>)
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	f000 facf 	bl	8006e28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800688a:	4b3e      	ldr	r3, [pc, #248]	; (8006984 <xTaskIncrementTick+0x164>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	429a      	cmp	r2, r3
 8006892:	d34d      	bcc.n	8006930 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006894:	4b38      	ldr	r3, [pc, #224]	; (8006978 <xTaskIncrementTick+0x158>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <xTaskIncrementTick+0x82>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <xTaskIncrementTick+0x84>
 80068a2:	2300      	movs	r3, #0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a8:	4b36      	ldr	r3, [pc, #216]	; (8006984 <xTaskIncrementTick+0x164>)
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295
 80068ae:	601a      	str	r2, [r3, #0]
					break;
 80068b0:	e03e      	b.n	8006930 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068b2:	4b31      	ldr	r3, [pc, #196]	; (8006978 <xTaskIncrementTick+0x158>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d203      	bcs.n	80068d2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068ca:	4a2e      	ldr	r2, [pc, #184]	; (8006984 <xTaskIncrementTick+0x164>)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6013      	str	r3, [r2, #0]
						break;
 80068d0:	e02e      	b.n	8006930 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fcbc 	bl	8005254 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	3318      	adds	r3, #24
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe fcb3 	bl	8005254 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f2:	2201      	movs	r2, #1
 80068f4:	409a      	lsls	r2, r3
 80068f6:	4b24      	ldr	r3, [pc, #144]	; (8006988 <xTaskIncrementTick+0x168>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	4a22      	ldr	r2, [pc, #136]	; (8006988 <xTaskIncrementTick+0x168>)
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	4613      	mov	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4a1f      	ldr	r2, [pc, #124]	; (800698c <xTaskIncrementTick+0x16c>)
 800690e:	441a      	add	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	3304      	adds	r3, #4
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f7fe fc41 	bl	800519e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <xTaskIncrementTick+0x170>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	429a      	cmp	r2, r3
 8006928:	d3b4      	bcc.n	8006894 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800692a:	2301      	movs	r3, #1
 800692c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800692e:	e7b1      	b.n	8006894 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <xTaskIncrementTick+0x170>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006936:	4915      	ldr	r1, [pc, #84]	; (800698c <xTaskIncrementTick+0x16c>)
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d907      	bls.n	8006958 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006948:	2301      	movs	r3, #1
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e004      	b.n	8006958 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800694e:	4b11      	ldr	r3, [pc, #68]	; (8006994 <xTaskIncrementTick+0x174>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	4a0f      	ldr	r2, [pc, #60]	; (8006994 <xTaskIncrementTick+0x174>)
 8006956:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <xTaskIncrementTick+0x178>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006960:	2301      	movs	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006964:	697b      	ldr	r3, [r7, #20]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000b08 	.word	0x20000b08
 8006974:	20000ae4 	.word	0x20000ae4
 8006978:	20000a98 	.word	0x20000a98
 800697c:	20000a9c 	.word	0x20000a9c
 8006980:	20000af8 	.word	0x20000af8
 8006984:	20000b00 	.word	0x20000b00
 8006988:	20000ae8 	.word	0x20000ae8
 800698c:	200009e4 	.word	0x200009e4
 8006990:	200009e0 	.word	0x200009e0
 8006994:	20000af0 	.word	0x20000af0
 8006998:	20000af4 	.word	0x20000af4

0800699c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069a2:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <vTaskSwitchContext+0xa0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069aa:	4b25      	ldr	r3, [pc, #148]	; (8006a40 <vTaskSwitchContext+0xa4>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069b0:	e03f      	b.n	8006a32 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80069b2:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <vTaskSwitchContext+0xa4>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80069b8:	4b22      	ldr	r3, [pc, #136]	; (8006a44 <vTaskSwitchContext+0xa8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	fab3 f383 	clz	r3, r3
 80069c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	f1c3 031f 	rsb	r3, r3, #31
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	491e      	ldr	r1, [pc, #120]	; (8006a48 <vTaskSwitchContext+0xac>)
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	607b      	str	r3, [r7, #4]
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <vTaskSwitchContext+0x5a>
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4a11      	ldr	r2, [pc, #68]	; (8006a48 <vTaskSwitchContext+0xac>)
 8006a04:	4413      	add	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d104      	bne.n	8006a28 <vTaskSwitchContext+0x8c>
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	605a      	str	r2, [r3, #4]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	4a07      	ldr	r2, [pc, #28]	; (8006a4c <vTaskSwitchContext+0xb0>)
 8006a30:	6013      	str	r3, [r2, #0]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr
 8006a3c:	20000b08 	.word	0x20000b08
 8006a40:	20000af4 	.word	0x20000af4
 8006a44:	20000ae8 	.word	0x20000ae8
 8006a48:	200009e4 	.word	0x200009e4
 8006a4c:	200009e0 	.word	0x200009e0

08006a50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	60fb      	str	r3, [r7, #12]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a76:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <vTaskPlaceOnEventList+0x44>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3318      	adds	r3, #24
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fe fbb0 	bl	80051e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a84:	2101      	movs	r1, #1
 8006a86:	6838      	ldr	r0, [r7, #0]
 8006a88:	f000 fbd0 	bl	800722c <prvAddCurrentTaskToDelayedList>
}
 8006a8c:	bf00      	nop
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	200009e0 	.word	0x200009e0

08006a98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	617b      	str	r3, [r7, #20]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <vTaskPlaceOnEventListRestricted+0x54>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3318      	adds	r3, #24
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7fe fb68 	bl	800519e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	68b8      	ldr	r0, [r7, #8]
 8006ade:	f000 fba5 	bl	800722c <prvAddCurrentTaskToDelayedList>
	}
 8006ae2:	bf00      	nop
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	200009e0 	.word	0x200009e0

08006af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60fb      	str	r3, [r7, #12]
}
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	3318      	adds	r3, #24
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fb97 	bl	8005254 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b26:	4b1d      	ldr	r3, [pc, #116]	; (8006b9c <xTaskRemoveFromEventList+0xac>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d11c      	bne.n	8006b68 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fb8e 	bl	8005254 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	409a      	lsls	r2, r3
 8006b40:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <xTaskRemoveFromEventList+0xb0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <xTaskRemoveFromEventList+0xb0>)
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <xTaskRemoveFromEventList+0xb4>)
 8006b58:	441a      	add	r2, r3
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4610      	mov	r0, r2
 8006b62:	f7fe fb1c 	bl	800519e <vListInsertEnd>
 8006b66:	e005      	b.n	8006b74 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	3318      	adds	r3, #24
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	480e      	ldr	r0, [pc, #56]	; (8006ba8 <xTaskRemoveFromEventList+0xb8>)
 8006b70:	f7fe fb15 	bl	800519e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <xTaskRemoveFromEventList+0xbc>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d905      	bls.n	8006b8e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b86:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <xTaskRemoveFromEventList+0xc0>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	e001      	b.n	8006b92 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b92:	697b      	ldr	r3, [r7, #20]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20000b08 	.word	0x20000b08
 8006ba0:	20000ae8 	.word	0x20000ae8
 8006ba4:	200009e4 	.word	0x200009e4
 8006ba8:	20000aa0 	.word	0x20000aa0
 8006bac:	200009e0 	.word	0x200009e0
 8006bb0:	20000af4 	.word	0x20000af4

08006bb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <vTaskInternalSetTimeOutState+0x24>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <vTaskInternalSetTimeOutState+0x28>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	605a      	str	r2, [r3, #4]
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20000af8 	.word	0x20000af8
 8006bdc:	20000ae4 	.word	0x20000ae4

08006be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	613b      	str	r3, [r7, #16]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	60fb      	str	r3, [r7, #12]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c22:	f000 ffe3 	bl	8007bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c26:	4b1d      	ldr	r3, [pc, #116]	; (8006c9c <xTaskCheckForTimeOut+0xbc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d102      	bne.n	8006c46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	e023      	b.n	8006c8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <xTaskCheckForTimeOut+0xc0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d007      	beq.n	8006c62 <xTaskCheckForTimeOut+0x82>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d302      	bcc.n	8006c62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	e015      	b.n	8006c8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d20b      	bcs.n	8006c84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	1ad2      	subs	r2, r2, r3
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff ff9b 	bl	8006bb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	e004      	b.n	8006c8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c8e:	f000 ffdd 	bl	8007c4c <vPortExitCritical>

	return xReturn;
 8006c92:	69fb      	ldr	r3, [r7, #28]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000ae4 	.word	0x20000ae4
 8006ca0:	20000af8 	.word	0x20000af8

08006ca4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ca8:	4b03      	ldr	r3, [pc, #12]	; (8006cb8 <vTaskMissedYield+0x14>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
}
 8006cae:	bf00      	nop
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20000af4 	.word	0x20000af4

08006cbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cc4:	f000 f852 	bl	8006d6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cc8:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <prvIdleTask+0x28>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d9f9      	bls.n	8006cc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cd0:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <prvIdleTask+0x2c>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ce0:	e7f0      	b.n	8006cc4 <prvIdleTask+0x8>
 8006ce2:	bf00      	nop
 8006ce4:	200009e4 	.word	0x200009e4
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	607b      	str	r3, [r7, #4]
 8006cf6:	e00c      	b.n	8006d12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4a12      	ldr	r2, [pc, #72]	; (8006d4c <prvInitialiseTaskLists+0x60>)
 8006d04:	4413      	add	r3, r2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fa1e 	bl	8005148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	607b      	str	r3, [r7, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b06      	cmp	r3, #6
 8006d16:	d9ef      	bls.n	8006cf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d18:	480d      	ldr	r0, [pc, #52]	; (8006d50 <prvInitialiseTaskLists+0x64>)
 8006d1a:	f7fe fa15 	bl	8005148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d1e:	480d      	ldr	r0, [pc, #52]	; (8006d54 <prvInitialiseTaskLists+0x68>)
 8006d20:	f7fe fa12 	bl	8005148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d24:	480c      	ldr	r0, [pc, #48]	; (8006d58 <prvInitialiseTaskLists+0x6c>)
 8006d26:	f7fe fa0f 	bl	8005148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d2a:	480c      	ldr	r0, [pc, #48]	; (8006d5c <prvInitialiseTaskLists+0x70>)
 8006d2c:	f7fe fa0c 	bl	8005148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d30:	480b      	ldr	r0, [pc, #44]	; (8006d60 <prvInitialiseTaskLists+0x74>)
 8006d32:	f7fe fa09 	bl	8005148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d36:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <prvInitialiseTaskLists+0x78>)
 8006d38:	4a05      	ldr	r2, [pc, #20]	; (8006d50 <prvInitialiseTaskLists+0x64>)
 8006d3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <prvInitialiseTaskLists+0x7c>)
 8006d3e:	4a05      	ldr	r2, [pc, #20]	; (8006d54 <prvInitialiseTaskLists+0x68>)
 8006d40:	601a      	str	r2, [r3, #0]
}
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	200009e4 	.word	0x200009e4
 8006d50:	20000a70 	.word	0x20000a70
 8006d54:	20000a84 	.word	0x20000a84
 8006d58:	20000aa0 	.word	0x20000aa0
 8006d5c:	20000ab4 	.word	0x20000ab4
 8006d60:	20000acc 	.word	0x20000acc
 8006d64:	20000a98 	.word	0x20000a98
 8006d68:	20000a9c 	.word	0x20000a9c

08006d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d72:	e019      	b.n	8006da8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d74:	f000 ff3a 	bl	8007bec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d78:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <prvCheckTasksWaitingTermination+0x50>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3304      	adds	r3, #4
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe fa65 	bl	8005254 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d8a:	4b0d      	ldr	r3, [pc, #52]	; (8006dc0 <prvCheckTasksWaitingTermination+0x54>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	4a0b      	ldr	r2, [pc, #44]	; (8006dc0 <prvCheckTasksWaitingTermination+0x54>)
 8006d92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d94:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <prvCheckTasksWaitingTermination+0x58>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	4a0a      	ldr	r2, [pc, #40]	; (8006dc4 <prvCheckTasksWaitingTermination+0x58>)
 8006d9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d9e:	f000 ff55 	bl	8007c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f810 	bl	8006dc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <prvCheckTasksWaitingTermination+0x58>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e1      	bne.n	8006d74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000ab4 	.word	0x20000ab4
 8006dc0:	20000ae0 	.word	0x20000ae0
 8006dc4:	20000ac8 	.word	0x20000ac8

08006dc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d108      	bne.n	8006dec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f8a6 	bl	8007f30 <vPortFree>
				vPortFree( pxTCB );
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 f8a3 	bl	8007f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dea:	e018      	b.n	8006e1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d103      	bne.n	8006dfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 f89a 	bl	8007f30 <vPortFree>
	}
 8006dfc:	e00f      	b.n	8006e1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d00a      	beq.n	8006e1e <prvDeleteTCB+0x56>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	60fb      	str	r3, [r7, #12]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <prvDeleteTCB+0x54>
	}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <prvResetNextTaskUnblockTime+0x40>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <prvResetNextTaskUnblockTime+0x14>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <prvResetNextTaskUnblockTime+0x16>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e42:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <prvResetNextTaskUnblockTime+0x44>)
 8006e44:	f04f 32ff 	mov.w	r2, #4294967295
 8006e48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e4a:	e008      	b.n	8006e5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <prvResetNextTaskUnblockTime+0x40>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4a04      	ldr	r2, [pc, #16]	; (8006e6c <prvResetNextTaskUnblockTime+0x44>)
 8006e5c:	6013      	str	r3, [r2, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr
 8006e68:	20000a98 	.word	0x20000a98
 8006e6c:	20000b00 	.word	0x20000b00

08006e70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e76:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <xTaskGetSchedulerState+0x34>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d102      	bne.n	8006e84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	e008      	b.n	8006e96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e84:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <xTaskGetSchedulerState+0x38>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	e001      	b.n	8006e96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e92:	2300      	movs	r3, #0
 8006e94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e96:	687b      	ldr	r3, [r7, #4]
	}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000aec 	.word	0x20000aec
 8006ea8:	20000b08 	.word	0x20000b08

08006eac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d06e      	beq.n	8006fa0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec6:	4b39      	ldr	r3, [pc, #228]	; (8006fac <xTaskPriorityInherit+0x100>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d25e      	bcs.n	8006f8e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	db06      	blt.n	8006ee6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	4b34      	ldr	r3, [pc, #208]	; (8006fac <xTaskPriorityInherit+0x100>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	f1c3 0207 	rsb	r2, r3, #7
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6959      	ldr	r1, [r3, #20]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4a2e      	ldr	r2, [pc, #184]	; (8006fb0 <xTaskPriorityInherit+0x104>)
 8006ef8:	4413      	add	r3, r2
 8006efa:	4299      	cmp	r1, r3
 8006efc:	d101      	bne.n	8006f02 <xTaskPriorityInherit+0x56>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <xTaskPriorityInherit+0x58>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d03a      	beq.n	8006f7e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe f9a1 	bl	8005254 <uxListRemove>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d115      	bne.n	8006f44 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1c:	4924      	ldr	r1, [pc, #144]	; (8006fb0 <xTaskPriorityInherit+0x104>)
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	440b      	add	r3, r1
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <xTaskPriorityInherit+0x98>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	2201      	movs	r2, #1
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	43da      	mvns	r2, r3
 8006f3a:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <xTaskPriorityInherit+0x108>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	4a1c      	ldr	r2, [pc, #112]	; (8006fb4 <xTaskPriorityInherit+0x108>)
 8006f42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f44:	4b19      	ldr	r3, [pc, #100]	; (8006fac <xTaskPriorityInherit+0x100>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	2201      	movs	r2, #1
 8006f54:	409a      	lsls	r2, r3
 8006f56:	4b17      	ldr	r3, [pc, #92]	; (8006fb4 <xTaskPriorityInherit+0x108>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <xTaskPriorityInherit+0x108>)
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4a10      	ldr	r2, [pc, #64]	; (8006fb0 <xTaskPriorityInherit+0x104>)
 8006f6e:	441a      	add	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f7fe f911 	bl	800519e <vListInsertEnd>
 8006f7c:	e004      	b.n	8006f88 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <xTaskPriorityInherit+0x100>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e008      	b.n	8006fa0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f92:	4b06      	ldr	r3, [pc, #24]	; (8006fac <xTaskPriorityInherit+0x100>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d201      	bcs.n	8006fa0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
	}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	200009e0 	.word	0x200009e0
 8006fb0:	200009e4 	.word	0x200009e4
 8006fb4:	20000ae8 	.word	0x20000ae8

08006fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d06e      	beq.n	80070ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fce:	4b3a      	ldr	r3, [pc, #232]	; (80070b8 <xTaskPriorityDisinherit+0x100>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d00a      	beq.n	8006fee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	60fb      	str	r3, [r7, #12]
}
 8006fea:	bf00      	nop
 8006fec:	e7fe      	b.n	8006fec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60bb      	str	r3, [r7, #8]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007010:	1e5a      	subs	r2, r3, #1
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701e:	429a      	cmp	r2, r3
 8007020:	d044      	beq.n	80070ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007026:	2b00      	cmp	r3, #0
 8007028:	d140      	bne.n	80070ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe f910 	bl	8005254 <uxListRemove>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d115      	bne.n	8007066 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703e:	491f      	ldr	r1, [pc, #124]	; (80070bc <xTaskPriorityDisinherit+0x104>)
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <xTaskPriorityDisinherit+0xae>
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	2201      	movs	r2, #1
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43da      	mvns	r2, r3
 800705c:	4b18      	ldr	r3, [pc, #96]	; (80070c0 <xTaskPriorityDisinherit+0x108>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4013      	ands	r3, r2
 8007062:	4a17      	ldr	r2, [pc, #92]	; (80070c0 <xTaskPriorityDisinherit+0x108>)
 8007064:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	f1c3 0207 	rsb	r2, r3, #7
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	2201      	movs	r2, #1
 8007080:	409a      	lsls	r2, r3
 8007082:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <xTaskPriorityDisinherit+0x108>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4313      	orrs	r3, r2
 8007088:	4a0d      	ldr	r2, [pc, #52]	; (80070c0 <xTaskPriorityDisinherit+0x108>)
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4a08      	ldr	r2, [pc, #32]	; (80070bc <xTaskPriorityDisinherit+0x104>)
 800709a:	441a      	add	r2, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	3304      	adds	r3, #4
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f7fe f87b 	bl	800519e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070ac:	697b      	ldr	r3, [r7, #20]
	}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	200009e0 	.word	0x200009e0
 80070bc:	200009e4 	.word	0x200009e4
 80070c0:	20000ae8 	.word	0x20000ae8

080070c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070d2:	2301      	movs	r3, #1
 80070d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8088 	beq.w	80071ee <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	60fb      	str	r3, [r7, #12]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d902      	bls.n	800710c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	61fb      	str	r3, [r7, #28]
 800710a:	e002      	b.n	8007112 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007110:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	429a      	cmp	r2, r3
 800711a:	d068      	beq.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	429a      	cmp	r2, r3
 8007124:	d163      	bne.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007126:	4b34      	ldr	r3, [pc, #208]	; (80071f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	429a      	cmp	r2, r3
 800712e:	d10a      	bne.n	8007146 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	60bb      	str	r3, [r7, #8]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	db04      	blt.n	8007164 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f1c3 0207 	rsb	r2, r3, #7
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	6959      	ldr	r1, [r3, #20]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4a22      	ldr	r2, [pc, #136]	; (80071fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007174:	4413      	add	r3, r2
 8007176:	4299      	cmp	r1, r3
 8007178:	d101      	bne.n	800717e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d034      	beq.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	3304      	adds	r3, #4
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe f863 	bl	8005254 <uxListRemove>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d115      	bne.n	80071c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	4918      	ldr	r1, [pc, #96]	; (80071fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	2201      	movs	r2, #1
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	43da      	mvns	r2, r3
 80071b6:	4b12      	ldr	r3, [pc, #72]	; (8007200 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4013      	ands	r3, r2
 80071bc:	4a10      	ldr	r2, [pc, #64]	; (8007200 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80071be:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	2201      	movs	r2, #1
 80071c6:	409a      	lsls	r2, r3
 80071c8:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a07      	ldr	r2, [pc, #28]	; (80071fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80071e0:	441a      	add	r2, r3
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fd ffd8 	bl	800519e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071ee:	bf00      	nop
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200009e0 	.word	0x200009e0
 80071fc:	200009e4 	.word	0x200009e4
 8007200:	20000ae8 	.word	0x20000ae8

08007204 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007208:	4b07      	ldr	r3, [pc, #28]	; (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007216:	3201      	adds	r2, #1
 8007218:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800721a:	4b03      	ldr	r3, [pc, #12]	; (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 800721c:	681b      	ldr	r3, [r3, #0]
	}
 800721e:	4618      	mov	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	200009e0 	.word	0x200009e0

0800722c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007236:	4b29      	ldr	r3, [pc, #164]	; (80072dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800723c:	4b28      	ldr	r3, [pc, #160]	; (80072e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3304      	adds	r3, #4
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe f806 	bl	8005254 <uxListRemove>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10b      	bne.n	8007266 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800724e:	4b24      	ldr	r3, [pc, #144]	; (80072e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	2201      	movs	r2, #1
 8007256:	fa02 f303 	lsl.w	r3, r2, r3
 800725a:	43da      	mvns	r2, r3
 800725c:	4b21      	ldr	r3, [pc, #132]	; (80072e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4013      	ands	r3, r2
 8007262:	4a20      	ldr	r2, [pc, #128]	; (80072e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007264:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726c:	d10a      	bne.n	8007284 <prvAddCurrentTaskToDelayedList+0x58>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d007      	beq.n	8007284 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007274:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3304      	adds	r3, #4
 800727a:	4619      	mov	r1, r3
 800727c:	481a      	ldr	r0, [pc, #104]	; (80072e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800727e:	f7fd ff8e 	bl	800519e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007282:	e026      	b.n	80072d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4413      	add	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800728c:	4b14      	ldr	r3, [pc, #80]	; (80072e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	429a      	cmp	r2, r3
 800729a:	d209      	bcs.n	80072b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800729c:	4b13      	ldr	r3, [pc, #76]	; (80072ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4619      	mov	r1, r3
 80072a8:	4610      	mov	r0, r2
 80072aa:	f7fd ff9b 	bl	80051e4 <vListInsert>
}
 80072ae:	e010      	b.n	80072d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072b0:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	4b0a      	ldr	r3, [pc, #40]	; (80072e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7fd ff91 	bl	80051e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072c2:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d202      	bcs.n	80072d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80072cc:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6013      	str	r3, [r2, #0]
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000ae4 	.word	0x20000ae4
 80072e0:	200009e0 	.word	0x200009e0
 80072e4:	20000ae8 	.word	0x20000ae8
 80072e8:	20000acc 	.word	0x20000acc
 80072ec:	20000a9c 	.word	0x20000a9c
 80072f0:	20000a98 	.word	0x20000a98
 80072f4:	20000b00 	.word	0x20000b00

080072f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007302:	f000 fb41 	bl	8007988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007306:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <xTimerCreateTimerTask+0x80>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d021      	beq.n	8007352 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007316:	1d3a      	adds	r2, r7, #4
 8007318:	f107 0108 	add.w	r1, r7, #8
 800731c:	f107 030c 	add.w	r3, r7, #12
 8007320:	4618      	mov	r0, r3
 8007322:	f7f9 ffb1 	bl	8001288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	9202      	str	r2, [sp, #8]
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	2302      	movs	r3, #2
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	2300      	movs	r3, #0
 8007336:	460a      	mov	r2, r1
 8007338:	4910      	ldr	r1, [pc, #64]	; (800737c <xTimerCreateTimerTask+0x84>)
 800733a:	4811      	ldr	r0, [pc, #68]	; (8007380 <xTimerCreateTimerTask+0x88>)
 800733c:	f7fe ff04 	bl	8006148 <xTaskCreateStatic>
 8007340:	4603      	mov	r3, r0
 8007342:	4a10      	ldr	r2, [pc, #64]	; (8007384 <xTimerCreateTimerTask+0x8c>)
 8007344:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007346:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <xTimerCreateTimerTask+0x8c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800734e:	2301      	movs	r3, #1
 8007350:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	613b      	str	r3, [r7, #16]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800736e:	697b      	ldr	r3, [r7, #20]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20000b3c 	.word	0x20000b3c
 800737c:	08008314 	.word	0x08008314
 8007380:	080075c5 	.word	0x080075c5
 8007384:	20000b40 	.word	0x20000b40

08007388 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007396:	202c      	movs	r0, #44	; 0x2c
 8007398:	f000 fd06 	bl	8007da8 <pvPortMalloc>
 800739c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00d      	beq.n	80073c0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 f846 	bl	8007444 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80073c0:	697b      	ldr	r3, [r7, #20]
	}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b08a      	sub	sp, #40	; 0x28
 80073ce:	af02      	add	r7, sp, #8
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
 80073d6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80073d8:	232c      	movs	r3, #44	; 0x2c
 80073da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b2c      	cmp	r3, #44	; 0x2c
 80073e0:	d00a      	beq.n	80073f8 <xTimerCreateStatic+0x2e>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	61bb      	str	r3, [r7, #24]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10a      	bne.n	8007414 <xTimerCreateStatic+0x4a>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	617b      	str	r3, [r7, #20]
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00d      	beq.n	800743a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f809 	bl	8007444 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800743a:	69fb      	ldr	r3, [r7, #28]
	}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	617b      	str	r3, [r7, #20]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	2b00      	cmp	r3, #0
 8007472:	d015      	beq.n	80074a0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007474:	f000 fa88 	bl	8007988 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	6a3a      	ldr	r2, [r7, #32]
 8007494:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	3304      	adds	r3, #4
 800749a:	4618      	mov	r0, r3
 800749c:	f7fd fe73 	bl	8005186 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80074a0:	bf00      	nop
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	; 0x28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	623b      	str	r3, [r7, #32]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074d6:	4b1a      	ldr	r3, [pc, #104]	; (8007540 <xTimerGenericCommand+0x98>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d02a      	beq.n	8007534 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b05      	cmp	r3, #5
 80074ee:	dc18      	bgt.n	8007522 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074f0:	f7ff fcbe 	bl	8006e70 <xTaskGetSchedulerState>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d109      	bne.n	800750e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074fa:	4b11      	ldr	r3, [pc, #68]	; (8007540 <xTimerGenericCommand+0x98>)
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	f107 0114 	add.w	r1, r7, #20
 8007502:	2300      	movs	r3, #0
 8007504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007506:	f7fe f80b 	bl	8005520 <xQueueGenericSend>
 800750a:	6278      	str	r0, [r7, #36]	; 0x24
 800750c:	e012      	b.n	8007534 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <xTimerGenericCommand+0x98>)
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	f107 0114 	add.w	r1, r7, #20
 8007516:	2300      	movs	r3, #0
 8007518:	2200      	movs	r2, #0
 800751a:	f7fe f801 	bl	8005520 <xQueueGenericSend>
 800751e:	6278      	str	r0, [r7, #36]	; 0x24
 8007520:	e008      	b.n	8007534 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007522:	4b07      	ldr	r3, [pc, #28]	; (8007540 <xTimerGenericCommand+0x98>)
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	f107 0114 	add.w	r1, r7, #20
 800752a:	2300      	movs	r3, #0
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	f7fe f8f5 	bl	800571c <xQueueGenericSendFromISR>
 8007532:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007536:	4618      	mov	r0, r3
 8007538:	3728      	adds	r7, #40	; 0x28
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000b3c 	.word	0x20000b3c

08007544 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af02      	add	r7, sp, #8
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800754e:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <prvProcessExpiredTimer+0x7c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	3304      	adds	r3, #4
 800755c:	4618      	mov	r0, r3
 800755e:	f7fd fe79 	bl	8005254 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d122      	bne.n	80075b0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	18d1      	adds	r1, r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	6978      	ldr	r0, [r7, #20]
 8007578:	f000 f8c8 	bl	800770c <prvInsertTimerInActiveList>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d016      	beq.n	80075b0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007582:	2300      	movs	r3, #0
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	2300      	movs	r3, #0
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	2100      	movs	r1, #0
 800758c:	6978      	ldr	r0, [r7, #20]
 800758e:	f7ff ff8b 	bl	80074a8 <xTimerGenericCommand>
 8007592:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10a      	bne.n	80075b0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	60fb      	str	r3, [r7, #12]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	6978      	ldr	r0, [r7, #20]
 80075b6:	4798      	blx	r3
}
 80075b8:	bf00      	nop
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20000b34 	.word	0x20000b34

080075c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f857 	bl	8007684 <prvGetNextExpireTime>
 80075d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	4619      	mov	r1, r3
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f803 	bl	80075e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075e2:	f000 f8d5 	bl	8007790 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075e6:	e7f1      	b.n	80075cc <prvTimerTask+0x8>

080075e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075f2:	f7ff f85d 	bl	80066b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075f6:	f107 0308 	add.w	r3, r7, #8
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 f866 	bl	80076cc <prvSampleTimeNow>
 8007600:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d130      	bne.n	800766a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <prvProcessTimerOrBlockTask+0x3c>
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	429a      	cmp	r2, r3
 8007614:	d806      	bhi.n	8007624 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007616:	f7ff f859 	bl	80066cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800761a:	68f9      	ldr	r1, [r7, #12]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff ff91 	bl	8007544 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007622:	e024      	b.n	800766e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d008      	beq.n	800763c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <prvProcessTimerOrBlockTask+0x90>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800763c:	4b0f      	ldr	r3, [pc, #60]	; (800767c <prvProcessTimerOrBlockTask+0x94>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4619      	mov	r1, r3
 800764a:	f7fe fd49 	bl	80060e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800764e:	f7ff f83d 	bl	80066cc <xTaskResumeAll>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007658:	4b09      	ldr	r3, [pc, #36]	; (8007680 <prvProcessTimerOrBlockTask+0x98>)
 800765a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	f3bf 8f6f 	isb	sy
}
 8007668:	e001      	b.n	800766e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800766a:	f7ff f82f 	bl	80066cc <xTaskResumeAll>
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000b38 	.word	0x20000b38
 800767c:	20000b3c 	.word	0x20000b3c
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800768c:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <prvGetNextExpireTime+0x44>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	bf0c      	ite	eq
 8007696:	2301      	moveq	r3, #1
 8007698:	2300      	movne	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d105      	bne.n	80076b6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076aa:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <prvGetNextExpireTime+0x44>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e001      	b.n	80076ba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076ba:	68fb      	ldr	r3, [r7, #12]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	20000b34 	.word	0x20000b34

080076cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076d4:	f7ff f896 	bl	8006804 <xTaskGetTickCount>
 80076d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076da:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <prvSampleTimeNow+0x3c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d205      	bcs.n	80076f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076e4:	f000 f8ee 	bl	80078c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e002      	b.n	80076f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076f6:	4a04      	ldr	r2, [pc, #16]	; (8007708 <prvSampleTimeNow+0x3c>)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076fc:	68fb      	ldr	r3, [r7, #12]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000b44 	.word	0x20000b44

0800770c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	429a      	cmp	r2, r3
 8007730:	d812      	bhi.n	8007758 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	1ad2      	subs	r2, r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	429a      	cmp	r2, r3
 800773e:	d302      	bcc.n	8007746 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007740:	2301      	movs	r3, #1
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	e01b      	b.n	800777e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007746:	4b10      	ldr	r3, [pc, #64]	; (8007788 <prvInsertTimerInActiveList+0x7c>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f7fd fd47 	bl	80051e4 <vListInsert>
 8007756:	e012      	b.n	800777e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d206      	bcs.n	800776e <prvInsertTimerInActiveList+0x62>
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d302      	bcc.n	800776e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007768:	2301      	movs	r3, #1
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	e007      	b.n	800777e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800776e:	4b07      	ldr	r3, [pc, #28]	; (800778c <prvInsertTimerInActiveList+0x80>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3304      	adds	r3, #4
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f7fd fd33 	bl	80051e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800777e:	697b      	ldr	r3, [r7, #20]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20000b38 	.word	0x20000b38
 800778c:	20000b34 	.word	0x20000b34

08007790 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08c      	sub	sp, #48	; 0x30
 8007794:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007796:	e081      	b.n	800789c <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	db7e      	blt.n	800789c <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d004      	beq.n	80077b4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	3304      	adds	r3, #4
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fd fd50 	bl	8005254 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077b4:	1d3b      	adds	r3, r7, #4
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff ff88 	bl	80076cc <prvSampleTimeNow>
 80077bc:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b09      	cmp	r3, #9
 80077c2:	d86a      	bhi.n	800789a <prvProcessReceivedCommands+0x10a>
 80077c4:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <prvProcessReceivedCommands+0x3c>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	080077f5 	.word	0x080077f5
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077f5 	.word	0x080077f5
 80077d8:	0800789d 	.word	0x0800789d
 80077dc:	08007851 	.word	0x08007851
 80077e0:	08007889 	.word	0x08007889
 80077e4:	080077f5 	.word	0x080077f5
 80077e8:	080077f5 	.word	0x080077f5
 80077ec:	0800789d 	.word	0x0800789d
 80077f0:	08007851 	.word	0x08007851
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	18d1      	adds	r1, r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007802:	f7ff ff83 	bl	800770c <prvInsertTimerInActiveList>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d047      	beq.n	800789c <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007812:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d13f      	bne.n	800789c <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	441a      	add	r2, r3
 8007824:	2300      	movs	r3, #0
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	2300      	movs	r3, #0
 800782a:	2100      	movs	r1, #0
 800782c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800782e:	f7ff fe3b 	bl	80074a8 <xTimerGenericCommand>
 8007832:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d130      	bne.n	800789c <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	61bb      	str	r3, [r7, #24]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	617b      	str	r3, [r7, #20]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	18d1      	adds	r1, r2, r3
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	6a3a      	ldr	r2, [r7, #32]
 8007880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007882:	f7ff ff43 	bl	800770c <prvInsertTimerInActiveList>
					break;
 8007886:	e009      	b.n	800789c <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 8007892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007894:	f000 fb4c 	bl	8007f30 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007898:	e000      	b.n	800789c <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800789a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800789c:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <prvProcessReceivedCommands+0x130>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f107 0108 	add.w	r1, r7, #8
 80078a4:	2200      	movs	r2, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe f85e 	bl	8005968 <xQueueReceive>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f47f af72 	bne.w	8007798 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	3728      	adds	r7, #40	; 0x28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000b3c 	.word	0x20000b3c

080078c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078ca:	e045      	b.n	8007958 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078cc:	4b2c      	ldr	r3, [pc, #176]	; (8007980 <prvSwitchTimerLists+0xbc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078d6:	4b2a      	ldr	r3, [pc, #168]	; (8007980 <prvSwitchTimerLists+0xbc>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fd fcb5 	bl	8005254 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d12e      	bne.n	8007958 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4413      	add	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	429a      	cmp	r2, r3
 800790a:	d90e      	bls.n	800792a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007918:	4b19      	ldr	r3, [pc, #100]	; (8007980 <prvSwitchTimerLists+0xbc>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fd fc5e 	bl	80051e4 <vListInsert>
 8007928:	e016      	b.n	8007958 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800792a:	2300      	movs	r3, #0
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	2300      	movs	r3, #0
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	2100      	movs	r1, #0
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff fdb7 	bl	80074a8 <xTimerGenericCommand>
 800793a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	603b      	str	r3, [r7, #0]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007958:	4b09      	ldr	r3, [pc, #36]	; (8007980 <prvSwitchTimerLists+0xbc>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1b4      	bne.n	80078cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007962:	4b07      	ldr	r3, [pc, #28]	; (8007980 <prvSwitchTimerLists+0xbc>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007968:	4b06      	ldr	r3, [pc, #24]	; (8007984 <prvSwitchTimerLists+0xc0>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a04      	ldr	r2, [pc, #16]	; (8007980 <prvSwitchTimerLists+0xbc>)
 800796e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007970:	4a04      	ldr	r2, [pc, #16]	; (8007984 <prvSwitchTimerLists+0xc0>)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	6013      	str	r3, [r2, #0]
}
 8007976:	bf00      	nop
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000b34 	.word	0x20000b34
 8007984:	20000b38 	.word	0x20000b38

08007988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800798e:	f000 f92d 	bl	8007bec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d120      	bne.n	80079dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800799a:	4814      	ldr	r0, [pc, #80]	; (80079ec <prvCheckForValidListAndQueue+0x64>)
 800799c:	f7fd fbd4 	bl	8005148 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079a0:	4813      	ldr	r0, [pc, #76]	; (80079f0 <prvCheckForValidListAndQueue+0x68>)
 80079a2:	f7fd fbd1 	bl	8005148 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079a6:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <prvCheckForValidListAndQueue+0x6c>)
 80079a8:	4a10      	ldr	r2, [pc, #64]	; (80079ec <prvCheckForValidListAndQueue+0x64>)
 80079aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079ac:	4b12      	ldr	r3, [pc, #72]	; (80079f8 <prvCheckForValidListAndQueue+0x70>)
 80079ae:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <prvCheckForValidListAndQueue+0x68>)
 80079b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079b2:	2300      	movs	r3, #0
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	4b11      	ldr	r3, [pc, #68]	; (80079fc <prvCheckForValidListAndQueue+0x74>)
 80079b8:	4a11      	ldr	r2, [pc, #68]	; (8007a00 <prvCheckForValidListAndQueue+0x78>)
 80079ba:	210c      	movs	r1, #12
 80079bc:	200a      	movs	r0, #10
 80079be:	f7fd fcdb 	bl	8005378 <xQueueGenericCreateStatic>
 80079c2:	4603      	mov	r3, r0
 80079c4:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d005      	beq.n	80079dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	490b      	ldr	r1, [pc, #44]	; (8007a04 <prvCheckForValidListAndQueue+0x7c>)
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fb5a 	bl	8006090 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079dc:	f000 f936 	bl	8007c4c <vPortExitCritical>
}
 80079e0:	bf00      	nop
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000b3c 	.word	0x20000b3c
 80079ec:	20000b0c 	.word	0x20000b0c
 80079f0:	20000b20 	.word	0x20000b20
 80079f4:	20000b34 	.word	0x20000b34
 80079f8:	20000b38 	.word	0x20000b38
 80079fc:	20000bc0 	.word	0x20000bc0
 8007a00:	20000b48 	.word	0x20000b48
 8007a04:	0800831c 	.word	0x0800831c

08007a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3b04      	subs	r3, #4
 8007a18:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b04      	subs	r3, #4
 8007a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f023 0201 	bic.w	r2, r3, #1
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a38:	4a08      	ldr	r2, [pc, #32]	; (8007a5c <pxPortInitialiseStack+0x54>)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3b14      	subs	r3, #20
 8007a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3b20      	subs	r3, #32
 8007a4e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a50:	68fb      	ldr	r3, [r7, #12]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bc80      	pop	{r7}
 8007a5a:	4770      	bx	lr
 8007a5c:	08007a61 	.word	0x08007a61

08007a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a6a:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <prvTaskExitError+0x54>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a72:	d00a      	beq.n	8007a8a <prvTaskExitError+0x2a>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	60fb      	str	r3, [r7, #12]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <prvTaskExitError+0x28>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	60bb      	str	r3, [r7, #8]
}
 8007a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a9e:	bf00      	nop
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0fc      	beq.n	8007aa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20000078 	.word	0x20000078
	...

08007ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <pxCurrentTCBConst2>)
 8007ac2:	6819      	ldr	r1, [r3, #0]
 8007ac4:	6808      	ldr	r0, [r1, #0]
 8007ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007aca:	f380 8809 	msr	PSP, r0
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f04f 0000 	mov.w	r0, #0
 8007ad6:	f380 8811 	msr	BASEPRI, r0
 8007ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8007ade:	4770      	bx	lr

08007ae0 <pxCurrentTCBConst2>:
 8007ae0:	200009e0 	.word	0x200009e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop

08007ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007ae8:	4806      	ldr	r0, [pc, #24]	; (8007b04 <prvPortStartFirstTask+0x1c>)
 8007aea:	6800      	ldr	r0, [r0, #0]
 8007aec:	6800      	ldr	r0, [r0, #0]
 8007aee:	f380 8808 	msr	MSP, r0
 8007af2:	b662      	cpsie	i
 8007af4:	b661      	cpsie	f
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	df00      	svc	0
 8007b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b02:	bf00      	nop
 8007b04:	e000ed08 	.word	0xe000ed08

08007b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b0e:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <xPortStartScheduler+0xd0>)
 8007b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	22ff      	movs	r2, #255	; 0xff
 8007b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	4b2a      	ldr	r3, [pc, #168]	; (8007bdc <xPortStartScheduler+0xd4>)
 8007b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b36:	4b2a      	ldr	r3, [pc, #168]	; (8007be0 <xPortStartScheduler+0xd8>)
 8007b38:	2207      	movs	r2, #7
 8007b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b3c:	e009      	b.n	8007b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b3e:	4b28      	ldr	r3, [pc, #160]	; (8007be0 <xPortStartScheduler+0xd8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <xPortStartScheduler+0xd8>)
 8007b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5a:	2b80      	cmp	r3, #128	; 0x80
 8007b5c:	d0ef      	beq.n	8007b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b5e:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <xPortStartScheduler+0xd8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f1c3 0307 	rsb	r3, r3, #7
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	d00a      	beq.n	8007b80 <xPortStartScheduler+0x78>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	60bb      	str	r3, [r7, #8]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <xPortStartScheduler+0xd8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	4a16      	ldr	r2, [pc, #88]	; (8007be0 <xPortStartScheduler+0xd8>)
 8007b88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b8a:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <xPortStartScheduler+0xd8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b92:	4a13      	ldr	r2, [pc, #76]	; (8007be0 <xPortStartScheduler+0xd8>)
 8007b94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b9e:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <xPortStartScheduler+0xdc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a10      	ldr	r2, [pc, #64]	; (8007be4 <xPortStartScheduler+0xdc>)
 8007ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007baa:	4b0e      	ldr	r3, [pc, #56]	; (8007be4 <xPortStartScheduler+0xdc>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a0d      	ldr	r2, [pc, #52]	; (8007be4 <xPortStartScheduler+0xdc>)
 8007bb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bb6:	f000 f897 	bl	8007ce8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bba:	4b0b      	ldr	r3, [pc, #44]	; (8007be8 <xPortStartScheduler+0xe0>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bc0:	f7ff ff92 	bl	8007ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bc4:	f7fe feea 	bl	800699c <vTaskSwitchContext>
	prvTaskExitError();
 8007bc8:	f7ff ff4a 	bl	8007a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	e000e400 	.word	0xe000e400
 8007bdc:	20000c08 	.word	0x20000c08
 8007be0:	20000c0c 	.word	0x20000c0c
 8007be4:	e000ed20 	.word	0xe000ed20
 8007be8:	20000078 	.word	0x20000078

08007bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	607b      	str	r3, [r7, #4]
}
 8007c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c06:	4b0f      	ldr	r3, [pc, #60]	; (8007c44 <vPortEnterCritical+0x58>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	4a0d      	ldr	r2, [pc, #52]	; (8007c44 <vPortEnterCritical+0x58>)
 8007c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c10:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <vPortEnterCritical+0x58>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d10f      	bne.n	8007c38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c18:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <vPortEnterCritical+0x5c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	603b      	str	r3, [r7, #0]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <vPortEnterCritical+0x4a>
	}
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20000078 	.word	0x20000078
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <vPortExitCritical+0x4c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <vPortExitCritical+0x24>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	607b      	str	r3, [r7, #4]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c70:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <vPortExitCritical+0x4c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	4a08      	ldr	r2, [pc, #32]	; (8007c98 <vPortExitCritical+0x4c>)
 8007c78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c7a:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <vPortExitCritical+0x4c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <vPortExitCritical+0x42>
 8007c82:	2300      	movs	r3, #0
 8007c84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	f383 8811 	msr	BASEPRI, r3
}
 8007c8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr
 8007c98:	20000078 	.word	0x20000078
 8007c9c:	00000000 	.word	0x00000000

08007ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ca0:	f3ef 8009 	mrs	r0, PSP
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <pxCurrentTCBConst>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007cb0:	6010      	str	r0, [r2, #0]
 8007cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007cb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007cba:	f380 8811 	msr	BASEPRI, r0
 8007cbe:	f7fe fe6d 	bl	800699c <vTaskSwitchContext>
 8007cc2:	f04f 0000 	mov.w	r0, #0
 8007cc6:	f380 8811 	msr	BASEPRI, r0
 8007cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007cce:	6819      	ldr	r1, [r3, #0]
 8007cd0:	6808      	ldr	r0, [r1, #0]
 8007cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007cd6:	f380 8809 	msr	PSP, r0
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	4770      	bx	lr

08007ce0 <pxCurrentTCBConst>:
 8007ce0:	200009e0 	.word	0x200009e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop

08007ce8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <vPortSetupTimerInterrupt+0x30>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <vPortSetupTimerInterrupt+0x34>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cf8:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <vPortSetupTimerInterrupt+0x38>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a09      	ldr	r2, [pc, #36]	; (8007d24 <vPortSetupTimerInterrupt+0x3c>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	099b      	lsrs	r3, r3, #6
 8007d04:	4a08      	ldr	r2, [pc, #32]	; (8007d28 <vPortSetupTimerInterrupt+0x40>)
 8007d06:	3b01      	subs	r3, #1
 8007d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d0a:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <vPortSetupTimerInterrupt+0x30>)
 8007d0c:	2207      	movs	r2, #7
 8007d0e:	601a      	str	r2, [r3, #0]
}
 8007d10:	bf00      	nop
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bc80      	pop	{r7}
 8007d16:	4770      	bx	lr
 8007d18:	e000e010 	.word	0xe000e010
 8007d1c:	e000e018 	.word	0xe000e018
 8007d20:	2000006c 	.word	0x2000006c
 8007d24:	10624dd3 	.word	0x10624dd3
 8007d28:	e000e014 	.word	0xe000e014

08007d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d32:	f3ef 8305 	mrs	r3, IPSR
 8007d36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	d914      	bls.n	8007d68 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d3e:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <vPortValidateInterruptPriority+0x6c>)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d48:	4b14      	ldr	r3, [pc, #80]	; (8007d9c <vPortValidateInterruptPriority+0x70>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	7afa      	ldrb	r2, [r7, #11]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d20a      	bcs.n	8007d68 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	607b      	str	r3, [r7, #4]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d68:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <vPortValidateInterruptPriority+0x74>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d70:	4b0c      	ldr	r3, [pc, #48]	; (8007da4 <vPortValidateInterruptPriority+0x78>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d90a      	bls.n	8007d8e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	603b      	str	r3, [r7, #0]
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <vPortValidateInterruptPriority+0x60>
	}
 8007d8e:	bf00      	nop
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bc80      	pop	{r7}
 8007d96:	4770      	bx	lr
 8007d98:	e000e3f0 	.word	0xe000e3f0
 8007d9c:	20000c08 	.word	0x20000c08
 8007da0:	e000ed0c 	.word	0xe000ed0c
 8007da4:	20000c0c 	.word	0x20000c0c

08007da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007db4:	f7fe fc7c 	bl	80066b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007db8:	4b58      	ldr	r3, [pc, #352]	; (8007f1c <pvPortMalloc+0x174>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dc0:	f000 f910 	bl	8007fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dc4:	4b56      	ldr	r3, [pc, #344]	; (8007f20 <pvPortMalloc+0x178>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 808e 	bne.w	8007eee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01d      	beq.n	8007e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007dd8:	2208      	movs	r2, #8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d014      	beq.n	8007e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f023 0307 	bic.w	r3, r3, #7
 8007df0:	3308      	adds	r3, #8
 8007df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <pvPortMalloc+0x6c>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	617b      	str	r3, [r7, #20]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d069      	beq.n	8007eee <pvPortMalloc+0x146>
 8007e1a:	4b42      	ldr	r3, [pc, #264]	; (8007f24 <pvPortMalloc+0x17c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d864      	bhi.n	8007eee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e24:	4b40      	ldr	r3, [pc, #256]	; (8007f28 <pvPortMalloc+0x180>)
 8007e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e28:	4b3f      	ldr	r3, [pc, #252]	; (8007f28 <pvPortMalloc+0x180>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e2e:	e004      	b.n	8007e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d903      	bls.n	8007e4c <pvPortMalloc+0xa4>
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f1      	bne.n	8007e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e4c:	4b33      	ldr	r3, [pc, #204]	; (8007f1c <pvPortMalloc+0x174>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d04b      	beq.n	8007eee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	2308      	movs	r3, #8
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d91f      	bls.n	8007eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	613b      	str	r3, [r7, #16]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	1ad2      	subs	r2, r2, r3
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eb2:	69b8      	ldr	r0, [r7, #24]
 8007eb4:	f000 f8f8 	bl	80080a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007eb8:	4b1a      	ldr	r3, [pc, #104]	; (8007f24 <pvPortMalloc+0x17c>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a18      	ldr	r2, [pc, #96]	; (8007f24 <pvPortMalloc+0x17c>)
 8007ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ec6:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <pvPortMalloc+0x17c>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4b18      	ldr	r3, [pc, #96]	; (8007f2c <pvPortMalloc+0x184>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d203      	bcs.n	8007eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ed2:	4b14      	ldr	r3, [pc, #80]	; (8007f24 <pvPortMalloc+0x17c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <pvPortMalloc+0x184>)
 8007ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <pvPortMalloc+0x178>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007eee:	f7fe fbed 	bl	80066cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <pvPortMalloc+0x16a>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60fb      	str	r3, [r7, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <pvPortMalloc+0x168>
	return pvReturn;
 8007f12:	69fb      	ldr	r3, [r7, #28]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3728      	adds	r7, #40	; 0x28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20001818 	.word	0x20001818
 8007f20:	20001824 	.word	0x20001824
 8007f24:	2000181c 	.word	0x2000181c
 8007f28:	20001810 	.word	0x20001810
 8007f2c:	20001820 	.word	0x20001820

08007f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d048      	beq.n	8007fd4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f42:	2308      	movs	r3, #8
 8007f44:	425b      	negs	r3, r3
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4413      	add	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	4b21      	ldr	r3, [pc, #132]	; (8007fdc <vPortFree+0xac>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <vPortFree+0x44>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	60fb      	str	r3, [r7, #12]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <vPortFree+0x62>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	60bb      	str	r3, [r7, #8]
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <vPortFree+0xac>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d019      	beq.n	8007fd4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d115      	bne.n	8007fd4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <vPortFree+0xac>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	401a      	ands	r2, r3
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fb8:	f7fe fb7a 	bl	80066b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <vPortFree+0xb0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	4a06      	ldr	r2, [pc, #24]	; (8007fe0 <vPortFree+0xb0>)
 8007fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fca:	6938      	ldr	r0, [r7, #16]
 8007fcc:	f000 f86c 	bl	80080a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007fd0:	f7fe fb7c 	bl	80066cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fd4:	bf00      	nop
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20001824 	.word	0x20001824
 8007fe0:	2000181c 	.word	0x2000181c

08007fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ff0:	4b27      	ldr	r3, [pc, #156]	; (8008090 <prvHeapInit+0xac>)
 8007ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3307      	adds	r3, #7
 8008002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0307 	bic.w	r3, r3, #7
 800800a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <prvHeapInit+0xac>)
 8008014:	4413      	add	r3, r2
 8008016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800801c:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <prvHeapInit+0xb0>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008022:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <prvHeapInit+0xb0>)
 8008024:	2200      	movs	r2, #0
 8008026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008030:	2208      	movs	r2, #8
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0307 	bic.w	r3, r3, #7
 800803e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a15      	ldr	r2, [pc, #84]	; (8008098 <prvHeapInit+0xb4>)
 8008044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008046:	4b14      	ldr	r3, [pc, #80]	; (8008098 <prvHeapInit+0xb4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800804e:	4b12      	ldr	r3, [pc, #72]	; (8008098 <prvHeapInit+0xb4>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008064:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvHeapInit+0xb4>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	4a0a      	ldr	r2, [pc, #40]	; (800809c <prvHeapInit+0xb8>)
 8008072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <prvHeapInit+0xbc>)
 800807a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800807c:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <prvHeapInit+0xc0>)
 800807e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008082:	601a      	str	r2, [r3, #0]
}
 8008084:	bf00      	nop
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	bc80      	pop	{r7}
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20000c10 	.word	0x20000c10
 8008094:	20001810 	.word	0x20001810
 8008098:	20001818 	.word	0x20001818
 800809c:	20001820 	.word	0x20001820
 80080a0:	2000181c 	.word	0x2000181c
 80080a4:	20001824 	.word	0x20001824

080080a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080b0:	4b27      	ldr	r3, [pc, #156]	; (8008150 <prvInsertBlockIntoFreeList+0xa8>)
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	e002      	b.n	80080bc <prvInsertBlockIntoFreeList+0x14>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d8f7      	bhi.n	80080b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	4413      	add	r3, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d108      	bne.n	80080ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	441a      	add	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	441a      	add	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d118      	bne.n	8008130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b14      	ldr	r3, [pc, #80]	; (8008154 <prvInsertBlockIntoFreeList+0xac>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d00d      	beq.n	8008126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	441a      	add	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	e008      	b.n	8008138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008126:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <prvInsertBlockIntoFreeList+0xac>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e003      	b.n	8008138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d002      	beq.n	8008146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	bc80      	pop	{r7}
 800814e:	4770      	bx	lr
 8008150:	20001810 	.word	0x20001810
 8008154:	20001818 	.word	0x20001818

08008158 <memset>:
 8008158:	4603      	mov	r3, r0
 800815a:	4402      	add	r2, r0
 800815c:	4293      	cmp	r3, r2
 800815e:	d100      	bne.n	8008162 <memset+0xa>
 8008160:	4770      	bx	lr
 8008162:	f803 1b01 	strb.w	r1, [r3], #1
 8008166:	e7f9      	b.n	800815c <memset+0x4>

08008168 <__libc_init_array>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	2600      	movs	r6, #0
 800816c:	4d0c      	ldr	r5, [pc, #48]	; (80081a0 <__libc_init_array+0x38>)
 800816e:	4c0d      	ldr	r4, [pc, #52]	; (80081a4 <__libc_init_array+0x3c>)
 8008170:	1b64      	subs	r4, r4, r5
 8008172:	10a4      	asrs	r4, r4, #2
 8008174:	42a6      	cmp	r6, r4
 8008176:	d109      	bne.n	800818c <__libc_init_array+0x24>
 8008178:	f000 f828 	bl	80081cc <_init>
 800817c:	2600      	movs	r6, #0
 800817e:	4d0a      	ldr	r5, [pc, #40]	; (80081a8 <__libc_init_array+0x40>)
 8008180:	4c0a      	ldr	r4, [pc, #40]	; (80081ac <__libc_init_array+0x44>)
 8008182:	1b64      	subs	r4, r4, r5
 8008184:	10a4      	asrs	r4, r4, #2
 8008186:	42a6      	cmp	r6, r4
 8008188:	d105      	bne.n	8008196 <__libc_init_array+0x2e>
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008190:	4798      	blx	r3
 8008192:	3601      	adds	r6, #1
 8008194:	e7ee      	b.n	8008174 <__libc_init_array+0xc>
 8008196:	f855 3b04 	ldr.w	r3, [r5], #4
 800819a:	4798      	blx	r3
 800819c:	3601      	adds	r6, #1
 800819e:	e7f2      	b.n	8008186 <__libc_init_array+0x1e>
 80081a0:	08008350 	.word	0x08008350
 80081a4:	08008350 	.word	0x08008350
 80081a8:	08008350 	.word	0x08008350
 80081ac:	08008354 	.word	0x08008354

080081b0 <memcpy>:
 80081b0:	440a      	add	r2, r1
 80081b2:	4291      	cmp	r1, r2
 80081b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081b8:	d100      	bne.n	80081bc <memcpy+0xc>
 80081ba:	4770      	bx	lr
 80081bc:	b510      	push	{r4, lr}
 80081be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081c2:	4291      	cmp	r1, r2
 80081c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081c8:	d1f9      	bne.n	80081be <memcpy+0xe>
 80081ca:	bd10      	pop	{r4, pc}

080081cc <_init>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr

080081d8 <_fini>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	bf00      	nop
 80081dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081de:	bc08      	pop	{r3}
 80081e0:	469e      	mov	lr, r3
 80081e2:	4770      	bx	lr
