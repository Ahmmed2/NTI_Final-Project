
RTOS_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007488  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d0  080076d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080076d0  080076d0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076d0  080076d0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080076d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017a0  2000007c  08007754  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000181c  08007754  0002181c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016750  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000382a  00000000  00000000  00036838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  0003a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001059  00000000  00000000  0003b578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2f1  00000000  00000000  0003c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d0f  00000000  00000000  000568c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009543a  00000000  00000000  0006e5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005854  00000000  00000000  00103a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00109260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007580 	.word	0x08007580

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08007580 	.word	0x08007580

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <HAL_voidControlMotors>:
#include "HAL/DC_MOTOR.h"

extern TIM_HandleTypeDef htim1;

void HAL_voidControlMotors(uint8_t speed, uint8_t direction)
{
 800076c:	b5b0      	push	{r4, r5, r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
    if (speed == 0)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d118      	bne.n	80007b4 <HAL_voidControlMotors+0x48>
    {
        HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	4866      	ldr	r0, [pc, #408]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 800078a:	f001 fe08 	bl	800239e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	4863      	ldr	r0, [pc, #396]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 8000796:	f001 fe02 	bl	800239e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4861      	ldr	r0, [pc, #388]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007a2:	f001 fdfc 	bl	800239e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ac:	485e      	ldr	r0, [pc, #376]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007ae:	f001 fdf6 	bl	800239e <HAL_GPIO_WritePin>

        // Start the PWM generation for motor1
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

    }
}
 80007b2:	e0b2      	b.n	800091a <HAL_voidControlMotors+0x1ae>
        HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_EN_PIN , GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	485b      	ldr	r0, [pc, #364]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007bc:	f001 fdef 	bl	800239e <HAL_GPIO_WritePin>
        if (direction == STOP)
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d118      	bne.n	80007f8 <HAL_voidControlMotors+0x8c>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007cc:	4855      	ldr	r0, [pc, #340]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80007ce:	f001 fde6 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d8:	4852      	ldr	r0, [pc, #328]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80007da:	f001 fde0 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e4:	4850      	ldr	r0, [pc, #320]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007e6:	f001 fdda 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f0:	484d      	ldr	r0, [pc, #308]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80007f2:	f001 fdd4 	bl	800239e <HAL_GPIO_WritePin>
 80007f6:	e07a      	b.n	80008ee <HAL_voidControlMotors+0x182>
        else if (direction == BACKWARD)
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d118      	bne.n	8000830 <HAL_voidControlMotors+0xc4>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000804:	4847      	ldr	r0, [pc, #284]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 8000806:	f001 fdca 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000810:	4844      	ldr	r0, [pc, #272]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 8000812:	f001 fdc4 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4842      	ldr	r0, [pc, #264]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 800081e:	f001 fdbe 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	483f      	ldr	r0, [pc, #252]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 800082a:	f001 fdb8 	bl	800239e <HAL_GPIO_WritePin>
 800082e:	e05e      	b.n	80008ee <HAL_voidControlMotors+0x182>
        else if (direction == FORWARD)
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d118      	bne.n	8000868 <HAL_voidControlMotors+0xfc>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	4839      	ldr	r0, [pc, #228]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 800083e:	f001 fdae 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4836      	ldr	r0, [pc, #216]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 800084a:	f001 fda8 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	4834      	ldr	r0, [pc, #208]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 8000856:	f001 fda2 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000860:	4831      	ldr	r0, [pc, #196]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 8000862:	f001 fd9c 	bl	800239e <HAL_GPIO_WritePin>
 8000866:	e042      	b.n	80008ee <HAL_voidControlMotors+0x182>
        else if (direction == RIGHT)
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d11e      	bne.n	80008ac <HAL_voidControlMotors+0x140>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_EN_PIN , GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000874:	482c      	ldr	r0, [pc, #176]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 8000876:	f001 fd92 	bl	800239e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000880:	4829      	ldr	r0, [pc, #164]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 8000882:	f001 fd8c 	bl	800239e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088c:	4826      	ldr	r0, [pc, #152]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 800088e:	f001 fd86 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000898:	4822      	ldr	r0, [pc, #136]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 800089a:	f001 fd80 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a4:	481f      	ldr	r0, [pc, #124]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80008a6:	f001 fd7a 	bl	800239e <HAL_GPIO_WritePin>
 80008aa:	e020      	b.n	80008ee <HAL_voidControlMotors+0x182>
        else if (direction == LEFT)
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d11d      	bne.n	80008ee <HAL_voidControlMotors+0x182>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_EN_PIN , GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b8:	481b      	ldr	r0, [pc, #108]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80008ba:	f001 fd70 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c4:	4818      	ldr	r0, [pc, #96]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80008c6:	f001 fd6a 	bl	800239e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(MOTOR_2_PORT, MOTOR2_IN4_PIN, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d0:	4815      	ldr	r0, [pc, #84]	; (8000928 <HAL_voidControlMotors+0x1bc>)
 80008d2:	f001 fd64 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80008de:	f001 fd5e 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_1_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e8:	480e      	ldr	r0, [pc, #56]	; (8000924 <HAL_voidControlMotors+0x1b8>)
 80008ea:	f001 fd58 	bl	800239e <HAL_GPIO_WritePin>
        uint64_t dutyCycle1 = (speed * htim1.Init.Period) / 100;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_voidControlMotors+0x1c0>)
 80008f2:	68d2      	ldr	r2, [r2, #12]
 80008f4:	fb02 f303 	mul.w	r3, r2, r3
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_voidControlMotors+0x1c4>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	2200      	movs	r2, #0
 8000902:	461c      	mov	r4, r3
 8000904:	4615      	mov	r5, r2
 8000906:	e9c7 4502 	strd	r4, r5, [r7, #8]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle1);
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_voidControlMotors+0x1c0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000912:	2100      	movs	r1, #0
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_voidControlMotors+0x1c0>)
 8000916:	f002 ffe5 	bl	80038e4 <HAL_TIM_PWM_Start>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bdb0      	pop	{r4, r5, r7, pc}
 8000922:	bf00      	nop
 8000924:	40010800 	.word	0x40010800
 8000928:	40010c00 	.word	0x40010c00
 800092c:	200007f0 	.word	0x200007f0
 8000930:	51eb851f 	.word	0x51eb851f

08000934 <GSM_VidInit>:
 * @brief: Init and check the GSM module.
 *         Sends AT commands and checks responses for connection status,
 * @return: void
 */
void GSM_VidInit()
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	// Send AT command to check connection status
	while (Glb_u8GSMBuff[5] != 'O' && Glb_u8GSMBuff[6] != 'K')
 8000938:	e00d      	b.n	8000956 <GSM_VidInit+0x22>
	{
		HAL_UART_Transmit(&GSM_UART, Glb_u8CheckCmd, GSM_CHECKCMD_SIZE, GSM_TIMEOUT);
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	2204      	movs	r2, #4
 8000940:	490a      	ldr	r1, [pc, #40]	; (800096c <GSM_VidInit+0x38>)
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <GSM_VidInit+0x3c>)
 8000944:	f003 fd9d 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094c:	2246      	movs	r2, #70	; 0x46
 800094e:	4909      	ldr	r1, [pc, #36]	; (8000974 <GSM_VidInit+0x40>)
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <GSM_VidInit+0x3c>)
 8000952:	f003 fe19 	bl	8004588 <HAL_UART_Receive>
	while (Glb_u8GSMBuff[5] != 'O' && Glb_u8GSMBuff[6] != 'K')
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <GSM_VidInit+0x40>)
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	2b4f      	cmp	r3, #79	; 0x4f
 800095c:	d003      	beq.n	8000966 <GSM_VidInit+0x32>
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <GSM_VidInit+0x40>)
 8000960:	799b      	ldrb	r3, [r3, #6]
 8000962:	2b4b      	cmp	r3, #75	; 0x4b
 8000964:	d1e9      	bne.n	800093a <GSM_VidInit+0x6>
	}
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000000 	.word	0x20000000
 8000970:	20000910 	.word	0x20000910
 8000974:	20000098 	.word	0x20000098

08000978 <GSM_VidCheckConnection>:
 *        Sends AT commands and checks responses for connection status,
 *        signal quality, and network registration.
 * @return uint8_t Status of Connection
 */
uint8_t GSM_VidCheckConnection(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
	uint8_t Loc_u8StatusConnection = GSM_FALSE;
 800097e:	2300      	movs	r3, #0
 8000980:	71fb      	strb	r3, [r7, #7]
	// Send AT command to check connection status

    for (uint8_t i = 0; i < 2; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	71bb      	strb	r3, [r7, #6]
 8000986:	e01d      	b.n	80009c4 <GSM_VidCheckConnection+0x4c>
    {
    	HAL_UART_Transmit(&GSM_UART, Glb_u8CheckCmd, GSM_CHECKCMD_SIZE, GSM_TIMEOUT);
 8000988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098c:	2204      	movs	r2, #4
 800098e:	4936      	ldr	r1, [pc, #216]	; (8000a68 <GSM_VidCheckConnection+0xf0>)
 8000990:	4836      	ldr	r0, [pc, #216]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 8000992:	f003 fd76 	bl	8004482 <HAL_UART_Transmit>
    	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	2246      	movs	r2, #70	; 0x46
 800099c:	4934      	ldr	r1, [pc, #208]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 800099e:	4833      	ldr	r0, [pc, #204]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 80009a0:	f003 fdf2 	bl	8004588 <HAL_UART_Receive>
        if (Glb_u8GSMBuff[5] == 'O' && Glb_u8GSMBuff[6] == 'K')
 80009a4:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009a6:	795b      	ldrb	r3, [r3, #5]
 80009a8:	2b4f      	cmp	r3, #79	; 0x4f
 80009aa:	d106      	bne.n	80009ba <GSM_VidCheckConnection+0x42>
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009ae:	799b      	ldrb	r3, [r3, #6]
 80009b0:	2b4b      	cmp	r3, #75	; 0x4b
 80009b2:	d102      	bne.n	80009ba <GSM_VidCheckConnection+0x42>
        {
        	Loc_u8StatusConnection = GSM_TRUE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	71fb      	strb	r3, [r7, #7]
            break;
 80009b8:	e007      	b.n	80009ca <GSM_VidCheckConnection+0x52>
        }
        else
        {
            // If connection status check fails, try again later
            // and send a notification to the dashboard after a set period of time
        	Loc_u8StatusConnection = GSM_FALSE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 2; i++)
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	3301      	adds	r3, #1
 80009c2:	71bb      	strb	r3, [r7, #6]
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d9de      	bls.n	8000988 <GSM_VidCheckConnection+0x10>
    }



    // Check signal quality by sending AT+CSQ command
    for (uint8_t i = 0; i < 2; i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	717b      	strb	r3, [r7, #5]
 80009ce:	e01d      	b.n	8000a0c <GSM_VidCheckConnection+0x94>
    {

    	HAL_UART_Transmit(&GSM_UART, Glb_u8CheckSignalCmd, GSM_CHECKSIG_SIZE, GSM_TIMEOUT);
 80009d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d4:	2208      	movs	r2, #8
 80009d6:	4927      	ldr	r1, [pc, #156]	; (8000a74 <GSM_VidCheckConnection+0xfc>)
 80009d8:	4824      	ldr	r0, [pc, #144]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 80009da:	f003 fd52 	bl	8004482 <HAL_UART_Transmit>
    	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	2246      	movs	r2, #70	; 0x46
 80009e4:	4922      	ldr	r1, [pc, #136]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009e6:	4821      	ldr	r0, [pc, #132]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 80009e8:	f003 fdce 	bl	8004588 <HAL_UART_Receive>

        if (Glb_u8GSMBuff[23] == 'O' && Glb_u8GSMBuff[24] == 'K')
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009ee:	7ddb      	ldrb	r3, [r3, #23]
 80009f0:	2b4f      	cmp	r3, #79	; 0x4f
 80009f2:	d106      	bne.n	8000a02 <GSM_VidCheckConnection+0x8a>
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 80009f6:	7e1b      	ldrb	r3, [r3, #24]
 80009f8:	2b4b      	cmp	r3, #75	; 0x4b
 80009fa:	d102      	bne.n	8000a02 <GSM_VidCheckConnection+0x8a>
        {

        	Loc_u8StatusConnection = GSM_TRUE;
 80009fc:	2301      	movs	r3, #1
 80009fe:	71fb      	strb	r3, [r7, #7]
            break;
 8000a00:	e007      	b.n	8000a12 <GSM_VidCheckConnection+0x9a>
        }
        else
        {
            // If signal quality check fails, try again later
            // and send a notification to the Dash-board after a set period of time
        	Loc_u8StatusConnection = GSM_FALSE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 2; i++)
 8000a06:	797b      	ldrb	r3, [r7, #5]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	717b      	strb	r3, [r7, #5]
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d9de      	bls.n	80009d0 <GSM_VidCheckConnection+0x58>
        }
    }


    // Check network registration by sending AT+COPS? command
    for (uint8_t i = 0; i < 2; i++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	713b      	strb	r3, [r7, #4]
 8000a16:	e01f      	b.n	8000a58 <GSM_VidCheckConnection+0xe0>
    {
    	HAL_UART_Transmit(&GSM_UART, Glb_u8NetRegCmd, GSM_CHECKNETREG_SIZE, GSM_TIMEOUT);
 8000a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	4916      	ldr	r1, [pc, #88]	; (8000a78 <GSM_VidCheckConnection+0x100>)
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 8000a22:	f003 fd2e 	bl	8004482 <HAL_UART_Transmit>
    	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	2246      	movs	r2, #70	; 0x46
 8000a2c:	4910      	ldr	r1, [pc, #64]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 8000a2e:	480f      	ldr	r0, [pc, #60]	; (8000a6c <GSM_VidCheckConnection+0xf4>)
 8000a30:	f003 fdaa 	bl	8004588 <HAL_UART_Receive>

        if (Glb_u8GSMBuff[36] == 'O' && Glb_u8GSMBuff[37] == 'K')
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 8000a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a3a:	2b4f      	cmp	r3, #79	; 0x4f
 8000a3c:	d107      	bne.n	8000a4e <GSM_VidCheckConnection+0xd6>
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <GSM_VidCheckConnection+0xf8>)
 8000a40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a44:	2b4b      	cmp	r3, #75	; 0x4b
 8000a46:	d102      	bne.n	8000a4e <GSM_VidCheckConnection+0xd6>
        {
        	Loc_u8StatusConnection = GSM_TRUE;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	71fb      	strb	r3, [r7, #7]
            break;
 8000a4c:	e007      	b.n	8000a5e <GSM_VidCheckConnection+0xe6>
        }
        else
        {
            // If network registration check fails, try again later
            // and send a notification to the Dash-board after a set period of time
        	Loc_u8StatusConnection = GSM_FALSE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 2; i++)
 8000a52:	793b      	ldrb	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	713b      	strb	r3, [r7, #4]
 8000a58:	793b      	ldrb	r3, [r7, #4]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d9dc      	bls.n	8000a18 <GSM_VidCheckConnection+0xa0>
        }
    }

    return Loc_u8StatusConnection;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000910 	.word	0x20000910
 8000a70:	20000098 	.word	0x20000098
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000014 	.word	0x20000014

08000a7c <GSM_VidSendSMS>:
 * @param message: Pointer to a string containing the message to be sent
 * @return uint8_t Status of Sending SMS
 */

uint8_t GSM_VidSendSMS(uint8_t *Ptr_u8PhoneNumber, uint8_t *Ptr_u8Message)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	//Capturing the size of the phone number and the message
	uint8_t Loc_u8PhoneNumSize = strlen((const char*)Ptr_u8PhoneNumber);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff fb62 	bl	8000150 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73fb      	strb	r3, [r7, #15]
	uint8_t Loc_u8MessageSize = strlen((const char*)Ptr_u8Message);
 8000a90:	6838      	ldr	r0, [r7, #0]
 8000a92:	f7ff fb5d 	bl	8000150 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	73bb      	strb	r3, [r7, #14]

	// Check the connection
	HAL_UART_Transmit(&GSM_UART, Glb_u8CheckCmd, GSM_CHECKCMD_SIZE, GSM_TIMEOUT);
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	493d      	ldr	r1, [pc, #244]	; (8000b98 <GSM_VidSendSMS+0x11c>)
 8000aa2:	483e      	ldr	r0, [pc, #248]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000aa4:	f003 fced 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aac:	2246      	movs	r2, #70	; 0x46
 8000aae:	493c      	ldr	r1, [pc, #240]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000ab0:	483a      	ldr	r0, [pc, #232]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000ab2:	f003 fd69 	bl	8004588 <HAL_UART_Receive>
	HAL_Delay(100);
 8000ab6:	2064      	movs	r0, #100	; 0x64
 8000ab8:	f001 f9ce 	bl	8001e58 <HAL_Delay>
	// Set text mode for SMS
	HAL_UART_Transmit(&GSM_UART, Glb_u8TxtModeCmd, GSM_TXTMODECMD_SIZE, GSM_TIMEOUT);
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	220b      	movs	r2, #11
 8000ac2:	4938      	ldr	r1, [pc, #224]	; (8000ba4 <GSM_VidSendSMS+0x128>)
 8000ac4:	4835      	ldr	r0, [pc, #212]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000ac6:	f003 fcdc 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	2246      	movs	r2, #70	; 0x46
 8000ad0:	4933      	ldr	r1, [pc, #204]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000ad2:	4832      	ldr	r0, [pc, #200]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000ad4:	f003 fd58 	bl	8004588 <HAL_UART_Receive>
	HAL_Delay(100);
 8000ad8:	2064      	movs	r0, #100	; 0x64
 8000ada:	f001 f9bd 	bl	8001e58 <HAL_Delay>
	//SMS opening
	HAL_UART_Transmit(&GSM_UART, Glb_u8SMSOPCmd, GSM_SMSOP_SIZE, GSM_TIMEOUT);
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	2209      	movs	r2, #9
 8000ae4:	4930      	ldr	r1, [pc, #192]	; (8000ba8 <GSM_VidSendSMS+0x12c>)
 8000ae6:	482d      	ldr	r0, [pc, #180]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000ae8:	f003 fccb 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af0:	2246      	movs	r2, #70	; 0x46
 8000af2:	492b      	ldr	r1, [pc, #172]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000af4:	4829      	ldr	r0, [pc, #164]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000af6:	f003 fd47 	bl	8004588 <HAL_UART_Receive>
	HAL_Delay(100);
 8000afa:	2064      	movs	r0, #100	; 0x64
 8000afc:	f001 f9ac 	bl	8001e58 <HAL_Delay>
	//Entering Phone Number
	HAL_UART_Transmit(&GSM_UART, (uint8_t*)Ptr_u8PhoneNumber, Loc_u8PhoneNumSize, GSM_TIMEOUT);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	4824      	ldr	r0, [pc, #144]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b0c:	f003 fcb9 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b14:	2246      	movs	r2, #70	; 0x46
 8000b16:	4922      	ldr	r1, [pc, #136]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000b18:	4820      	ldr	r0, [pc, #128]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b1a:	f003 fd35 	bl	8004588 <HAL_UART_Receive>
	HAL_Delay(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
 8000b20:	f001 f99a 	bl	8001e58 <HAL_Delay>
	//Closing Number format
	HAL_UART_Transmit(&GSM_UART, Glb_u8SMSCLCmd, GSM_SMSCL_SIZE, GSM_TIMEOUT);
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	2203      	movs	r2, #3
 8000b2a:	4920      	ldr	r1, [pc, #128]	; (8000bac <GSM_VidSendSMS+0x130>)
 8000b2c:	481b      	ldr	r0, [pc, #108]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b2e:	f003 fca8 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	2246      	movs	r2, #70	; 0x46
 8000b38:	4919      	ldr	r1, [pc, #100]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b3c:	f003 fd24 	bl	8004588 <HAL_UART_Receive>
	HAL_Delay(100);
 8000b40:	2064      	movs	r0, #100	; 0x64
 8000b42:	f001 f989 	bl	8001e58 <HAL_Delay>
	//Entering Message
	HAL_UART_Transmit(&GSM_UART, (uint8_t*)Ptr_u8Message, Loc_u8MessageSize, GSM_TIMEOUT);
 8000b46:	7bbb      	ldrb	r3, [r7, #14]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	6839      	ldr	r1, [r7, #0]
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b52:	f003 fc96 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	2246      	movs	r2, #70	; 0x46
 8000b5c:	4910      	ldr	r1, [pc, #64]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000b5e:	480f      	ldr	r0, [pc, #60]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b60:	f003 fd12 	bl	8004588 <HAL_UART_Receive>
	HAL_Delay(100);
 8000b64:	2064      	movs	r0, #100	; 0x64
 8000b66:	f001 f977 	bl	8001e58 <HAL_Delay>
	//Sending Message
	HAL_UART_Transmit(&GSM_UART, (uint8_t*)"\x1A", 1, GSM_TIMEOUT);
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	2201      	movs	r2, #1
 8000b70:	490f      	ldr	r1, [pc, #60]	; (8000bb0 <GSM_VidSendSMS+0x134>)
 8000b72:	480a      	ldr	r0, [pc, #40]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b74:	f003 fc85 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Receive(&GSM_UART, Glb_u8GSMBuff, GSM_BuffSize, GSM_TIMEOUT);
 8000b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7c:	2246      	movs	r2, #70	; 0x46
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <GSM_VidSendSMS+0x124>)
 8000b80:	4806      	ldr	r0, [pc, #24]	; (8000b9c <GSM_VidSendSMS+0x120>)
 8000b82:	f003 fd01 	bl	8004588 <HAL_UART_Receive>
	HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f001 f966 	bl	8001e58 <HAL_Delay>

	return GSM_TRUE;
 8000b8c:	2301      	movs	r3, #1


}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000910 	.word	0x20000910
 8000ba0:	20000098 	.word	0x20000098
 8000ba4:	20000020 	.word	0x20000020
 8000ba8:	2000002c 	.word	0x2000002c
 8000bac:	20000038 	.word	0x20000038
 8000bb0:	08007598 	.word	0x08007598

08000bb4 <NRF_ChipSelect>:
uint8_t Send_Data[10] ;

extern UART_HandleTypeDef huart1;

void NRF_ChipSelect (void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_RESET) ;
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <NRF_ChipSelect+0x14>)
 8000bbe:	f001 fbee 	bl	800239e <HAL_GPIO_WritePin>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010800 	.word	0x40010800

08000bcc <NRF_ChipUnSelect>:

void NRF_ChipUnSelect (void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_SET) ;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <NRF_ChipUnSelect+0x14>)
 8000bd6:	f001 fbe2 	bl	800239e <HAL_GPIO_WritePin>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40010800 	.word	0x40010800

08000be4 <NRF_ChipEnable>:


void NRF_ChipEnable (void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET) ;
 8000be8:	2201      	movs	r2, #1
 8000bea:	2102      	movs	r1, #2
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <NRF_ChipEnable+0x14>)
 8000bee:	f001 fbd6 	bl	800239e <HAL_GPIO_WritePin>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40010800 	.word	0x40010800

08000bfc <NRF_ChipDisable>:

void NRF_ChipDisable (void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET) ;
 8000c00:	2200      	movs	r2, #0
 8000c02:	2102      	movs	r1, #2
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <NRF_ChipDisable+0x14>)
 8000c06:	f001 fbca 	bl	800239e <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40010800 	.word	0x40010800

08000c14 <NRF_voidWriteByteReg>:
 * Return : None
 * note :
 *
 */
void NRF_voidWriteByteReg(uint8_t Copy_u8Reg , uint8_t Copy_u8RegData)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[2] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f043 0320 	orr.w	r3, r3, #32
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	733b      	strb	r3, [r7, #12]

	/* Data to be written */
	Local_Buffer[1] =  Copy_u8RegData ;
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	737b      	strb	r3, [r7, #13]

	/* Chip Select */
	NRF_ChipSelect() ;
 8000c32:	f7ff ffbf 	bl	8000bb4 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, Local_Buffer,2,1000) ;
 8000c36:	f107 010c 	add.w	r1, r7, #12
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <NRF_voidWriteByteReg+0x40>)
 8000c42:	f002 f859 	bl	8002cf8 <HAL_SPI_Transmit>

	/* Release"Unselect"  device */
	NRF_ChipUnSelect () ;
 8000c46:	f7ff ffc1 	bl	8000bcc <NRF_ChipUnSelect>
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000798 	.word	0x20000798

08000c58 <NRF_voidWriteMultiByteReg>:
 * note :
 *
 */

void NRF_voidWriteMultiByteReg(uint8_t Copy_u8Reg , uint8_t *Data , uint8_t Copy_u8Size)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[1] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f043 0320 	orr.w	r3, r3, #32
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	733b      	strb	r3, [r7, #12]

	/* Chip Select */
	NRF_ChipSelect() ;
 8000c72:	f7ff ff9f 	bl	8000bb4 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1,Local_Buffer,1,100) ;
 8000c76:	f107 010c 	add.w	r1, r7, #12
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <NRF_voidWriteMultiByteReg+0x48>)
 8000c80:	f002 f83a 	bl	8002cf8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF_SPI1,Data,Copy_u8Size,1000) ;
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8c:	6839      	ldr	r1, [r7, #0]
 8000c8e:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <NRF_voidWriteMultiByteReg+0x48>)
 8000c90:	f002 f832 	bl	8002cf8 <HAL_SPI_Transmit>

	/* Release"Unselect"device */
	NRF_ChipUnSelect () ;
 8000c94:	f7ff ff9a 	bl	8000bcc <NRF_ChipUnSelect>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000798 	.word	0x20000798

08000ca4 <NRF_u8ReadByteReg>:
 * Return : Register Value
 * note :
 *
 */
uint8_t NRF_u8ReadByteReg(uint8_t Copy_u8Reg)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_Data = 0 ;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]

	/* Chip Select */
	NRF_ChipSelect() ;
 8000cb2:	f7ff ff7f 	bl	8000bb4 <NRF_ChipSelect>

	/* Receive Data */
	HAL_SPI_Transmit(NRF_SPI1,&Copy_u8Reg,1,100 ) ;
 8000cb6:	1df9      	adds	r1, r7, #7
 8000cb8:	2364      	movs	r3, #100	; 0x64
 8000cba:	2201      	movs	r2, #1
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <NRF_u8ReadByteReg+0x48>)
 8000cbe:	f002 f81b 	bl	8002cf8 <HAL_SPI_Transmit>
	HAL_Delay(100) ;
 8000cc2:	2064      	movs	r0, #100	; 0x64
 8000cc4:	f001 f8c8 	bl	8001e58 <HAL_Delay>
	HAL_SPI_Receive(NRF_SPI1,&Local_Data,1,1000) ;
 8000cc8:	f107 010f 	add.w	r1, r7, #15
 8000ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <NRF_u8ReadByteReg+0x48>)
 8000cd4:	f002 f953 	bl	8002f7e <HAL_SPI_Receive>
	HAL_Delay(100) ;
 8000cd8:	2064      	movs	r0, #100	; 0x64
 8000cda:	f001 f8bd 	bl	8001e58 <HAL_Delay>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 8000cde:	f7ff ff75 	bl	8000bcc <NRF_ChipUnSelect>

	return Local_Data ;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000798 	.word	0x20000798

08000cf0 <NRF_voidInit>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidInit ()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	/* Disable Chip */
	NRF_ChipDisable () ;
 8000cf4:	f7ff ff82 	bl	8000bfc <NRF_ChipDisable>

	/* Reset All Registers */
	//NRF_voidResetNRF(0X00) ;

	/* Config Init */
	NRF_voidWriteByteReg(CONFIG,0x00) ;
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ff8a 	bl	8000c14 <NRF_voidWriteByteReg>

	/* EN_AA Init "NO ACK is Used" */
	NRF_voidWriteByteReg(EN_AA,0x00) ;
 8000d00:	2100      	movs	r1, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff ff86 	bl	8000c14 <NRF_voidWriteByteReg>

	/* EN_RXADDR Init "Disable Data pipes for now"  */
	NRF_voidWriteByteReg(EN_RXADDR,0x00) ;
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f7ff ff82 	bl	8000c14 <NRF_voidWriteByteReg>

	/* SETUP_AW Init "Width of data pipe Addresses" */
	NRF_voidWriteByteReg(SETUP_AW,0x03) ;	  	  //5 Byte Address Width
 8000d10:	2103      	movs	r1, #3
 8000d12:	2003      	movs	r0, #3
 8000d14:	f7ff ff7e 	bl	8000c14 <NRF_voidWriteByteReg>

	/* SETUP_RETR Init "Auto Transmit time " */
	NRF_voidWriteByteReg(SETUP_RETR,0x00) ;	  //Disable Auto Transmit
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2004      	movs	r0, #4
 8000d1c:	f7ff ff7a 	bl	8000c14 <NRF_voidWriteByteReg>

	/* RF_CH Init "Channel Number" */
	NRF_voidWriteByteReg(RF_CH,0x00) ;	  	  //Disable for now will be configured later
 8000d20:	2100      	movs	r1, #0
 8000d22:	2005      	movs	r0, #5
 8000d24:	f7ff ff76 	bl	8000c14 <NRF_voidWriteByteReg>

	/* RF_SETUP Init "BaudRate , Power" */
	NRF_voidWriteByteReg(RF_SETUP,0x0E) ;	   	   //0dBM, 2Mbps
 8000d28:	210e      	movs	r1, #14
 8000d2a:	2006      	movs	r0, #6
 8000d2c:	f7ff ff72 	bl	8000c14 <NRF_voidWriteByteReg>

	/* Enable Chip */
	NRF_ChipEnable () ;
 8000d30:	f7ff ff58 	bl	8000be4 <NRF_ChipEnable>


}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <NRF_voidTransmitterMode>:
 * note :
 *
 */

void NRF_voidTransmitterMode (uint8_t * Address ,uint8_t Copy_u8Channel_Number )
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	/* Disable Chip */
	NRF_ChipDisable () ;
 8000d44:	f7ff ff5a 	bl	8000bfc <NRF_ChipDisable>

	/* Select Channel */
	NRF_voidWriteByteReg(RF_CH,Copy_u8Channel_Number) ;
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	2005      	movs	r0, #5
 8000d4e:	f7ff ff61 	bl	8000c14 <NRF_voidWriteByteReg>

	/* Transmit Address */
	NRF_voidWriteMultiByteReg(TX_ADDR,Address,5) ;
 8000d52:	2205      	movs	r2, #5
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	2010      	movs	r0, #16
 8000d58:	f7ff ff7e 	bl	8000c58 <NRF_voidWriteMultiByteReg>

	/* Power up Device and select the device as TX */
	uint8_t Temp ;
	Temp = NRF_u8ReadByteReg(CONFIG);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ffa1 	bl	8000ca4 <NRF_u8ReadByteReg>
 8000d62:	4603      	mov	r3, r0
 8000d64:	73fb      	strb	r3, [r7, #15]
	Temp = Temp | (1<<1) | (0<<0) ;   // 0b0000 0010
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	73fb      	strb	r3, [r7, #15]
	NRF_voidWriteByteReg(CONFIG,0x02) ;
 8000d6e:	2102      	movs	r1, #2
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff ff4f 	bl	8000c14 <NRF_voidWriteByteReg>
	HAL_Delay(100) ;
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f001 f86e 	bl	8001e58 <HAL_Delay>

	/* Enable Chip */
	NRF_ChipEnable () ;
 8000d7c:	f7ff ff32 	bl	8000be4 <NRF_ChipEnable>


}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_voidUltraSonicInit>:
   // {GPIOB, GPIOB, GPIO_PIN_13, GPIO_PIN_14, &val1_Ultrsonic_3, &val2_Ultrsonic_3, &distance3},
   // {GPIOA, GPIOB, GPIO_PIN_15, GPIO_PIN_15, &val1_Ultrsonic_4, &val2_Ultrsonic_4, &distance4}
};

void HAL_voidUltraSonicInit(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <HAL_voidUltraSonicInit+0x10>)
 8000d8e:	f002 fd07 	bl	80037a0 <HAL_TIM_Base_Start>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000838 	.word	0x20000838
 8000d9c:	00000000 	.word	0x00000000

08000da0 <HAL_voidUltraSonic>:


void HAL_voidUltraSonic (uint16_t *UltraSonic_Reading)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < ULTRA_COUNT; i++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
 8000dac:	e080      	b.n	8000eb0 <HAL_voidUltraSonic+0x110>
	{
		UltrasonicSensor sensor = ultrasonicSensors[i];
 8000dae:	4948      	ldr	r1, [pc, #288]	; (8000ed0 <HAL_voidUltraSonic+0x130>)
 8000db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
 8000dbc:	f107 040c 	add.w	r4, r7, #12
 8000dc0:	461d      	mov	r5, r3
 8000dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dca:	e884 0003 	stmia.w	r4, {r0, r1}



		HAL_GPIO_WritePin(sensor.trigPort, sensor.trigPin, GPIO_PIN_SET);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	8ab9      	ldrh	r1, [r7, #20]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 fae2 	bl	800239e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <HAL_voidUltraSonic+0x134>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 10);  // wait for 10 us
 8000de2:	bf00      	nop
 8000de4:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <HAL_voidUltraSonic+0x134>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	2b09      	cmp	r3, #9
 8000dec:	d9fa      	bls.n	8000de4 <HAL_voidUltraSonic+0x44>
		HAL_GPIO_WritePin(sensor.trigPort, sensor.trigPin, GPIO_PIN_RESET);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	8ab9      	ldrh	r1, [r7, #20]
 8000df2:	2200      	movs	r2, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fad2 	bl	800239e <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick();
 8000dfa:	f001 f823 	bl	8001e44 <HAL_GetTick>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a35      	ldr	r2, [pc, #212]	; (8000ed8 <HAL_voidUltraSonic+0x138>)
 8000e02:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(sensor.echoPort, sensor.echoPin)) && pMillis + 10 > HAL_GetTick());
 8000e04:	bf00      	nop
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	8afa      	ldrh	r2, [r7, #22]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 faaf 	bl	8002370 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d108      	bne.n	8000e2a <HAL_voidUltraSonic+0x8a>
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <HAL_voidUltraSonic+0x138>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f103 040a 	add.w	r4, r3, #10
 8000e20:	f001 f810 	bl	8001e44 <HAL_GetTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	429c      	cmp	r4, r3
 8000e28:	d8ed      	bhi.n	8000e06 <HAL_voidUltraSonic+0x66>
		*(sensor.val1) = __HAL_TIM_GET_COUNTER(&htim2);
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_voidUltraSonic+0x134>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e32:	601a      	str	r2, [r3, #0]

		pMillis = HAL_GetTick();
 8000e34:	f001 f806 	bl	8001e44 <HAL_GetTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <HAL_voidUltraSonic+0x138>)
 8000e3c:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(sensor.echoPort, sensor.echoPin)) && pMillis + 50 > HAL_GetTick());
 8000e3e:	bf00      	nop
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	8afa      	ldrh	r2, [r7, #22]
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fa92 	bl	8002370 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d008      	beq.n	8000e64 <HAL_voidUltraSonic+0xc4>
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_voidUltraSonic+0x138>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000e5a:	f000 fff3 	bl	8001e44 <HAL_GetTick>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	429c      	cmp	r4, r3
 8000e62:	d8ed      	bhi.n	8000e40 <HAL_voidUltraSonic+0xa0>
		*(sensor.val2) = __HAL_TIM_GET_COUNTER(&htim2);
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_voidUltraSonic+0x134>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e6c:	601a      	str	r2, [r3, #0]


		*(sensor.distance) = (*(sensor.val2) - *(sensor.val1)) * 0.0022 ;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fbdd 	bl	8000638 <__aeabi_ui2d>
 8000e7e:	a312      	add	r3, pc, #72	; (adr r3, 8000ec8 <HAL_voidUltraSonic+0x128>)
 8000e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e84:	f7ff f96c 	bl	8000160 <__aeabi_dmul>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	6a3c      	ldr	r4, [r7, #32]
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fc4b 	bl	800072c <__aeabi_d2uiz>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	8023      	strh	r3, [r4, #0]
		{
			*sensor.distance = *sensor.distance - 135 ;
		}
*/
		// Store the distance in the array
		UltraSonic_Reading[i] = *(sensor.distance);
 8000e9c:	6a3a      	ldr	r2, [r7, #32]
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	440b      	add	r3, r1
 8000ea6:	8812      	ldrh	r2, [r2, #0]
 8000ea8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < ULTRA_COUNT; i++)
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	3301      	adds	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f77f af7b 	ble.w	8000dae <HAL_voidUltraSonic+0xe>


	}

}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	01a36e2f 	.word	0x01a36e2f
 8000ecc:	3f6205bc 	.word	0x3f6205bc
 8000ed0:	2000003c 	.word	0x2000003c
 8000ed4:	20000838 	.word	0x20000838
 8000ed8:	200000e0 	.word	0x200000e0

08000edc <HAL_UltraSonic_Decision>:

uint8_t HAL_UltraSonic_Decision(uint16_t *UltraSonic_Reading)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

	uint8_t Return_Value = 254 ;
 8000ee4:	23fe      	movs	r3, #254	; 0xfe
 8000ee6:	73fb      	strb	r3, [r7, #15]

	/* About to Hit */
	if ( (UltraSonic_Reading[US_FORWARD]<= 10) )
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	2b0a      	cmp	r3, #10
 8000eee:	d80c      	bhi.n	8000f0a <HAL_UltraSonic_Decision+0x2e>
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef6:	4813      	ldr	r0, [pc, #76]	; (8000f44 <HAL_UltraSonic_Decision+0x68>)
 8000ef8:	f001 fa51 	bl	800239e <HAL_GPIO_WritePin>
		Return_Value = STOP ;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
		GSM_VidSendSMS((uint8_t*)"01003676020", (uint8_t*)"SOS");
 8000f00:	4911      	ldr	r1, [pc, #68]	; (8000f48 <HAL_UltraSonic_Decision+0x6c>)
 8000f02:	4812      	ldr	r0, [pc, #72]	; (8000f4c <HAL_UltraSonic_Decision+0x70>)
 8000f04:	f7ff fdba 	bl	8000a7c <GSM_VidSendSMS>
 8000f08:	e016      	b.n	8000f38 <HAL_UltraSonic_Decision+0x5c>

	}

	/* Close to Hit */
	else if ((20 < UltraSonic_Reading[US_FORWARD]) &&  (UltraSonic_Reading[US_FORWARD]<= 30) )
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	2b14      	cmp	r3, #20
 8000f10:	d90c      	bls.n	8000f2c <HAL_UltraSonic_Decision+0x50>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	2b1e      	cmp	r3, #30
 8000f18:	d808      	bhi.n	8000f2c <HAL_UltraSonic_Decision+0x50>
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <HAL_UltraSonic_Decision+0x68>)
 8000f22:	f001 fa3c 	bl	800239e <HAL_GPIO_WritePin>
		Return_Value = SPEED_25 ;
 8000f26:	2319      	movs	r3, #25
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e005      	b.n	8000f38 <HAL_UltraSonic_Decision+0x5c>

	}
	else HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <HAL_UltraSonic_Decision+0x68>)
 8000f34:	f001 fa33 	bl	800239e <HAL_GPIO_WritePin>



	return Return_Value ;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40011000 	.word	0x40011000
 8000f48:	0800759c 	.word	0x0800759c
 8000f4c:	080075a0 	.word	0x080075a0

08000f50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <vApplicationGetIdleTaskMemory+0x28>)
 8000f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	200000f0 	.word	0x200000f0
 8000f7c:	20000144 	.word	0x20000144

08000f80 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <vApplicationGetTimerTaskMemory+0x2c>)
 8000f90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <vApplicationGetTimerTaskMemory+0x30>)
 8000f96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000344 	.word	0x20000344
 8000fb0:	20000398 	.word	0x20000398

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b0ae      	sub	sp, #184	; 0xb8
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fba:	f000 feeb 	bl	8001d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbe:	f000 f8dd 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc2:	f000 fadd 	bl	8001580 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fc6:	f000 f915 	bl	80011f4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000fca:	f000 f949 	bl	8001260 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fce:	f000 f9e9 	bl	80013a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fd2:	f000 fa33 	bl	800143c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fd6:	f000 fa7f 	bl	80014d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000fda:	f000 faa7 	bl	800152c <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Mode_Sem */
  osSemaphoreDef(Mode_Sem);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  Mode_SemHandle = osSemaphoreCreate(osSemaphore(Mode_Sem), 1);
 8000fea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fd73 	bl	8004adc <osSemaphoreCreate>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	; (8001130 <main+0x17c>)
 8000ffa:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of ActionDecision_Timer */
  osTimerDef(ActionDecision_Timer, ActionDecision_Callback);
 8000ffc:	4b4d      	ldr	r3, [pc, #308]	; (8001134 <main+0x180>)
 8000ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ActionDecision_TimerHandle = osTimerCreate(osTimer(ActionDecision_Timer), osTimerPeriodic, NULL);
 8001008:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800100c:	2200      	movs	r2, #0
 800100e:	2101      	movs	r1, #1
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fd2f 	bl	8004a74 <osTimerCreate>
 8001016:	4603      	mov	r3, r0
 8001018:	4a47      	ldr	r2, [pc, #284]	; (8001138 <main+0x184>)
 800101a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mode_Timer */
  osTimerDef(Mode_Timer, Mode_Callback);
 800101c:	4b47      	ldr	r3, [pc, #284]	; (800113c <main+0x188>)
 800101e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  Mode_TimerHandle = osTimerCreate(osTimer(Mode_Timer), osTimerPeriodic, NULL);
 8001028:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800102c:	2200      	movs	r2, #0
 800102e:	2101      	movs	r1, #1
 8001030:	4618      	mov	r0, r3
 8001032:	f003 fd1f 	bl	8004a74 <osTimerCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a41      	ldr	r2, [pc, #260]	; (8001140 <main+0x18c>)
 800103a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Tx_Queue */
  osMessageQDef(Tx_Queue, 5, uint8_t);
 800103c:	4b41      	ldr	r3, [pc, #260]	; (8001144 <main+0x190>)
 800103e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Tx_QueueHandle = osMessageCreate(osMessageQ(Tx_Queue), NULL);
 8001048:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fd76 	bl	8004b40 <osMessageCreate>
 8001054:	4603      	mov	r3, r0
 8001056:	4a3c      	ldr	r2, [pc, #240]	; (8001148 <main+0x194>)
 8001058:	6013      	str	r3, [r2, #0]

  /* definition and creation of Rx_Queue */
  osMessageQDef(Rx_Queue, 10, uint8_t);
 800105a:	4b3c      	ldr	r3, [pc, #240]	; (800114c <main+0x198>)
 800105c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Rx_QueueHandle = osMessageCreate(osMessageQ(Rx_Queue), NULL);
 8001066:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fd67 	bl	8004b40 <osMessageCreate>
 8001072:	4603      	mov	r3, r0
 8001074:	4a36      	ldr	r2, [pc, #216]	; (8001150 <main+0x19c>)
 8001076:	6013      	str	r3, [r2, #0]

  /* definition and creation of US_Queue */
  osMessageQDef(US_Queue, 3, uint8_t);
 8001078:	4b36      	ldr	r3, [pc, #216]	; (8001154 <main+0x1a0>)
 800107a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800107e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  US_QueueHandle = osMessageCreate(osMessageQ(US_Queue), NULL);
 8001084:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fd58 	bl	8004b40 <osMessageCreate>
 8001090:	4603      	mov	r3, r0
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <main+0x1a4>)
 8001094:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001096:	4b31      	ldr	r3, [pc, #196]	; (800115c <main+0x1a8>)
 8001098:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800109c:	461d      	mov	r5, r3
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fc73 	bl	800499c <osThreadCreate>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a29      	ldr	r2, [pc, #164]	; (8001160 <main+0x1ac>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of Init_System */
  osThreadDef(Init_System, Init_Task, osPriorityHigh, 0, 128);
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <main+0x1b0>)
 80010be:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010c2:	461d      	mov	r5, r3
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Init_SystemHandle = osThreadCreate(osThread(Init_System), NULL);
 80010d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fc60 	bl	800499c <osThreadCreate>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a22      	ldr	r2, [pc, #136]	; (8001168 <main+0x1b4>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, DataGathering_Task, osPriorityAboveNormal, 0, 128);
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <main+0x1b8>)
 80010e4:	f107 041c 	add.w	r4, r7, #28
 80010e8:	461d      	mov	r5, r3
 80010ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fc4d 	bl	800499c <osThreadCreate>
 8001102:	4603      	mov	r3, r0
 8001104:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <main+0x1bc>)
 8001106:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, VehicleComm_Task, osPriorityNormal, 0, 128);
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <main+0x1c0>)
 800110a:	463c      	mov	r4, r7
 800110c:	461d      	mov	r5, r3
 800110e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800111a:	463b      	mov	r3, r7
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fc3c 	bl	800499c <osThreadCreate>
 8001124:	4603      	mov	r3, r0
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <main+0x1c4>)
 8001128:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800112a:	f003 fc30 	bl	800498e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800112e:	e7fe      	b.n	800112e <main+0x17a>
 8001130:	2000097c 	.word	0x2000097c
 8001134:	08001765 	.word	0x08001765
 8001138:	20000974 	.word	0x20000974
 800113c:	080019e1 	.word	0x080019e1
 8001140:	20000978 	.word	0x20000978
 8001144:	080075ac 	.word	0x080075ac
 8001148:	20000968 	.word	0x20000968
 800114c:	080075bc 	.word	0x080075bc
 8001150:	2000096c 	.word	0x2000096c
 8001154:	080075cc 	.word	0x080075cc
 8001158:	20000970 	.word	0x20000970
 800115c:	080075e8 	.word	0x080075e8
 8001160:	20000958 	.word	0x20000958
 8001164:	08007610 	.word	0x08007610
 8001168:	2000095c 	.word	0x2000095c
 800116c:	08007638 	.word	0x08007638
 8001170:	20000960 	.word	0x20000960
 8001174:	08007660 	.word	0x08007660
 8001178:	20000964 	.word	0x20000964

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	; 0x40
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f006 f9be 	bl	800750c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a2:	2301      	movs	r3, #1
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a6:	2310      	movs	r3, #16
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f107 0318 	add.w	r3, r7, #24
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 f90c 	bl	80023d0 <HAL_RCC_OscConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011be:	f000 fc18 	bl	80019f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fb7a 	bl	80028d4 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011e6:	f000 fc04 	bl	80019f2 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3740      	adds	r7, #64	; 0x40
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_SPI1_Init+0x64>)
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <MX_SPI1_Init+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_SPI1_Init+0x64>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_SPI1_Init+0x64>)
 8001228:	2208      	movs	r2, #8
 800122a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_SPI1_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_SPI1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_SPI1_Init+0x64>)
 8001240:	220a      	movs	r2, #10
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_SPI1_Init+0x64>)
 8001246:	f001 fcd3 	bl	8002bf0 <HAL_SPI_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001250:	f000 fbcf 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000798 	.word	0x20000798
 800125c:	40013000 	.word	0x40013000

08001260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b096      	sub	sp, #88	; 0x58
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	615a      	str	r2, [r3, #20]
 8001290:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2220      	movs	r2, #32
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f006 f937 	bl	800750c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129e:	4b3f      	ldr	r3, [pc, #252]	; (800139c <MX_TIM1_Init+0x13c>)
 80012a0:	4a3f      	ldr	r2, [pc, #252]	; (80013a0 <MX_TIM1_Init+0x140>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80012a4:	4b3d      	ldr	r3, [pc, #244]	; (800139c <MX_TIM1_Init+0x13c>)
 80012a6:	2240      	movs	r2, #64	; 0x40
 80012a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b3c      	ldr	r3, [pc, #240]	; (800139c <MX_TIM1_Init+0x13c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 80012b0:	4b3a      	ldr	r3, [pc, #232]	; (800139c <MX_TIM1_Init+0x13c>)
 80012b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <MX_TIM1_Init+0x13c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <MX_TIM1_Init+0x13c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b35      	ldr	r3, [pc, #212]	; (800139c <MX_TIM1_Init+0x13c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ca:	4834      	ldr	r0, [pc, #208]	; (800139c <MX_TIM1_Init+0x13c>)
 80012cc:	f002 fa18 	bl	8003700 <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012d6:	f000 fb8c 	bl	80019f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e4:	4619      	mov	r1, r3
 80012e6:	482d      	ldr	r0, [pc, #180]	; (800139c <MX_TIM1_Init+0x13c>)
 80012e8:	f002 fc60 	bl	8003bac <HAL_TIM_ConfigClockSource>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012f2:	f000 fb7e 	bl	80019f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012f6:	4829      	ldr	r0, [pc, #164]	; (800139c <MX_TIM1_Init+0x13c>)
 80012f8:	f002 fa9c 	bl	8003834 <HAL_TIM_PWM_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001302:	f000 fb76 	bl	80019f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001312:	4619      	mov	r1, r3
 8001314:	4821      	ldr	r0, [pc, #132]	; (800139c <MX_TIM1_Init+0x13c>)
 8001316:	f002 ffb5 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001320:	f000 fb67 	bl	80019f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001324:	2360      	movs	r3, #96	; 0x60
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 8001328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_TIM1_Init+0x13c>)
 800134c:	f002 fb6c 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001356:	f000 fb4c 	bl	80019f2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_TIM1_Init+0x13c>)
 800137e:	f002 ffdf 	bl	8004340 <HAL_TIMEx_ConfigBreakDeadTime>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001388:	f000 fb33 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_TIM1_Init+0x13c>)
 800138e:	f000 fbeb 	bl	8001b68 <HAL_TIM_MspPostInit>

}
 8001392:	bf00      	nop
 8001394:	3758      	adds	r7, #88	; 0x58
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200007f0 	.word	0x200007f0
 80013a0:	40012c00 	.word	0x40012c00

080013a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_TIM2_Init+0x94>)
 80013c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_TIM2_Init+0x94>)
 80013ca:	2207      	movs	r2, #7
 80013cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_TIM2_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_TIM2_Init+0x94>)
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_TIM2_Init+0x94>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_TIM2_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e8:	4813      	ldr	r0, [pc, #76]	; (8001438 <MX_TIM2_Init+0x94>)
 80013ea:	f002 f989 	bl	8003700 <HAL_TIM_Base_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013f4:	f000 fafd 	bl	80019f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_TIM2_Init+0x94>)
 8001406:	f002 fbd1 	bl	8003bac <HAL_TIM_ConfigClockSource>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001410:	f000 faef 	bl	80019f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_TIM2_Init+0x94>)
 8001422:	f002 ff2f 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800142c:	f000 fae1 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000838 	.word	0x20000838

0800143c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_TIM3_Init+0x94>)
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <MX_TIM3_Init+0x98>)
 800145c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_TIM3_Init+0x94>)
 8001460:	2220      	movs	r2, #32
 8001462:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_TIM3_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_TIM3_Init+0x94>)
 800146c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001470:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_TIM3_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_TIM3_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_TIM3_Init+0x94>)
 8001480:	f002 f93e 	bl	8003700 <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800148a:	f000 fab2 	bl	80019f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_TIM3_Init+0x94>)
 800149c:	f002 fb86 	bl	8003bac <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f000 faa4 	bl	80019f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <MX_TIM3_Init+0x94>)
 80014b8:	f002 fee4 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014c2:	f000 fa96 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000880 	.word	0x20000880
 80014d4:	40000400 	.word	0x40000400

080014d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_USART1_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001510:	f002 ff67 	bl	80043e2 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f000 fa6a 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200008c8 	.word	0x200008c8
 8001528:	40013800 	.word	0x40013800

0800152c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART3_UART_Init+0x4c>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_USART3_UART_Init+0x50>)
 8001534:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_USART3_UART_Init+0x4c>)
 8001538:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800153c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART3_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART3_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART3_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART3_UART_Init+0x4c>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART3_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART3_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART3_UART_Init+0x4c>)
 8001564:	f002 ff3d 	bl	80043e2 <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800156e:	f000 fa40 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000910 	.word	0x20000910
 800157c:	40004800 	.word	0x40004800

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <MX_GPIO_Init+0xec>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a34      	ldr	r2, [pc, #208]	; (800166c <MX_GPIO_Init+0xec>)
 800159a:	f043 0320 	orr.w	r3, r3, #32
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b32      	ldr	r3, [pc, #200]	; (800166c <MX_GPIO_Init+0xec>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0320 	and.w	r3, r3, #32
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <MX_GPIO_Init+0xec>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a2e      	ldr	r2, [pc, #184]	; (800166c <MX_GPIO_Init+0xec>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <MX_GPIO_Init+0xec>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <MX_GPIO_Init+0xec>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a28      	ldr	r2, [pc, #160]	; (800166c <MX_GPIO_Init+0xec>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <MX_GPIO_Init+0xec>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, US1_Trig_Pin|NRF_CE_Pin|NRF_CSN_Pin|IN1_Pin
 80015dc:	2200      	movs	r2, #0
 80015de:	f649 0107 	movw	r1, #38919	; 0x9807
 80015e2:	4823      	ldr	r0, [pc, #140]	; (8001670 <MX_GPIO_Init+0xf0>)
 80015e4:	f000 fedb 	bl	800239e <HAL_GPIO_WritePin>
                          |IN2_Pin|US4_Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US2_Trig_Pin|EN2_Pin|US3_Trig_Pin|IN3_Pin
 80015e8:	2200      	movs	r2, #0
 80015ea:	f243 3101 	movw	r1, #13057	; 0x3301
 80015ee:	4821      	ldr	r0, [pc, #132]	; (8001674 <MX_GPIO_Init+0xf4>)
 80015f0:	f000 fed5 	bl	800239e <HAL_GPIO_WritePin>
                          |IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : US1_Trig_Pin NRF_CE_Pin NRF_CSN_Pin IN1_Pin
                           IN2_Pin US4_Trig_Pin */
  GPIO_InitStruct.Pin = US1_Trig_Pin|NRF_CE_Pin|NRF_CSN_Pin|IN1_Pin
 80015f4:	f649 0307 	movw	r3, #38919	; 0x9807
 80015f8:	613b      	str	r3, [r7, #16]
                          |IN2_Pin|US4_Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2302      	movs	r3, #2
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4619      	mov	r1, r3
 800160c:	4818      	ldr	r0, [pc, #96]	; (8001670 <MX_GPIO_Init+0xf0>)
 800160e:	f000 fd2b 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : Emergency_switch_Pin US1_ECHO_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin|US1_ECHO_Pin;
 8001612:	2318      	movs	r3, #24
 8001614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	4619      	mov	r1, r3
 8001624:	4812      	ldr	r0, [pc, #72]	; (8001670 <MX_GPIO_Init+0xf0>)
 8001626:	f000 fd1f 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : US2_Trig_Pin EN2_Pin US3_Trig_Pin IN3_Pin
                           IN4_Pin */
  GPIO_InitStruct.Pin = US2_Trig_Pin|EN2_Pin|US3_Trig_Pin|IN3_Pin
 800162a:	f243 3301 	movw	r3, #13057	; 0x3301
 800162e:	613b      	str	r3, [r7, #16]
                          |IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2302      	movs	r3, #2
 800163a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <MX_GPIO_Init+0xf4>)
 8001644:	f000 fd10 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : US2_ECHO_Pin US3_ECHO_Pin US4_ECHO_Pin */
  GPIO_InitStruct.Pin = US2_ECHO_Pin|US3_ECHO_Pin|US4_ECHO_Pin;
 8001648:	f24c 0302 	movw	r3, #49154	; 0xc002
 800164c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_GPIO_Init+0xf4>)
 800165e:	f000 fd03 	bl	8002068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001662:	bf00      	nop
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	40010800 	.word	0x40010800
 8001674:	40010c00 	.word	0x40010c00

08001678 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001680:	2001      	movs	r0, #1
 8001682:	f003 f9e3 	bl	8004a4c <osDelay>
 8001686:	e7fb      	b.n	8001680 <StartDefaultTask+0x8>

08001688 <Init_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Init_Task */
void Init_Task(void const * argument)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Init_Task */
  /* Infinite loop */
  for(;;)
  {
	  	HAL_voidUltraSonicInit() ;
 8001690:	f7ff fb7a 	bl	8000d88 <HAL_voidUltraSonicInit>
	    NRF_voidInit();
 8001694:	f7ff fb2c 	bl	8000cf0 <NRF_voidInit>
	    NRF_voidTransmitterMode (TxAddress ,10 );
 8001698:	210a      	movs	r1, #10
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <Init_Task+0x58>)
 800169c:	f7ff fb4c 	bl	8000d38 <NRF_voidTransmitterMode>
	    GSM_VidInit();
 80016a0:	f7ff f948 	bl	8000934 <GSM_VidInit>
	    GSM_VidCheckConnection();
 80016a4:	f7ff f968 	bl	8000978 <GSM_VidCheckConnection>
	    HAL_UART_Transmit(&huart1,'R',1,100); //indicate initialization finished
 80016a8:	2364      	movs	r3, #100	; 0x64
 80016aa:	2201      	movs	r2, #1
 80016ac:	2152      	movs	r1, #82	; 0x52
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <Init_Task+0x5c>)
 80016b0:	f002 fee7 	bl	8004482 <HAL_UART_Transmit>

	    /*Emergency mode Robbery*/
	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 80016b4:	e002      	b.n	80016bc <Init_Task+0x34>
	    {
	    	System_Mode = Emergency_Mode;
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <Init_Task+0x60>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 80016bc:	2108      	movs	r1, #8
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <Init_Task+0x64>)
 80016c0:	f000 fe56 	bl	8002370 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f5      	bne.n	80016b6 <Init_Task+0x2e>
	    }
	    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 80016ca:	2201      	movs	r2, #1
 80016cc:	4908      	ldr	r1, [pc, #32]	; (80016f0 <Init_Task+0x68>)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <Init_Task+0x5c>)
 80016d0:	f002 ffec 	bl	80046ac <HAL_UART_Receive_IT>

	    osThreadTerminate(Init_SystemHandle); //delete task
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <Init_Task+0x6c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 f9ab 	bl	8004a34 <osThreadTerminate>
	  	HAL_voidUltraSonicInit() ;
 80016de:	e7d7      	b.n	8001690 <Init_Task+0x8>
 80016e0:	20000060 	.word	0x20000060
 80016e4:	200008c8 	.word	0x200008c8
 80016e8:	20000054 	.word	0x20000054
 80016ec:	40010800 	.word	0x40010800
 80016f0:	20000984 	.word	0x20000984
 80016f4:	2000095c 	.word	0x2000095c

080016f8 <DataGathering_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataGathering_Task */
void DataGathering_Task(void const * argument)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataGathering_Task */
  /* Infinite loop */
  for(;;)
  {
	  //read 4 US and insert data into Tx queue
	  HAL_voidUltraSonic (US_ARR);
 8001700:	4811      	ldr	r0, [pc, #68]	; (8001748 <DataGathering_Task+0x50>)
 8001702:	f7ff fb4d 	bl	8000da0 <HAL_voidUltraSonic>
	  for(uint8_t i = 0 ; i < 4 ; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e00d      	b.n	8001728 <DataGathering_Task+0x30>
	  {
		  xQueueSend( Tx_QueueHandle, &US_ARR[i] , portMAX_DELAY );
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <DataGathering_Task+0x54>)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <DataGathering_Task+0x50>)
 8001716:	1899      	adds	r1, r3, r2
 8001718:	2300      	movs	r3, #0
 800171a:	f04f 32ff 	mov.w	r2, #4294967295
 800171e:	f003 fc23 	bl	8004f68 <xQueueGenericSend>
	  for(uint8_t i = 0 ; i < 4 ; i++)
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d9ee      	bls.n	800170c <DataGathering_Task+0x14>
	  }

	  //insert BM reading into Tx queue
	  xQueueSend( Tx_QueueHandle, &rxData , portMAX_DELAY );
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <DataGathering_Task+0x54>)
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	2300      	movs	r3, #0
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	4905      	ldr	r1, [pc, #20]	; (8001750 <DataGathering_Task+0x58>)
 800173a:	f003 fc15 	bl	8004f68 <xQueueGenericSend>

    osDelay(1);
 800173e:	2001      	movs	r0, #1
 8001740:	f003 f984 	bl	8004a4c <osDelay>
	  HAL_voidUltraSonic (US_ARR);
 8001744:	e7dc      	b.n	8001700 <DataGathering_Task+0x8>
 8001746:	bf00      	nop
 8001748:	20000058 	.word	0x20000058
 800174c:	20000968 	.word	0x20000968
 8001750:	20000984 	.word	0x20000984

08001754 <VehicleComm_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_VehicleComm_Task */
void VehicleComm_Task(void const * argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN VehicleComm_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800175c:	2001      	movs	r0, #1
 800175e:	f003 f975 	bl	8004a4c <osDelay>
 8001762:	e7fb      	b.n	800175c <VehicleComm_Task+0x8>

08001764 <ActionDecision_Callback>:
  /* USER CODE END VehicleComm_Task */
}

/* ActionDecision_Callback function */
void ActionDecision_Callback(void const * argument)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ActionDecision_Callback */
	uint16_t US_data[4] , BM , US_Decision;
	 for(uint8_t i = 0 ; i < 4 ; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	75fb      	strb	r3, [r7, #23]
 8001770:	e00e      	b.n	8001790 <ActionDecision_Callback+0x2c>
	  {
		 xQueueReceive( Tx_QueueHandle, &US_data[i] , portMAX_DELAY );
 8001772:	4b89      	ldr	r3, [pc, #548]	; (8001998 <ActionDecision_Callback+0x234>)
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	4619      	mov	r1, r3
 8001786:	f003 fd85 	bl	8005294 <xQueueReceive>
	 for(uint8_t i = 0 ; i < 4 ; i++)
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	3301      	adds	r3, #1
 800178e:	75fb      	strb	r3, [r7, #23]
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d9ed      	bls.n	8001772 <ActionDecision_Callback+0xe>
	  }
	 xQueueReceive( Tx_QueueHandle, &BM , portMAX_DELAY );
 8001796:	4b80      	ldr	r3, [pc, #512]	; (8001998 <ActionDecision_Callback+0x234>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f107 010a 	add.w	r1, r7, #10
 800179e:	f04f 32ff 	mov.w	r2, #4294967295
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fd76 	bl	8005294 <xQueueReceive>
	switch (BM)
 80017a8:	897b      	ldrh	r3, [r7, #10]
 80017aa:	3b42      	subs	r3, #66	; 0x42
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d849      	bhi.n	8001844 <ActionDecision_Callback+0xe0>
 80017b0:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <ActionDecision_Callback+0x54>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	0800180b 	.word	0x0800180b
 80017bc:	08001845 	.word	0x08001845
 80017c0:	08001845 	.word	0x08001845
 80017c4:	08001845 	.word	0x08001845
 80017c8:	080017fd 	.word	0x080017fd
 80017cc:	08001845 	.word	0x08001845
 80017d0:	08001845 	.word	0x08001845
 80017d4:	08001845 	.word	0x08001845
 80017d8:	08001845 	.word	0x08001845
 80017dc:	08001845 	.word	0x08001845
 80017e0:	08001827 	.word	0x08001827
 80017e4:	08001845 	.word	0x08001845
 80017e8:	08001845 	.word	0x08001845
 80017ec:	08001845 	.word	0x08001845
 80017f0:	08001835 	.word	0x08001835
 80017f4:	08001845 	.word	0x08001845
 80017f8:	08001819 	.word	0x08001819
		  	{

		  	case 'F' :
		  		Car_Direction = FORWARD ;
 80017fc:	4b67      	ldr	r3, [pc, #412]	; (800199c <ActionDecision_Callback+0x238>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
		  		Car_State = STATE_MOVING ;
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <ActionDecision_Callback+0x23c>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
		  		break ;
 8001808:	e01c      	b.n	8001844 <ActionDecision_Callback+0xe0>

		  	case 'B' :
		  		Car_Direction = BACKWARD ;
 800180a:	4b64      	ldr	r3, [pc, #400]	; (800199c <ActionDecision_Callback+0x238>)
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
		      	Car_State = STATE_MOVING ;
 8001810:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <ActionDecision_Callback+0x23c>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
		      	break ;
 8001816:	e015      	b.n	8001844 <ActionDecision_Callback+0xe0>

		  	case 'R' :
		  		Car_Direction = RIGHT ;
 8001818:	4b60      	ldr	r3, [pc, #384]	; (800199c <ActionDecision_Callback+0x238>)
 800181a:	2203      	movs	r2, #3
 800181c:	701a      	strb	r2, [r3, #0]
		  		Car_State = STATE_MOVING ;
 800181e:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <ActionDecision_Callback+0x23c>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
		      	break ;
 8001824:	e00e      	b.n	8001844 <ActionDecision_Callback+0xe0>

		  	case 'L' :
		  		Car_Direction = LEFT ;
 8001826:	4b5d      	ldr	r3, [pc, #372]	; (800199c <ActionDecision_Callback+0x238>)
 8001828:	2204      	movs	r2, #4
 800182a:	701a      	strb	r2, [r3, #0]
		  		Car_State = STATE_MOVING ;
 800182c:	4b5c      	ldr	r3, [pc, #368]	; (80019a0 <ActionDecision_Callback+0x23c>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
		      	break ;
 8001832:	e007      	b.n	8001844 <ActionDecision_Callback+0xe0>

		  	case 'P' :
		  		HAL_voidControlMotors(SPEED_0,STOP) ;
 8001834:	2100      	movs	r1, #0
 8001836:	2000      	movs	r0, #0
 8001838:	f7fe ff98 	bl	800076c <HAL_voidControlMotors>
		  		Car_State = STATE_STOP ;
 800183c:	4b58      	ldr	r3, [pc, #352]	; (80019a0 <ActionDecision_Callback+0x23c>)
 800183e:	2202      	movs	r2, #2
 8001840:	701a      	strb	r2, [r3, #0]
		      	break ;
 8001842:	bf00      	nop
		  	}
	US_Decision = HAL_UltraSonic_Decision(US_data);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fb47 	bl	8000edc <HAL_UltraSonic_Decision>
 800184e:	4603      	mov	r3, r0
 8001850:	82bb      	strh	r3, [r7, #20]

	if (US_Decision == 254)
 8001852:	8abb      	ldrh	r3, [r7, #20]
 8001854:	2bfe      	cmp	r3, #254	; 0xfe
 8001856:	d112      	bne.n	800187e <ActionDecision_Callback+0x11a>
		{
		    Indication_value = INDICATION_NORMAL ;
 8001858:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <ActionDecision_Callback+0x240>)
 800185a:	2203      	movs	r2, #3
 800185c:	701a      	strb	r2, [r3, #0]
			HAL_voidControlMotors(Normal_SPEED,Car_Direction) ;
 800185e:	4b4f      	ldr	r3, [pc, #316]	; (800199c <ActionDecision_Callback+0x238>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	2032      	movs	r0, #50	; 0x32
 8001866:	f7fe ff81 	bl	800076c <HAL_voidControlMotors>
			Car_Speed = Normal_SPEED ;
 800186a:	4b4f      	ldr	r3, [pc, #316]	; (80019a8 <ActionDecision_Callback+0x244>)
 800186c:	2232      	movs	r2, #50	; 0x32
 800186e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"D",1,100);
 8001870:	2364      	movs	r3, #100	; 0x64
 8001872:	2201      	movs	r2, #1
 8001874:	494d      	ldr	r1, [pc, #308]	; (80019ac <ActionDecision_Callback+0x248>)
 8001876:	484e      	ldr	r0, [pc, #312]	; (80019b0 <ActionDecision_Callback+0x24c>)
 8001878:	f002 fe03 	bl	8004482 <HAL_UART_Transmit>
 800187c:	e028      	b.n	80018d0 <ActionDecision_Callback+0x16c>
		}
		else if (US_Decision == STOP)
 800187e:	8abb      	ldrh	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d110      	bne.n	80018a6 <ActionDecision_Callback+0x142>
		{
			Indication_value = INDICATION_OBSTACLE ;
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <ActionDecision_Callback+0x240>)
 8001886:	2202      	movs	r2, #2
 8001888:	701a      	strb	r2, [r3, #0]
			HAL_voidControlMotors(SPEED_0,STOP) ;
 800188a:	2100      	movs	r1, #0
 800188c:	2000      	movs	r0, #0
 800188e:	f7fe ff6d 	bl	800076c <HAL_voidControlMotors>
			Car_Speed = SPEED_0 ;
 8001892:	4b45      	ldr	r3, [pc, #276]	; (80019a8 <ActionDecision_Callback+0x244>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"P",1,100);
 8001898:	2364      	movs	r3, #100	; 0x64
 800189a:	2201      	movs	r2, #1
 800189c:	4945      	ldr	r1, [pc, #276]	; (80019b4 <ActionDecision_Callback+0x250>)
 800189e:	4844      	ldr	r0, [pc, #272]	; (80019b0 <ActionDecision_Callback+0x24c>)
 80018a0:	f002 fdef 	bl	8004482 <HAL_UART_Transmit>
 80018a4:	e014      	b.n	80018d0 <ActionDecision_Callback+0x16c>
		}
		else if (US_Decision == SPEED_25)
 80018a6:	8abb      	ldrh	r3, [r7, #20]
 80018a8:	2b19      	cmp	r3, #25
 80018aa:	d111      	bne.n	80018d0 <ActionDecision_Callback+0x16c>
		{
			Indication_value = INDICATION_TRAFFIC ;
 80018ac:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <ActionDecision_Callback+0x240>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
			HAL_voidControlMotors(SPEED_25,Car_Direction) ;
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <ActionDecision_Callback+0x238>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	2019      	movs	r0, #25
 80018ba:	f7fe ff57 	bl	800076c <HAL_voidControlMotors>
			Car_Speed = SPEED_25 ;
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <ActionDecision_Callback+0x244>)
 80018c0:	2219      	movs	r2, #25
 80018c2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"S",1,100);
 80018c4:	2364      	movs	r3, #100	; 0x64
 80018c6:	2201      	movs	r2, #1
 80018c8:	493b      	ldr	r1, [pc, #236]	; (80019b8 <ActionDecision_Callback+0x254>)
 80018ca:	4839      	ldr	r0, [pc, #228]	; (80019b0 <ActionDecision_Callback+0x24c>)
 80018cc:	f002 fdd9 	bl	8004482 <HAL_UART_Transmit>
		}
	/* Update NRF values*/
	Data_Sent[0]	 = Data_States[0]						;
 80018d0:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <ActionDecision_Callback+0x258>)
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <ActionDecision_Callback+0x25c>)
 80018d6:	701a      	strb	r2, [r3, #0]
	Data_Sent[1]	 = Car_Speed							;
 80018d8:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <ActionDecision_Callback+0x244>)
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <ActionDecision_Callback+0x25c>)
 80018de:	705a      	strb	r2, [r3, #1]
	Data_Sent[2]	 = Data_States[1]						;
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <ActionDecision_Callback+0x258>)
 80018e2:	785a      	ldrb	r2, [r3, #1]
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <ActionDecision_Callback+0x25c>)
 80018e6:	709a      	strb	r2, [r3, #2]
	Data_Sent[3]	 = Car_Direction						;
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <ActionDecision_Callback+0x238>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <ActionDecision_Callback+0x25c>)
 80018ee:	70da      	strb	r2, [r3, #3]
	Data_Sent[4]     = Data_States[2]						;  /* Distance  */
 80018f0:	4b32      	ldr	r3, [pc, #200]	; (80019bc <ActionDecision_Callback+0x258>)
 80018f2:	789a      	ldrb	r2, [r3, #2]
 80018f4:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <ActionDecision_Callback+0x25c>)
 80018f6:	711a      	strb	r2, [r3, #4]
	Data_Sent[5]     = US_data[3]			    			;
 80018f8:	8a7b      	ldrh	r3, [r7, #18]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <ActionDecision_Callback+0x25c>)
 80018fe:	715a      	strb	r2, [r3, #5]
	Data_Sent[6]	 = Data_States[3]						;
 8001900:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <ActionDecision_Callback+0x258>)
 8001902:	78da      	ldrb	r2, [r3, #3]
 8001904:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <ActionDecision_Callback+0x25c>)
 8001906:	719a      	strb	r2, [r3, #6]
	Data_Sent[7]	 = Indication_value						;
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <ActionDecision_Callback+0x240>)
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <ActionDecision_Callback+0x25c>)
 800190e:	71da      	strb	r2, [r3, #7]

	xQueueSend( Tx_QueueHandle, &Data_States[0] , portMAX_DELAY );
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <ActionDecision_Callback+0x234>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	2300      	movs	r3, #0
 8001916:	f04f 32ff 	mov.w	r2, #4294967295
 800191a:	4928      	ldr	r1, [pc, #160]	; (80019bc <ActionDecision_Callback+0x258>)
 800191c:	f003 fb24 	bl	8004f68 <xQueueGenericSend>
	xQueueSend( Tx_QueueHandle, &Data_Sent[1] , portMAX_DELAY );
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <ActionDecision_Callback+0x234>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	2300      	movs	r3, #0
 8001926:	f04f 32ff 	mov.w	r2, #4294967295
 800192a:	4926      	ldr	r1, [pc, #152]	; (80019c4 <ActionDecision_Callback+0x260>)
 800192c:	f003 fb1c 	bl	8004f68 <xQueueGenericSend>
	xQueueSend( Tx_QueueHandle, &Data_States[1] , portMAX_DELAY );
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <ActionDecision_Callback+0x234>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	2300      	movs	r3, #0
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	4923      	ldr	r1, [pc, #140]	; (80019c8 <ActionDecision_Callback+0x264>)
 800193c:	f003 fb14 	bl	8004f68 <xQueueGenericSend>
	xQueueSend( Tx_QueueHandle, &Data_Sent[3] , portMAX_DELAY );
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <ActionDecision_Callback+0x234>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	2300      	movs	r3, #0
 8001946:	f04f 32ff 	mov.w	r2, #4294967295
 800194a:	4920      	ldr	r1, [pc, #128]	; (80019cc <ActionDecision_Callback+0x268>)
 800194c:	f003 fb0c 	bl	8004f68 <xQueueGenericSend>
	xQueueSend( Tx_QueueHandle, &Data_States[2] , portMAX_DELAY );
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <ActionDecision_Callback+0x234>)
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	f04f 32ff 	mov.w	r2, #4294967295
 800195a:	491d      	ldr	r1, [pc, #116]	; (80019d0 <ActionDecision_Callback+0x26c>)
 800195c:	f003 fb04 	bl	8004f68 <xQueueGenericSend>
	xQueueSend( Tx_QueueHandle, &Data_Sent[5] , portMAX_DELAY );
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <ActionDecision_Callback+0x234>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	2300      	movs	r3, #0
 8001966:	f04f 32ff 	mov.w	r2, #4294967295
 800196a:	491a      	ldr	r1, [pc, #104]	; (80019d4 <ActionDecision_Callback+0x270>)
 800196c:	f003 fafc 	bl	8004f68 <xQueueGenericSend>
	xQueueSend( Tx_QueueHandle, &Data_States[3] , portMAX_DELAY );
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <ActionDecision_Callback+0x234>)
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	f04f 32ff 	mov.w	r2, #4294967295
 800197a:	4917      	ldr	r1, [pc, #92]	; (80019d8 <ActionDecision_Callback+0x274>)
 800197c:	f003 faf4 	bl	8004f68 <xQueueGenericSend>
	xQueueSend( Tx_QueueHandle, &Data_Sent[7] , portMAX_DELAY );
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <ActionDecision_Callback+0x234>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	f04f 32ff 	mov.w	r2, #4294967295
 800198a:	4914      	ldr	r1, [pc, #80]	; (80019dc <ActionDecision_Callback+0x278>)
 800198c:	f003 faec 	bl	8004f68 <xQueueGenericSend>
  /* USER CODE END ActionDecision_Callback */
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000968 	.word	0x20000968
 800199c:	20000981 	.word	0x20000981
 80019a0:	20000980 	.word	0x20000980
 80019a4:	20000983 	.word	0x20000983
 80019a8:	20000982 	.word	0x20000982
 80019ac:	0800767c 	.word	0x0800767c
 80019b0:	200008c8 	.word	0x200008c8
 80019b4:	08007680 	.word	0x08007680
 80019b8:	08007684 	.word	0x08007684
 80019bc:	20000068 	.word	0x20000068
 80019c0:	20000988 	.word	0x20000988
 80019c4:	20000989 	.word	0x20000989
 80019c8:	20000069 	.word	0x20000069
 80019cc:	2000098b 	.word	0x2000098b
 80019d0:	2000006a 	.word	0x2000006a
 80019d4:	2000098d 	.word	0x2000098d
 80019d8:	2000006b 	.word	0x2000006b
 80019dc:	2000098f 	.word	0x2000098f

080019e0 <Mode_Callback>:

/* Mode_Callback function */
void Mode_Callback(void const * argument)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mode_Callback */

  /* USER CODE END Mode_Callback */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f6:	b672      	cpsid	i
}
 80019f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fa:	e7fe      	b.n	80019fa <Error_Handler+0x8>

080019fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6193      	str	r3, [r2, #24]
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	210f      	movs	r1, #15
 8001a36:	f06f 0001 	mvn.w	r0, #1
 8001a3a:	f000 faec 	bl	8002016 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_SPI_MspInit+0x88>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d12f      	bne.n	8001acc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a9c:	23a0      	movs	r3, #160	; 0xa0
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	4619      	mov	r1, r3
 8001aae:	480b      	ldr	r0, [pc, #44]	; (8001adc <HAL_SPI_MspInit+0x90>)
 8001ab0:	f000 fada 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab4:	2340      	movs	r3, #64	; 0x40
 8001ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <HAL_SPI_MspInit+0x90>)
 8001ac8:	f000 face 	bl	8002068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40013000 	.word	0x40013000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010800 	.word	0x40010800

08001ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_TIM_Base_MspInit+0x7c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10c      	bne.n	8001b0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_TIM_Base_MspInit+0x80>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <HAL_TIM_Base_MspInit+0x80>)
 8001af8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afc:	6193      	str	r3, [r2, #24]
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_TIM_Base_MspInit+0x80>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b0a:	e022      	b.n	8001b52 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b14:	d10c      	bne.n	8001b30 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_TIM_Base_MspInit+0x80>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <HAL_TIM_Base_MspInit+0x80>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_TIM_Base_MspInit+0x80>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
}
 8001b2e:	e010      	b.n	8001b52 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_TIM_Base_MspInit+0x84>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d10b      	bne.n	8001b52 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_TIM_Base_MspInit+0x80>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_TIM_Base_MspInit+0x80>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_TIM_Base_MspInit+0x80>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
}
 8001b52:	bf00      	nop
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40000400 	.word	0x40000400

08001b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <HAL_TIM_MspPostInit+0x5c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d118      	bne.n	8001bba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_TIM_MspPostInit+0x60>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_TIM_MspPostInit+0x60>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_TIM_MspPostInit+0x60>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EN1_Pin;
 8001ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <HAL_TIM_MspPostInit+0x64>)
 8001bb6:	f000 fa57 	bl	8002068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40012c00 	.word	0x40012c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010800 	.word	0x40010800

08001bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a3e      	ldr	r2, [pc, #248]	; (8001ce4 <HAL_UART_MspInit+0x114>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d13e      	bne.n	8001c6e <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf0:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a3c      	ldr	r2, [pc, #240]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	4619      	mov	r1, r3
 8001c32:	482e      	ldr	r0, [pc, #184]	; (8001cec <HAL_UART_MspInit+0x11c>)
 8001c34:	f000 fa18 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4828      	ldr	r0, [pc, #160]	; (8001cec <HAL_UART_MspInit+0x11c>)
 8001c4c:	f000 fa0c 	bl	8002068 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_UART_MspInit+0x120>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c66:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <HAL_UART_MspInit+0x120>)
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c6c:	e036      	b.n	8001cdc <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_UART_MspInit+0x124>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d131      	bne.n	8001cdc <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c82:	61d3      	str	r3, [r2, #28]
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c96:	f043 0308 	orr.w	r3, r3, #8
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <HAL_UART_MspInit+0x11c>)
 8001cbe:	f000 f9d3 	bl	8002068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <HAL_UART_MspInit+0x11c>)
 8001cd8:	f000 f9c6 	bl	8002068 <HAL_GPIO_Init>
}
 8001cdc:	bf00      	nop
 8001cde:	3730      	adds	r7, #48	; 0x30
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010c00 	.word	0x40010c00
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40004800 	.word	0x40004800

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <NMI_Handler+0x4>

08001cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d26:	f000 f87b 	bl	8001e20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d2a:	f004 fb93 	bl	8006454 <xTaskGetSchedulerState>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d001      	beq.n	8001d38 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d34:	f005 f990 	bl	8007058 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d48:	f7ff fff8 	bl	8001d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d4c:	480b      	ldr	r0, [pc, #44]	; (8001d7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d4e:	490c      	ldr	r1, [pc, #48]	; (8001d80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d50:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d64:	4c09      	ldr	r4, [pc, #36]	; (8001d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d72:	f005 fbd3 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d76:	f7ff f91d 	bl	8000fb4 <main>
  bx lr
 8001d7a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001d84:	080076d8 	.word	0x080076d8
  ldr r2, =_sbss
 8001d88:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001d8c:	2000181c 	.word	0x2000181c

08001d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC1_2_IRQHandler>
	...

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_Init+0x28>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_Init+0x28>)
 8001d9e:	f043 0310 	orr.w	r3, r3, #16
 8001da2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f92b 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	200f      	movs	r0, #15
 8001dac:	f000 f808 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fe24 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x54>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x58>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f935 	bl	800204e <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00e      	b.n	8001e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d80a      	bhi.n	8001e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 f90b 	bl	8002016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_InitTick+0x5c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000006c 	.word	0x2000006c
 8001e18:	20000074 	.word	0x20000074
 8001e1c:	20000070 	.word	0x20000070

08001e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x1c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_IncTick+0x20>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a03      	ldr	r2, [pc, #12]	; (8001e40 <HAL_IncTick+0x20>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	20000074 	.word	0x20000074
 8001e40:	20000990 	.word	0x20000990

08001e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <HAL_GetTick+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20000990 	.word	0x20000990

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffe0 	bl	8001e44 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000074 	.word	0x20000074

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	; (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	; (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fcc:	d301      	bcc.n	8001fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <SysTick_Config+0x40>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fda:	210f      	movs	r1, #15
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f7ff ff90 	bl	8001f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <SysTick_Config+0x40>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <SysTick_Config+0x40>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff49 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002028:	f7ff ff5e 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 800202c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff ff90 	bl	8001f58 <NVIC_EncodePriority>
 8002038:	4602      	mov	r2, r0
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff5f 	bl	8001f04 <__NVIC_SetPriority>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ffb0 	bl	8001fbc <SysTick_Config>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b08b      	sub	sp, #44	; 0x2c
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207a:	e169      	b.n	8002350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800207c:	2201      	movs	r2, #1
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8158 	bne.w	800234a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a9a      	ldr	r2, [pc, #616]	; (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d05e      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020a4:	4a98      	ldr	r2, [pc, #608]	; (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d875      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020aa:	4a98      	ldr	r2, [pc, #608]	; (800230c <HAL_GPIO_Init+0x2a4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d058      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020b0:	4a96      	ldr	r2, [pc, #600]	; (800230c <HAL_GPIO_Init+0x2a4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d86f      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020b6:	4a96      	ldr	r2, [pc, #600]	; (8002310 <HAL_GPIO_Init+0x2a8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d052      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020bc:	4a94      	ldr	r2, [pc, #592]	; (8002310 <HAL_GPIO_Init+0x2a8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d869      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020c2:	4a94      	ldr	r2, [pc, #592]	; (8002314 <HAL_GPIO_Init+0x2ac>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04c      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020c8:	4a92      	ldr	r2, [pc, #584]	; (8002314 <HAL_GPIO_Init+0x2ac>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d863      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020ce:	4a92      	ldr	r2, [pc, #584]	; (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d046      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020d4:	4a90      	ldr	r2, [pc, #576]	; (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d85d      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d82a      	bhi.n	8002134 <HAL_GPIO_Init+0xcc>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d859      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <HAL_GPIO_Init+0x80>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	08002163 	.word	0x08002163
 80020ec:	0800213d 	.word	0x0800213d
 80020f0:	0800214f 	.word	0x0800214f
 80020f4:	08002191 	.word	0x08002191
 80020f8:	08002197 	.word	0x08002197
 80020fc:	08002197 	.word	0x08002197
 8002100:	08002197 	.word	0x08002197
 8002104:	08002197 	.word	0x08002197
 8002108:	08002197 	.word	0x08002197
 800210c:	08002197 	.word	0x08002197
 8002110:	08002197 	.word	0x08002197
 8002114:	08002197 	.word	0x08002197
 8002118:	08002197 	.word	0x08002197
 800211c:	08002197 	.word	0x08002197
 8002120:	08002197 	.word	0x08002197
 8002124:	08002197 	.word	0x08002197
 8002128:	08002197 	.word	0x08002197
 800212c:	08002145 	.word	0x08002145
 8002130:	08002159 	.word	0x08002159
 8002134:	4a79      	ldr	r2, [pc, #484]	; (800231c <HAL_GPIO_Init+0x2b4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800213a:	e02c      	b.n	8002196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e029      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	3304      	adds	r3, #4
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e024      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	3308      	adds	r3, #8
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e01f      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	330c      	adds	r3, #12
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e01a      	b.n	8002198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216a:	2304      	movs	r3, #4
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e013      	b.n	8002198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002178:	2308      	movs	r3, #8
 800217a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	611a      	str	r2, [r3, #16]
          break;
 8002182:	e009      	b.n	8002198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	615a      	str	r2, [r3, #20]
          break;
 800218e:	e003      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x130>
          break;
 8002196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d801      	bhi.n	80021a2 <HAL_GPIO_Init+0x13a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_Init+0x13e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d802      	bhi.n	80021b4 <HAL_GPIO_Init+0x14c>
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_Init+0x152>
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	3b08      	subs	r3, #8
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	210f      	movs	r1, #15
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80b1 	beq.w	800234a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e8:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_GPIO_Init+0x2b8>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002200:	4a48      	ldr	r2, [pc, #288]	; (8002324 <HAL_GPIO_Init+0x2bc>)
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a40      	ldr	r2, [pc, #256]	; (8002328 <HAL_GPIO_Init+0x2c0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_GPIO_Init+0x1ec>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_GPIO_Init+0x2c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00d      	beq.n	8002250 <HAL_GPIO_Init+0x1e8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3e      	ldr	r2, [pc, #248]	; (8002330 <HAL_GPIO_Init+0x2c8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <HAL_GPIO_Init+0x1e4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3d      	ldr	r2, [pc, #244]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_GPIO_Init+0x1e0>
 8002244:	2303      	movs	r3, #3
 8002246:	e006      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002248:	2304      	movs	r3, #4
 800224a:	e004      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 800224c:	2302      	movs	r3, #2
 800224e:	e002      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002254:	2300      	movs	r3, #0
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	4093      	lsls	r3, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002266:	492f      	ldr	r1, [pc, #188]	; (8002324 <HAL_GPIO_Init+0x2bc>)
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002280:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	492c      	ldr	r1, [pc, #176]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800228e:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4928      	ldr	r1, [pc, #160]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002298:	4013      	ands	r3, r2
 800229a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	4922      	ldr	r1, [pc, #136]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60cb      	str	r3, [r1, #12]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	491e      	ldr	r1, [pc, #120]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4918      	ldr	r1, [pc, #96]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4914      	ldr	r1, [pc, #80]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d021      	beq.n	800233c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e021      	b.n	800234a <HAL_GPIO_Init+0x2e2>
 8002306:	bf00      	nop
 8002308:	10320000 	.word	0x10320000
 800230c:	10310000 	.word	0x10310000
 8002310:	10220000 	.word	0x10220000
 8002314:	10210000 	.word	0x10210000
 8002318:	10120000 	.word	0x10120000
 800231c:	10110000 	.word	0x10110000
 8002320:	40021000 	.word	0x40021000
 8002324:	40010000 	.word	0x40010000
 8002328:	40010800 	.word	0x40010800
 800232c:	40010c00 	.word	0x40010c00
 8002330:	40011000 	.word	0x40011000
 8002334:	40011400 	.word	0x40011400
 8002338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_GPIO_Init+0x304>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	43db      	mvns	r3, r3
 8002344:	4909      	ldr	r1, [pc, #36]	; (800236c <HAL_GPIO_Init+0x304>)
 8002346:	4013      	ands	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	3301      	adds	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	f47f ae8e 	bne.w	800207c <HAL_GPIO_Init+0x14>
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	372c      	adds	r7, #44	; 0x2c
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e001      	b.n	8002392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	807b      	strh	r3, [r7, #2]
 80023aa:	4613      	mov	r3, r2
 80023ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ae:	787b      	ldrb	r3, [r7, #1]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ba:	e003      	b.n	80023c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	041a      	lsls	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	611a      	str	r2, [r3, #16]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e272      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8087 	beq.w	80024fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f0:	4b92      	ldr	r3, [pc, #584]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00c      	beq.n	8002416 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023fc:	4b8f      	ldr	r3, [pc, #572]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d112      	bne.n	800242e <HAL_RCC_OscConfig+0x5e>
 8002408:	4b8c      	ldr	r3, [pc, #560]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002414:	d10b      	bne.n	800242e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002416:	4b89      	ldr	r3, [pc, #548]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d06c      	beq.n	80024fc <HAL_RCC_OscConfig+0x12c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d168      	bne.n	80024fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e24c      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x76>
 8002438:	4b80      	ldr	r3, [pc, #512]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a7f      	ldr	r2, [pc, #508]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800243e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	e02e      	b.n	80024a4 <HAL_RCC_OscConfig+0xd4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b7b      	ldr	r3, [pc, #492]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7a      	ldr	r2, [pc, #488]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b78      	ldr	r3, [pc, #480]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a77      	ldr	r2, [pc, #476]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e01d      	b.n	80024a4 <HAL_RCC_OscConfig+0xd4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0xbc>
 8002472:	4b72      	ldr	r3, [pc, #456]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a71      	ldr	r2, [pc, #452]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b6f      	ldr	r3, [pc, #444]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6e      	ldr	r2, [pc, #440]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0xd4>
 800248c:	4b6b      	ldr	r3, [pc, #428]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a6a      	ldr	r2, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a67      	ldr	r2, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7ff fcca 	bl	8001e44 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff fcc6 	bl	8001e44 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e200      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b5d      	ldr	r3, [pc, #372]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0xe4>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff fcb6 	bl	8001e44 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff fcb2 	bl	8001e44 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1ec      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x10c>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250a:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002516:	4b49      	ldr	r3, [pc, #292]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11c      	bne.n	800255c <HAL_RCC_OscConfig+0x18c>
 8002522:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x176>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1c0      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4939      	ldr	r1, [pc, #228]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002564:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7ff fc6b 	bl	8001e44 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002572:	f7ff fc67 	bl	8001e44 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1a1      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4927      	ldr	r1, [pc, #156]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fc4a 	bl	8001e44 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b4:	f7ff fc46 	bl	8001e44 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e180      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d03a      	beq.n	8002654 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d019      	beq.n	800261a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_RCC_OscConfig+0x274>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ec:	f7ff fc2a 	bl	8001e44 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7ff fc26 	bl	8001e44 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e160      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002612:	2001      	movs	r0, #1
 8002614:	f000 face 	bl	8002bb4 <RCC_Delay>
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_RCC_OscConfig+0x274>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7ff fc10 	bl	8001e44 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002626:	e00f      	b.n	8002648 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7ff fc0c 	bl	8001e44 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d908      	bls.n	8002648 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e146      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	42420000 	.word	0x42420000
 8002644:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b92      	ldr	r3, [pc, #584]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e9      	bne.n	8002628 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a6 	beq.w	80027ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b88      	ldr	r3, [pc, #544]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4a87      	ldr	r2, [pc, #540]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	61d3      	str	r3, [r2, #28]
 800267e:	4b85      	ldr	r3, [pc, #532]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b82      	ldr	r3, [pc, #520]	; (8002898 <HAL_RCC_OscConfig+0x4c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b7f      	ldr	r3, [pc, #508]	; (8002898 <HAL_RCC_OscConfig+0x4c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7e      	ldr	r2, [pc, #504]	; (8002898 <HAL_RCC_OscConfig+0x4c8>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fbcd 	bl	8001e44 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7ff fbc9 	bl	8001e44 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e103      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b75      	ldr	r3, [pc, #468]	; (8002898 <HAL_RCC_OscConfig+0x4c8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x312>
 80026d4:	4b6f      	ldr	r3, [pc, #444]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a6e      	ldr	r2, [pc, #440]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e02d      	b.n	800273e <HAL_RCC_OscConfig+0x36e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x334>
 80026ea:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a69      	ldr	r2, [pc, #420]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	4b67      	ldr	r3, [pc, #412]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a66      	ldr	r2, [pc, #408]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x36e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x356>
 800270c:	4b61      	ldr	r3, [pc, #388]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a60      	ldr	r2, [pc, #384]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x36e>
 8002726:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a5a      	ldr	r2, [pc, #360]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	4b58      	ldr	r3, [pc, #352]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a57      	ldr	r2, [pc, #348]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7ff fb7d 	bl	8001e44 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff fb79 	bl	8001e44 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0b1      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b4b      	ldr	r3, [pc, #300]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x37e>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7ff fb67 	bl	8001e44 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7ff fb63 	bl	8001e44 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e09b      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b3c      	ldr	r3, [pc, #240]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4a3b      	ldr	r2, [pc, #236]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8087 	beq.w	80028c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d061      	beq.n	8002888 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d146      	bne.n	800285a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7ff fb37 	bl	8001e44 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027da:	f7ff fb33 	bl	8001e44 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e06d      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d108      	bne.n	8002814 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4921      	ldr	r1, [pc, #132]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002814:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a19      	ldr	r1, [r3, #32]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	430b      	orrs	r3, r1
 8002826:	491b      	ldr	r1, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x4cc>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff fb07 	bl	8001e44 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7ff fb03 	bl	8001e44 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e03d      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x46a>
 8002858:	e035      	b.n	80028c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_RCC_OscConfig+0x4cc>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff faf0 	bl	8001e44 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7ff faec 	bl	8001e44 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e026      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x498>
 8002886:	e01e      	b.n	80028c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e019      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
 8002894:	40021000 	.word	0x40021000
 8002898:	40007000 	.word	0x40007000
 800289c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x500>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0d0      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	4965      	ldr	r1, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800293a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002952:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d040      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d115      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e073      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06b      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4936      	ldr	r1, [pc, #216]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7ff fa3e 	bl	8001e44 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7ff fa3a 	bl	8001e44 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e053      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d210      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f99c 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	080076a4 	.word	0x080076a4
 8002aa0:	2000006c 	.word	0x2000006c
 8002aa4:	20000070 	.word	0x20000070

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x36>
 8002ad6:	e027      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ada:	613b      	str	r3, [r7, #16]
      break;
 8002adc:	e027      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ae8:	5cd3      	ldrb	r3, [r2, r3]
 8002aea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d010      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	0c5b      	lsrs	r3, r3, #17
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b0a:	fb03 f202 	mul.w	r2, r3, r2
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e004      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	613b      	str	r3, [r7, #16]
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b2a:	613b      	str	r3, [r7, #16]
      break;
 8002b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2e:	693b      	ldr	r3, [r7, #16]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	007a1200 	.word	0x007a1200
 8002b44:	080076bc 	.word	0x080076bc
 8002b48:	080076cc 	.word	0x080076cc
 8002b4c:	003d0900 	.word	0x003d0900

08002b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b02      	ldr	r3, [pc, #8]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	2000006c 	.word	0x2000006c

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b68:	f7ff fff2 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	080076b4 	.word	0x080076b4

08002b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b90:	f7ff ffde 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	0adb      	lsrs	r3, r3, #11
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	080076b4 	.word	0x080076b4

08002bb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <RCC_Delay+0x34>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <RCC_Delay+0x38>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0a5b      	lsrs	r3, r3, #9
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd0:	bf00      	nop
  }
  while (Delay --);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	60fa      	str	r2, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f9      	bne.n	8002bd0 <RCC_Delay+0x1c>
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	2000006c 	.word	0x2000006c
 8002bec:	10624dd3 	.word	0x10624dd3

08002bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e076      	b.n	8002cf0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d108      	bne.n	8002c1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c12:	d009      	beq.n	8002c28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
 8002c1a:	e005      	b.n	8002c28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fe ff02 	bl	8001a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	ea42 0103 	orr.w	r1, r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	0c1a      	lsrs	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f002 0204 	and.w	r2, r2, #4
 8002cce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_SPI_Transmit+0x22>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e12d      	b.n	8002f76 <HAL_SPI_Transmit+0x27e>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d22:	f7ff f88f 	bl	8001e44 <HAL_GetTick>
 8002d26:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d002      	beq.n	8002d3e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d3c:	e116      	b.n	8002f6c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_SPI_Transmit+0x52>
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d4e:	e10d      	b.n	8002f6c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2203      	movs	r2, #3
 8002d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d96:	d10f      	bne.n	8002db8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d007      	beq.n	8002dd6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dde:	d14f      	bne.n	8002e80 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HAL_SPI_Transmit+0xf6>
 8002de8:	8afb      	ldrh	r3, [r7, #22]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d142      	bne.n	8002e74 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	881a      	ldrh	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	1c9a      	adds	r2, r3, #2
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e12:	e02f      	b.n	8002e74 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d112      	bne.n	8002e48 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	1c9a      	adds	r2, r3, #2
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e46:	e015      	b.n	8002e74 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e48:	f7fe fffc 	bl	8001e44 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d803      	bhi.n	8002e60 <HAL_SPI_Transmit+0x168>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d102      	bne.n	8002e66 <HAL_SPI_Transmit+0x16e>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e72:	e07b      	b.n	8002f6c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1ca      	bne.n	8002e14 <HAL_SPI_Transmit+0x11c>
 8002e7e:	e050      	b.n	8002f22 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_SPI_Transmit+0x196>
 8002e88:	8afb      	ldrh	r3, [r7, #22]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d144      	bne.n	8002f18 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	7812      	ldrb	r2, [r2, #0]
 8002e9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eb4:	e030      	b.n	8002f18 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d113      	bne.n	8002eec <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	7812      	ldrb	r2, [r2, #0]
 8002ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002eea:	e015      	b.n	8002f18 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eec:	f7fe ffaa 	bl	8001e44 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d803      	bhi.n	8002f04 <HAL_SPI_Transmit+0x20c>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d102      	bne.n	8002f0a <HAL_SPI_Transmit+0x212>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002f16:	e029      	b.n	8002f6c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1c9      	bne.n	8002eb6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fbcc 	bl	80036c4 <SPI_EndRxTxTransaction>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e003      	b.n	8002f6c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b088      	sub	sp, #32
 8002f82:	af02      	add	r7, sp, #8
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fa2:	e0fb      	b.n	800319c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fac:	d112      	bne.n	8002fd4 <HAL_SPI_Receive+0x56>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f8ef 	bl	80031ae <HAL_SPI_TransmitReceive>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	e0e8      	b.n	80031a6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_SPI_Receive+0x64>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0e1      	b.n	80031a6 <HAL_SPI_Receive+0x228>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fea:	f7fe ff2b 	bl	8001e44 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <HAL_SPI_Receive+0x7e>
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003000:	e0cc      	b.n	800319c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2204      	movs	r2, #4
 8003006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003048:	d10f      	bne.n	800306a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003058:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d007      	beq.n	8003088 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d16a      	bne.n	8003166 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003090:	e032      	b.n	80030f8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d115      	bne.n	80030cc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f103 020c 	add.w	r2, r3, #12
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030ca:	e015      	b.n	80030f8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030cc:	f7fe feba 	bl	8001e44 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d803      	bhi.n	80030e4 <HAL_SPI_Receive+0x166>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e2:	d102      	bne.n	80030ea <HAL_SPI_Receive+0x16c>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030f6:	e051      	b.n	800319c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1c7      	bne.n	8003092 <HAL_SPI_Receive+0x114>
 8003102:	e035      	b.n	8003170 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d113      	bne.n	800313a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	b292      	uxth	r2, r2
 800311e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	1c9a      	adds	r2, r3, #2
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003138:	e015      	b.n	8003166 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313a:	f7fe fe83 	bl	8001e44 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d803      	bhi.n	8003152 <HAL_SPI_Receive+0x1d4>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d102      	bne.n	8003158 <HAL_SPI_Receive+0x1da>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003164:	e01a      	b.n	800319c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1c9      	bne.n	8003104 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fa53 	bl	8003620 <SPI_EndRxTransaction>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
 8003192:	e003      	b.n	800319c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b08c      	sub	sp, #48	; 0x30
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031bc:	2301      	movs	r3, #1
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x26>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e198      	b.n	8003506 <HAL_SPI_TransmitReceive+0x358>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031dc:	f7fe fe32 	bl	8001e44 <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031f2:	887b      	ldrh	r3, [r7, #2]
 80031f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d00f      	beq.n	800321e <HAL_SPI_TransmitReceive+0x70>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003204:	d107      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x68>
 800320e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003212:	2b04      	cmp	r3, #4
 8003214:	d003      	beq.n	800321e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003216:	2302      	movs	r3, #2
 8003218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800321c:	e16d      	b.n	80034fa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x82>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x82>
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003236:	e160      	b.n	80034fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b04      	cmp	r3, #4
 8003242:	d003      	beq.n	800324c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2205      	movs	r2, #5
 8003248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	887a      	ldrh	r2, [r7, #2]
 800326e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d007      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800329e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a8:	d17c      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_TransmitReceive+0x10a>
 80032b2:	8b7b      	ldrh	r3, [r7, #26]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d16a      	bne.n	800338e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	881a      	ldrh	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	1c9a      	adds	r2, r3, #2
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032dc:	e057      	b.n	800338e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d11b      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x176>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x176>
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d113      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d119      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x1b8>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d014      	beq.n	8003366 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	b292      	uxth	r2, r2
 8003348:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	1c9a      	adds	r2, r3, #2
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003362:	2301      	movs	r3, #1
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003366:	f7fe fd6d 	bl	8001e44 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003372:	429a      	cmp	r2, r3
 8003374:	d80b      	bhi.n	800338e <HAL_SPI_TransmitReceive+0x1e0>
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d007      	beq.n	800338e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800338c:	e0b5      	b.n	80034fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1a2      	bne.n	80032de <HAL_SPI_TransmitReceive+0x130>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d19d      	bne.n	80032de <HAL_SPI_TransmitReceive+0x130>
 80033a2:	e080      	b.n	80034a6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x204>
 80033ac:	8b7b      	ldrh	r3, [r7, #26]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d16f      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d8:	e05b      	b.n	8003492 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d11c      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x274>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d017      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x274>
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d114      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	7812      	ldrb	r2, [r2, #0]
 8003404:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d119      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x2b6>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d014      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003460:	2301      	movs	r3, #1
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003464:	f7fe fcee 	bl	8001e44 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003470:	429a      	cmp	r2, r3
 8003472:	d803      	bhi.n	800347c <HAL_SPI_TransmitReceive+0x2ce>
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d102      	bne.n	8003482 <HAL_SPI_TransmitReceive+0x2d4>
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	2b00      	cmp	r3, #0
 8003480:	d107      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003490:	e033      	b.n	80034fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d19e      	bne.n	80033da <HAL_SPI_TransmitReceive+0x22c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d199      	bne.n	80033da <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f90a 	bl	80036c4 <SPI_EndRxTxTransaction>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034c2:	e01a      	b.n	80034fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f0:	e003      	b.n	80034fa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003506:	4618      	mov	r0, r3
 8003508:	3730      	adds	r7, #48	; 0x30
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003520:	f7fe fc90 	bl	8001e44 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4413      	add	r3, r2
 800352e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003530:	f7fe fc88 	bl	8001e44 <HAL_GetTick>
 8003534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	015b      	lsls	r3, r3, #5
 800353c:	0d1b      	lsrs	r3, r3, #20
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	fb02 f303 	mul.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003546:	e054      	b.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d050      	beq.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003550:	f7fe fc78 	bl	8001e44 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	429a      	cmp	r2, r3
 800355e:	d902      	bls.n	8003566 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d13d      	bne.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357e:	d111      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003588:	d004      	beq.n	8003594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d107      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ac:	d10f      	bne.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e017      	b.n	8003612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d19b      	bne.n	8003548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	2000006c 	.word	0x2000006c

08003620 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003634:	d111      	bne.n	800365a <SPI_EndRxTransaction+0x3a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	d004      	beq.n	800364a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003648:	d107      	bne.n	800365a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003658:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003662:	d117      	bne.n	8003694 <SPI_EndRxTransaction+0x74>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366c:	d112      	bne.n	8003694 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2200      	movs	r2, #0
 8003676:	2101      	movs	r1, #1
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff ff49 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01a      	beq.n	80036ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e013      	b.n	80036bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2200      	movs	r2, #0
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff ff36 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e000      	b.n	80036bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff ff18 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e000      	b.n	80036f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fe f9da 	bl	8001ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 fafc 	bl	8003d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d001      	beq.n	80037b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e032      	b.n	800381e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_TIM_Base_Start+0x88>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_TIM_Base_Start+0x48>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d009      	beq.n	80037e8 <HAL_TIM_Base_Start+0x48>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a14      	ldr	r2, [pc, #80]	; (800382c <HAL_TIM_Base_Start+0x8c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIM_Base_Start+0x48>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_TIM_Base_Start+0x90>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d111      	bne.n	800380c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d010      	beq.n	800381c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0201 	orr.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380a:	e007      	b.n	800381c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800

08003834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e041      	b.n	80038ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f839 	bl	80038d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f000 fa62 	bl	8003d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_TIM_PWM_Start+0x24>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e022      	b.n	800394e <HAL_TIM_PWM_Start+0x6a>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d109      	bne.n	8003922 <HAL_TIM_PWM_Start+0x3e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	bf14      	ite	ne
 800391a:	2301      	movne	r3, #1
 800391c:	2300      	moveq	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	e015      	b.n	800394e <HAL_TIM_PWM_Start+0x6a>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d109      	bne.n	800393c <HAL_TIM_PWM_Start+0x58>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e008      	b.n	800394e <HAL_TIM_PWM_Start+0x6a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e05e      	b.n	8003a14 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <HAL_TIM_PWM_Start+0x82>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003964:	e013      	b.n	800398e <HAL_TIM_PWM_Start+0xaa>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d104      	bne.n	8003976 <HAL_TIM_PWM_Start+0x92>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003974:	e00b      	b.n	800398e <HAL_TIM_PWM_Start+0xaa>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d104      	bne.n	8003986 <HAL_TIM_PWM_Start+0xa2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003984:	e003      	b.n	800398e <HAL_TIM_PWM_Start+0xaa>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2201      	movs	r2, #1
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fc50 	bl	800423c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <HAL_TIM_PWM_Start+0x138>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d107      	bne.n	80039b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_TIM_PWM_Start+0x138>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_TIM_PWM_Start+0xfa>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d009      	beq.n	80039de <HAL_TIM_PWM_Start+0xfa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_TIM_PWM_Start+0x13c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_TIM_PWM_Start+0xfa>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <HAL_TIM_PWM_Start+0x140>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d111      	bne.n	8003a02 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d010      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	e007      	b.n	8003a12 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800

08003a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0ae      	b.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	f200 809f 	bhi.w	8003b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003b95 	.word	0x08003b95
 8003a64:	08003b95 	.word	0x08003b95
 8003a68:	08003b95 	.word	0x08003b95
 8003a6c:	08003ad1 	.word	0x08003ad1
 8003a70:	08003b95 	.word	0x08003b95
 8003a74:	08003b95 	.word	0x08003b95
 8003a78:	08003b95 	.word	0x08003b95
 8003a7c:	08003b13 	.word	0x08003b13
 8003a80:	08003b95 	.word	0x08003b95
 8003a84:	08003b95 	.word	0x08003b95
 8003a88:	08003b95 	.word	0x08003b95
 8003a8c:	08003b53 	.word	0x08003b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f9b2 	bl	8003e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0208 	orr.w	r2, r2, #8
 8003aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0204 	bic.w	r2, r2, #4
 8003aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6999      	ldr	r1, [r3, #24]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	619a      	str	r2, [r3, #24]
      break;
 8003ace:	e064      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f9f8 	bl	8003ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	619a      	str	r2, [r3, #24]
      break;
 8003b10:	e043      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fa41 	bl	8003fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0208 	orr.w	r2, r2, #8
 8003b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0204 	bic.w	r2, r2, #4
 8003b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	61da      	str	r2, [r3, #28]
      break;
 8003b50:	e023      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fa8b 	bl	8004074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69d9      	ldr	r1, [r3, #28]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	021a      	lsls	r2, r3, #8
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	61da      	str	r2, [r3, #28]
      break;
 8003b92:	e002      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
      break;
 8003b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e0b4      	b.n	8003d32 <HAL_TIM_ConfigClockSource+0x186>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c00:	d03e      	beq.n	8003c80 <HAL_TIM_ConfigClockSource+0xd4>
 8003c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c06:	f200 8087 	bhi.w	8003d18 <HAL_TIM_ConfigClockSource+0x16c>
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0e:	f000 8086 	beq.w	8003d1e <HAL_TIM_ConfigClockSource+0x172>
 8003c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c16:	d87f      	bhi.n	8003d18 <HAL_TIM_ConfigClockSource+0x16c>
 8003c18:	2b70      	cmp	r3, #112	; 0x70
 8003c1a:	d01a      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0xa6>
 8003c1c:	2b70      	cmp	r3, #112	; 0x70
 8003c1e:	d87b      	bhi.n	8003d18 <HAL_TIM_ConfigClockSource+0x16c>
 8003c20:	2b60      	cmp	r3, #96	; 0x60
 8003c22:	d050      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c24:	2b60      	cmp	r3, #96	; 0x60
 8003c26:	d877      	bhi.n	8003d18 <HAL_TIM_ConfigClockSource+0x16c>
 8003c28:	2b50      	cmp	r3, #80	; 0x50
 8003c2a:	d03c      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c2c:	2b50      	cmp	r3, #80	; 0x50
 8003c2e:	d873      	bhi.n	8003d18 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d058      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d86f      	bhi.n	8003d18 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b30      	cmp	r3, #48	; 0x30
 8003c3a:	d064      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x15a>
 8003c3c:	2b30      	cmp	r3, #48	; 0x30
 8003c3e:	d86b      	bhi.n	8003d18 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d060      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x15a>
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d867      	bhi.n	8003d18 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d05c      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x15a>
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d05a      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x15a>
 8003c50:	e062      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c62:	f000 facc 	bl	80041fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	609a      	str	r2, [r3, #8]
      break;
 8003c7e:	e04f      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c90:	f000 fab5 	bl	80041fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca2:	609a      	str	r2, [r3, #8]
      break;
 8003ca4:	e03c      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f000 fa2c 	bl	8004110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2150      	movs	r1, #80	; 0x50
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fa83 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003cc4:	e02c      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f000 fa4a 	bl	800416c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2160      	movs	r1, #96	; 0x60
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fa73 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003ce4:	e01c      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f000 fa0c 	bl	8004110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2140      	movs	r1, #64	; 0x40
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fa63 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003d04:	e00c      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f000 fa5a 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003d16:	e003      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1c:	e000      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a29      	ldr	r2, [pc, #164]	; (8003df4 <TIM_Base_SetConfig+0xb8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <TIM_Base_SetConfig+0x30>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d007      	beq.n	8003d6c <TIM_Base_SetConfig+0x30>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <TIM_Base_SetConfig+0xbc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_Base_SetConfig+0x30>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a25      	ldr	r2, [pc, #148]	; (8003dfc <TIM_Base_SetConfig+0xc0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d108      	bne.n	8003d7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <TIM_Base_SetConfig+0xb8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <TIM_Base_SetConfig+0x62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8c:	d007      	beq.n	8003d9e <TIM_Base_SetConfig+0x62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <TIM_Base_SetConfig+0xbc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d003      	beq.n	8003d9e <TIM_Base_SetConfig+0x62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <TIM_Base_SetConfig+0xc0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d108      	bne.n	8003db0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <TIM_Base_SetConfig+0xb8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800

08003e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f023 0201 	bic.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 0302 	bic.w	r3, r3, #2
 8003e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <TIM_OC1_SetConfig+0xc8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10c      	bne.n	8003e76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0308 	bic.w	r3, r3, #8
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 0304 	bic.w	r3, r3, #4
 8003e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <TIM_OC1_SetConfig+0xc8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d111      	bne.n	8003ea2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40012c00 	.word	0x40012c00

08003ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f023 0210 	bic.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0320 	bic.w	r3, r3, #32
 8003f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <TIM_OC2_SetConfig+0xd0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d10d      	bne.n	8003f48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <TIM_OC2_SetConfig+0xd0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d113      	bne.n	8003f78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	40012c00 	.word	0x40012c00

08003fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <TIM_OC3_SetConfig+0xd0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10d      	bne.n	800401a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a14      	ldr	r2, [pc, #80]	; (8004070 <TIM_OC3_SetConfig+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d113      	bne.n	800404a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	621a      	str	r2, [r3, #32]
}
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00

08004074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	031b      	lsls	r3, r3, #12
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a0f      	ldr	r2, [pc, #60]	; (800410c <TIM_OC4_SetConfig+0x98>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d109      	bne.n	80040e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00

08004110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 030a 	bic.w	r3, r3, #10
 800414c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0210 	bic.w	r2, r3, #16
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	031b      	lsls	r3, r3, #12
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f043 0307 	orr.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	021a      	lsls	r2, r3, #8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	431a      	orrs	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4313      	orrs	r3, r2
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	609a      	str	r2, [r3, #8]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	2201      	movs	r2, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004298:	2302      	movs	r3, #2
 800429a:	e046      	b.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a16      	ldr	r2, [pc, #88]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00e      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e8:	d009      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a12      	ldr	r2, [pc, #72]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a10      	ldr	r2, [pc, #64]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10c      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4313      	orrs	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800

08004340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004358:	2302      	movs	r3, #2
 800435a:	e03d      	b.n	80043d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e042      	b.n	800447a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fd fbe1 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2224      	movs	r2, #36	; 0x24
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004424:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa0c 	bl	8004844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b08a      	sub	sp, #40	; 0x28
 8004486:	af02      	add	r7, sp, #8
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d16d      	bne.n	800457e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_UART_Transmit+0x2c>
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e066      	b.n	8004580 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2221      	movs	r2, #33	; 0x21
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c0:	f7fd fcc0 	bl	8001e44 <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044da:	d108      	bne.n	80044ee <HAL_UART_Transmit+0x6c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e003      	b.n	80044f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044f6:	e02a      	b.n	800454e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f8f7 	bl	80046f6 <UART_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e036      	b.n	8004580 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004526:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	3302      	adds	r3, #2
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e007      	b.n	8004540 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3301      	adds	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1cf      	bne.n	80044f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2200      	movs	r2, #0
 8004560:	2140      	movs	r1, #64	; 0x40
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f8c7 	bl	80046f6 <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e006      	b.n	8004580 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e000      	b.n	8004580 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800457e:	2302      	movs	r3, #2
  }
}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d17c      	bne.n	80046a2 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_UART_Receive+0x2c>
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e075      	b.n	80046a4 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2222      	movs	r2, #34	; 0x22
 80045c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045cc:	f7fd fc3a 	bl	8001e44 <HAL_GetTick>
 80045d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e6:	d108      	bne.n	80045fa <HAL_UART_Receive+0x72>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d104      	bne.n	80045fa <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	e003      	b.n	8004602 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004602:	e043      	b.n	800468c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2200      	movs	r2, #0
 800460c:	2120      	movs	r1, #32
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f871 	bl	80046f6 <UART_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e042      	b.n	80046a4 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10c      	bne.n	800463e <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004630:	b29a      	uxth	r2, r3
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	3302      	adds	r3, #2
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	e01f      	b.n	800467e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	d007      	beq.n	8004658 <HAL_UART_Receive+0xd0>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_UART_Receive+0xde>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e008      	b.n	8004678 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004672:	b2da      	uxtb	r2, r3
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3301      	adds	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1b6      	bne.n	8004604 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046a2:	2302      	movs	r3, #2
  }
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d112      	bne.n	80046ec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_UART_Receive_IT+0x26>
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e00b      	b.n	80046ee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	461a      	mov	r2, r3
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f875 	bl	80047d2 <UART_Start_Receive_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	e000      	b.n	80046ee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046ec:	2302      	movs	r3, #2
  }
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b090      	sub	sp, #64	; 0x40
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004706:	e050      	b.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470e:	d04c      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <UART_WaitOnFlagUntilTimeout+0x30>
 8004716:	f7fd fb95 	bl	8001e44 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004722:	429a      	cmp	r2, r3
 8004724:	d241      	bcs.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800473c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004746:	637a      	str	r2, [r7, #52]	; 0x34
 8004748:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800474c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	613b      	str	r3, [r7, #16]
   return(result);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	63bb      	str	r3, [r7, #56]	; 0x38
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3314      	adds	r3, #20
 8004778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800477a:	623a      	str	r2, [r7, #32]
 800477c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	69f9      	ldr	r1, [r7, #28]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	61bb      	str	r3, [r7, #24]
   return(result);
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e00f      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d09f      	beq.n	8004708 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3740      	adds	r7, #64	; 0x40
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	4613      	mov	r3, r2
 80047de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2222      	movs	r2, #34	; 0x22
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004816:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0220 	orr.w	r2, r2, #32
 8004836:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800487e:	f023 030c 	bic.w	r3, r3, #12
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	430b      	orrs	r3, r1
 800488a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <UART_SetConfig+0x114>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d103      	bne.n	80048b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048ac:	f7fe f96e 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	e002      	b.n	80048ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048b4:	f7fe f956 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80048b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009a      	lsls	r2, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	4a22      	ldr	r2, [pc, #136]	; (800495c <UART_SetConfig+0x118>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	0119      	lsls	r1, r3, #4
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	009a      	lsls	r2, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <UART_SetConfig+0x118>)
 80048f2:	fba3 0302 	umull	r0, r3, r3, r2
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	2064      	movs	r0, #100	; 0x64
 80048fa:	fb00 f303 	mul.w	r3, r0, r3
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	3332      	adds	r3, #50	; 0x32
 8004904:	4a15      	ldr	r2, [pc, #84]	; (800495c <UART_SetConfig+0x118>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004910:	4419      	add	r1, r3
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	fbb2 f2f3 	udiv	r2, r2, r3
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <UART_SetConfig+0x118>)
 800492a:	fba3 0302 	umull	r0, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2064      	movs	r0, #100	; 0x64
 8004932:	fb00 f303 	mul.w	r3, r0, r3
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	3332      	adds	r3, #50	; 0x32
 800493c:	4a07      	ldr	r2, [pc, #28]	; (800495c <UART_SetConfig+0x118>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	f003 020f 	and.w	r2, r3, #15
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	440a      	add	r2, r1
 800494e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40013800 	.word	0x40013800
 800495c:	51eb851f 	.word	0x51eb851f

08004960 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800496e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004972:	2b84      	cmp	r3, #132	; 0x84
 8004974:	d005      	beq.n	8004982 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	3303      	adds	r3, #3
 8004980:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004992:	f001 f919 	bl	8005bc8 <vTaskStartScheduler>
  
  return osOK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}

0800499c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800499c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499e:	b089      	sub	sp, #36	; 0x24
 80049a0:	af04      	add	r7, sp, #16
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d020      	beq.n	80049f0 <osThreadCreate+0x54>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01c      	beq.n	80049f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685c      	ldr	r4, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691e      	ldr	r6, [r3, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff ffc9 	bl	8004960 <makeFreeRtosPriority>
 80049ce:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049d8:	9202      	str	r2, [sp, #8]
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	9100      	str	r1, [sp, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	4632      	mov	r2, r6
 80049e2:	4629      	mov	r1, r5
 80049e4:	4620      	mov	r0, r4
 80049e6:	f000 fea1 	bl	800572c <xTaskCreateStatic>
 80049ea:	4603      	mov	r3, r0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e01c      	b.n	8004a2a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685c      	ldr	r4, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049fc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff ffab 	bl	8004960 <makeFreeRtosPriority>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	9200      	str	r2, [sp, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	4632      	mov	r2, r6
 8004a18:	4629      	mov	r1, r5
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f000 fee2 	bl	80057e4 <xTaskCreate>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d001      	beq.n	8004a2a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a34 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 ffff 	bl	8005a40 <vTaskDelete>
  return osOK;
 8004a42:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <osDelay+0x16>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	e000      	b.n	8004a64 <osDelay+0x18>
 8004a62:	2301      	movs	r3, #1
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 f87b 	bl	8005b60 <vTaskDelay>
  
  return osOK;
 8004a6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d013      	beq.n	8004ab2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <osTimerCreate+0x20>
 8004a90:	2101      	movs	r1, #1
 8004a92:	e000      	b.n	8004a96 <osTimerCreate+0x22>
 8004a94:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004a9e:	9201      	str	r2, [sp, #4]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	460a      	mov	r2, r1
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	480b      	ldr	r0, [pc, #44]	; (8004ad8 <osTimerCreate+0x64>)
 8004aaa:	f001 fe46 	bl	800673a <xTimerCreateStatic>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	e00e      	b.n	8004ad0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8004ab2:	7afb      	ldrb	r3, [r7, #11]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <osTimerCreate+0x48>
 8004ab8:	2201      	movs	r2, #1
 8004aba:	e000      	b.n	8004abe <osTimerCreate+0x4a>
 8004abc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4803      	ldr	r0, [pc, #12]	; (8004ad8 <osTimerCreate+0x64>)
 8004aca:	f001 fe15 	bl	80066f8 <xTimerCreate>
 8004ace:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	08007688 	.word	0x08007688

08004adc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00f      	beq.n	8004b0e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d10a      	bne.n	8004b0a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2203      	movs	r2, #3
 8004afa:	9200      	str	r2, [sp, #0]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2100      	movs	r1, #0
 8004b00:	2001      	movs	r0, #1
 8004b02:	f000 f95d 	bl	8004dc0 <xQueueGenericCreateStatic>
 8004b06:	4603      	mov	r3, r0
 8004b08:	e016      	b.n	8004b38 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e014      	b.n	8004b38 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d110      	bne.n	8004b36 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004b14:	2203      	movs	r2, #3
 8004b16:	2100      	movs	r1, #0
 8004b18:	2001      	movs	r0, #1
 8004b1a:	f000 f9c8 	bl	8004eae <xQueueGenericCreate>
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <osSemaphoreCreate+0x56>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 fa1b 	bl	8004f68 <xQueueGenericSend>
      return sema;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	e000      	b.n	8004b38 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004b36:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <osMessageCreate+0x36>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6859      	ldr	r1, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2400      	movs	r4, #0
 8004b6c:	9400      	str	r4, [sp, #0]
 8004b6e:	f000 f927 	bl	8004dc0 <xQueueGenericCreateStatic>
 8004b72:	4603      	mov	r3, r0
 8004b74:	e008      	b.n	8004b88 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4619      	mov	r1, r3
 8004b82:	f000 f994 	bl	8004eae <xQueueGenericCreate>
 8004b86:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd90      	pop	{r4, r7, pc}

08004b90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f103 0208 	add.w	r2, r3, #8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f103 0208 	add.w	r2, r3, #8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f103 0208 	add.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr

08004c2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d103      	bne.n	8004c4c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e00c      	b.n	8004c66 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3308      	adds	r3, #8
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e002      	b.n	8004c5a <vListInsert+0x2e>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d2f6      	bcs.n	8004c54 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6892      	ldr	r2, [r2, #8]
 8004cb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6852      	ldr	r2, [r2, #4]
 8004cbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d103      	bne.n	8004cd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	1e5a      	subs	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
	...

08004cf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d1a:	f002 f91f 	bl	8006f5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	441a      	add	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	68f9      	ldr	r1, [r7, #12]
 8004d4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	441a      	add	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	22ff      	movs	r2, #255	; 0xff
 8004d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	22ff      	movs	r2, #255	; 0xff
 8004d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d114      	bne.n	8004d9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01a      	beq.n	8004dae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3310      	adds	r3, #16
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f001 f9a9 	bl	80060d4 <xTaskRemoveFromEventList>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d012      	beq.n	8004dae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <xQueueGenericReset+0xcc>)
 8004d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	e009      	b.n	8004dae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3310      	adds	r3, #16
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fef6 	bl	8004b90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3324      	adds	r3, #36	; 0x24
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fef1 	bl	8004b90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dae:	f002 f905 	bl	8006fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004db2:	2301      	movs	r3, #1
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08e      	sub	sp, #56	; 0x38
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <xQueueGenericCreateStatic+0x52>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <xQueueGenericCreateStatic+0x56>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <xQueueGenericCreateStatic+0x58>
 8004e16:	2300      	movs	r3, #0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	623b      	str	r3, [r7, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <xQueueGenericCreateStatic+0x7e>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <xQueueGenericCreateStatic+0x82>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <xQueueGenericCreateStatic+0x84>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	61fb      	str	r3, [r7, #28]
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e5e:	2348      	movs	r3, #72	; 0x48
 8004e60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b48      	cmp	r3, #72	; 0x48
 8004e66:	d00a      	beq.n	8004e7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	61bb      	str	r3, [r7, #24]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f843 	bl	8004f2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3730      	adds	r7, #48	; 0x30
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b08a      	sub	sp, #40	; 0x28
 8004eb2:	af02      	add	r7, sp, #8
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	613b      	str	r3, [r7, #16]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e004      	b.n	8004eee <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	fb02 f303 	mul.w	r3, r2, r3
 8004eec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3348      	adds	r3, #72	; 0x48
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f002 f932 	bl	800715c <pvPortMalloc>
 8004ef8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00f      	beq.n	8004f20 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	3348      	adds	r3, #72	; 0x48
 8004f04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f0e:	79fa      	ldrb	r2, [r7, #7]
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f805 	bl	8004f2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f20:	69bb      	ldr	r3, [r7, #24]
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e002      	b.n	8004f4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f58:	2101      	movs	r1, #1
 8004f5a:	69b8      	ldr	r0, [r7, #24]
 8004f5c:	f7ff fec8 	bl	8004cf0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f60:	bf00      	nop
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08e      	sub	sp, #56	; 0x38
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f76:	2300      	movs	r3, #0
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <xQueueGenericSend+0x32>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f96:	bf00      	nop
 8004f98:	e7fe      	b.n	8004f98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <xQueueGenericSend+0x40>
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <xQueueGenericSend+0x44>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <xQueueGenericSend+0x46>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <xQueueGenericSend+0x60>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d103      	bne.n	8004fd6 <xQueueGenericSend+0x6e>
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <xQueueGenericSend+0x72>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <xQueueGenericSend+0x74>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	623b      	str	r3, [r7, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ff6:	f001 fa2d 	bl	8006454 <xTaskGetSchedulerState>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <xQueueGenericSend+0x9e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <xQueueGenericSend+0xa2>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <xQueueGenericSend+0xa4>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <xQueueGenericSend+0xbe>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	61fb      	str	r3, [r7, #28]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005026:	f001 ff99 	bl	8006f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <xQueueGenericSend+0xd4>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d129      	bne.n	8005090 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005042:	f000 fa07 	bl	8005454 <prvCopyDataToQueue>
 8005046:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d010      	beq.n	8005072 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	3324      	adds	r3, #36	; 0x24
 8005054:	4618      	mov	r0, r3
 8005056:	f001 f83d 	bl	80060d4 <xTaskRemoveFromEventList>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d013      	beq.n	8005088 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005060:	4b3f      	ldr	r3, [pc, #252]	; (8005160 <xQueueGenericSend+0x1f8>)
 8005062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	e00a      	b.n	8005088 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005078:	4b39      	ldr	r3, [pc, #228]	; (8005160 <xQueueGenericSend+0x1f8>)
 800507a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005088:	f001 ff98 	bl	8006fbc <vPortExitCritical>
				return pdPASS;
 800508c:	2301      	movs	r3, #1
 800508e:	e063      	b.n	8005158 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005096:	f001 ff91 	bl	8006fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800509a:	2300      	movs	r3, #0
 800509c:	e05c      	b.n	8005158 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050a4:	f107 0314 	add.w	r3, r7, #20
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 f875 	bl	8006198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050b2:	f001 ff83 	bl	8006fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050b6:	f000 fded 	bl	8005c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ba:	f001 ff4f 	bl	8006f5c <vPortEnterCritical>
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d103      	bne.n	80050d4 <xQueueGenericSend+0x16c>
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050da:	b25b      	sxtb	r3, r3
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	d103      	bne.n	80050ea <xQueueGenericSend+0x182>
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ea:	f001 ff67 	bl	8006fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050ee:	1d3a      	adds	r2, r7, #4
 80050f0:	f107 0314 	add.w	r3, r7, #20
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 f864 	bl	80061c4 <xTaskCheckForTimeOut>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d124      	bne.n	800514c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005104:	f000 fa9e 	bl	8005644 <prvIsQueueFull>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	3310      	adds	r3, #16
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f000 ff8c 	bl	8006034 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800511c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511e:	f000 fa29 	bl	8005574 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005122:	f000 fdc5 	bl	8005cb0 <xTaskResumeAll>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	f47f af7c 	bne.w	8005026 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800512e:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <xQueueGenericSend+0x1f8>)
 8005130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	e772      	b.n	8005026 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005142:	f000 fa17 	bl	8005574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005146:	f000 fdb3 	bl	8005cb0 <xTaskResumeAll>
 800514a:	e76c      	b.n	8005026 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800514c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800514e:	f000 fa11 	bl	8005574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005152:	f000 fdad 	bl	8005cb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005156:	2300      	movs	r3, #0
		}
	}
}
 8005158:	4618      	mov	r0, r3
 800515a:	3738      	adds	r7, #56	; 0x38
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08e      	sub	sp, #56	; 0x38
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d103      	bne.n	80051a0 <xQueueGenericSendFromISR+0x3c>
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <xQueueGenericSendFromISR+0x40>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <xQueueGenericSendFromISR+0x42>
 80051a4:	2300      	movs	r3, #0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	623b      	str	r3, [r7, #32]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d103      	bne.n	80051ce <xQueueGenericSendFromISR+0x6a>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <xQueueGenericSendFromISR+0x6e>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <xQueueGenericSendFromISR+0x70>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	61fb      	str	r3, [r7, #28]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051ee:	f001 ff77 	bl	80070e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051f2:	f3ef 8211 	mrs	r2, BASEPRI
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	61ba      	str	r2, [r7, #24]
 8005208:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800520a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <xQueueGenericSendFromISR+0xbc>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d12c      	bne.n	800527a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005230:	f000 f910 	bl	8005454 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005234:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d112      	bne.n	8005264 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	3324      	adds	r3, #36	; 0x24
 800524a:	4618      	mov	r0, r3
 800524c:	f000 ff42 	bl	80060d4 <xTaskRemoveFromEventList>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00e      	beq.n	8005274 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e007      	b.n	8005274 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005268:	3301      	adds	r3, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	b25a      	sxtb	r2, r3
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005274:	2301      	movs	r3, #1
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005278:	e001      	b.n	800527e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800527a:	2300      	movs	r3, #0
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005288:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800528c:	4618      	mov	r0, r3
 800528e:	3738      	adds	r7, #56	; 0x38
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08c      	sub	sp, #48	; 0x30
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <xQueueReceive+0x30>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	623b      	str	r3, [r7, #32]
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <xQueueReceive+0x3e>
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <xQueueReceive+0x42>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <xQueueReceive+0x44>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xQueueReceive+0x5e>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61fb      	str	r3, [r7, #28]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052f2:	f001 f8af 	bl	8006454 <xTaskGetSchedulerState>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <xQueueReceive+0x6e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <xQueueReceive+0x72>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <xQueueReceive+0x74>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <xQueueReceive+0x8e>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	61bb      	str	r3, [r7, #24]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005322:	f001 fe1b 	bl	8006f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01f      	beq.n	8005372 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005336:	f000 f8f7 	bl	8005528 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	1e5a      	subs	r2, r3, #1
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00f      	beq.n	800536a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	3310      	adds	r3, #16
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fec0 	bl	80060d4 <xTaskRemoveFromEventList>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800535a:	4b3d      	ldr	r3, [pc, #244]	; (8005450 <xQueueReceive+0x1bc>)
 800535c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800536a:	f001 fe27 	bl	8006fbc <vPortExitCritical>
				return pdPASS;
 800536e:	2301      	movs	r3, #1
 8005370:	e069      	b.n	8005446 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005378:	f001 fe20 	bl	8006fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800537c:	2300      	movs	r3, #0
 800537e:	e062      	b.n	8005446 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005386:	f107 0310 	add.w	r3, r7, #16
 800538a:	4618      	mov	r0, r3
 800538c:	f000 ff04 	bl	8006198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005390:	2301      	movs	r3, #1
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005394:	f001 fe12 	bl	8006fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005398:	f000 fc7c 	bl	8005c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800539c:	f001 fdde 	bl	8006f5c <vPortEnterCritical>
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053a6:	b25b      	sxtb	r3, r3
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d103      	bne.n	80053b6 <xQueueReceive+0x122>
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c2:	d103      	bne.n	80053cc <xQueueReceive+0x138>
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053cc:	f001 fdf6 	bl	8006fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053d0:	1d3a      	adds	r2, r7, #4
 80053d2:	f107 0310 	add.w	r3, r7, #16
 80053d6:	4611      	mov	r1, r2
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fef3 	bl	80061c4 <xTaskCheckForTimeOut>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d123      	bne.n	800542c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e6:	f000 f917 	bl	8005618 <prvIsQueueEmpty>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d017      	beq.n	8005420 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	3324      	adds	r3, #36	; 0x24
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4611      	mov	r1, r2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fe1b 	bl	8006034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005400:	f000 f8b8 	bl	8005574 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005404:	f000 fc54 	bl	8005cb0 <xTaskResumeAll>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d189      	bne.n	8005322 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <xQueueReceive+0x1bc>)
 8005410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	e780      	b.n	8005322 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005422:	f000 f8a7 	bl	8005574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005426:	f000 fc43 	bl	8005cb0 <xTaskResumeAll>
 800542a:	e77a      	b.n	8005322 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800542c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800542e:	f000 f8a1 	bl	8005574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005432:	f000 fc3d 	bl	8005cb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005438:	f000 f8ee 	bl	8005618 <prvIsQueueEmpty>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	f43f af6f 	beq.w	8005322 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005444:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005446:	4618      	mov	r0, r3
 8005448:	3730      	adds	r7, #48	; 0x30
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	e000ed04 	.word	0xe000ed04

08005454 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10d      	bne.n	800548e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d14d      	bne.n	8005516 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4618      	mov	r0, r3
 8005480:	f001 f806 	bl	8006490 <xTaskPriorityDisinherit>
 8005484:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	605a      	str	r2, [r3, #4]
 800548c:	e043      	b.n	8005516 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d119      	bne.n	80054c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6898      	ldr	r0, [r3, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	461a      	mov	r2, r3
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	f002 f860 	bl	8007564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	441a      	add	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d32b      	bcc.n	8005516 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	609a      	str	r2, [r3, #8]
 80054c6:	e026      	b.n	8005516 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68d8      	ldr	r0, [r3, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	461a      	mov	r2, r3
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	f002 f846 	bl	8007564 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	425b      	negs	r3, r3
 80054e2:	441a      	add	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d207      	bcs.n	8005504 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	425b      	negs	r3, r3
 80054fe:	441a      	add	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d105      	bne.n	8005516 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	3b01      	subs	r3, #1
 8005514:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800551e:	697b      	ldr	r3, [r7, #20]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d018      	beq.n	800556c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	441a      	add	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	429a      	cmp	r2, r3
 8005552:	d303      	bcc.n	800555c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68d9      	ldr	r1, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	461a      	mov	r2, r3
 8005566:	6838      	ldr	r0, [r7, #0]
 8005568:	f001 fffc 	bl	8007564 <memcpy>
	}
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800557c:	f001 fcee 	bl	8006f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005586:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005588:	e011      	b.n	80055ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d012      	beq.n	80055b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3324      	adds	r3, #36	; 0x24
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fd9c 	bl	80060d4 <xTaskRemoveFromEventList>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055a2:	f000 fe71 	bl	8006288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	dce9      	bgt.n	800558a <prvUnlockQueue+0x16>
 80055b6:	e000      	b.n	80055ba <prvUnlockQueue+0x46>
					break;
 80055b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	22ff      	movs	r2, #255	; 0xff
 80055be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055c2:	f001 fcfb 	bl	8006fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055c6:	f001 fcc9 	bl	8006f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055d2:	e011      	b.n	80055f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d012      	beq.n	8005602 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3310      	adds	r3, #16
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fd77 	bl	80060d4 <xTaskRemoveFromEventList>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055ec:	f000 fe4c 	bl	8006288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055f0:	7bbb      	ldrb	r3, [r7, #14]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dce9      	bgt.n	80055d4 <prvUnlockQueue+0x60>
 8005600:	e000      	b.n	8005604 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005602:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	22ff      	movs	r2, #255	; 0xff
 8005608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800560c:	f001 fcd6 	bl	8006fbc <vPortExitCritical>
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005620:	f001 fc9c 	bl	8006f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e001      	b.n	8005636 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005636:	f001 fcc1 	bl	8006fbc <vPortExitCritical>

	return xReturn;
 800563a:	68fb      	ldr	r3, [r7, #12]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800564c:	f001 fc86 	bl	8006f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	429a      	cmp	r2, r3
 800565a:	d102      	bne.n	8005662 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800565c:	2301      	movs	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e001      	b.n	8005666 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005666:	f001 fca9 	bl	8006fbc <vPortExitCritical>

	return xReturn;
 800566a:	68fb      	ldr	r3, [r7, #12]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e014      	b.n	80056ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005684:	4a0e      	ldr	r2, [pc, #56]	; (80056c0 <vQueueAddToRegistry+0x4c>)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005690:	490b      	ldr	r1, [pc, #44]	; (80056c0 <vQueueAddToRegistry+0x4c>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800569a:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <vQueueAddToRegistry+0x4c>)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056a6:	e006      	b.n	80056b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b07      	cmp	r3, #7
 80056b2:	d9e7      	bls.n	8005684 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr
 80056c0:	20000994 	.word	0x20000994

080056c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056d4:	f001 fc42 	bl	8006f5c <vPortEnterCritical>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056de:	b25b      	sxtb	r3, r3
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d103      	bne.n	80056ee <vQueueWaitForMessageRestricted+0x2a>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f4:	b25b      	sxtb	r3, r3
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d103      	bne.n	8005704 <vQueueWaitForMessageRestricted+0x40>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005704:	f001 fc5a 	bl	8006fbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3324      	adds	r3, #36	; 0x24
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fcaf 	bl	800607c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800571e:	6978      	ldr	r0, [r7, #20]
 8005720:	f7ff ff28 	bl	8005574 <prvUnlockQueue>
	}
 8005724:	bf00      	nop
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08e      	sub	sp, #56	; 0x38
 8005730:	af04      	add	r7, sp, #16
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	623b      	str	r3, [r7, #32]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xTaskCreateStatic+0x46>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	61fb      	str	r3, [r7, #28]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005772:	2354      	movs	r3, #84	; 0x54
 8005774:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b54      	cmp	r3, #84	; 0x54
 800577a:	d00a      	beq.n	8005792 <xTaskCreateStatic+0x66>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	61bb      	str	r3, [r7, #24]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01e      	beq.n	80057d6 <xTaskCreateStatic+0xaa>
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01b      	beq.n	80057d6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057b0:	2300      	movs	r3, #0
 80057b2:	9303      	str	r3, [sp, #12]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	f107 0314 	add.w	r3, r7, #20
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f850 	bl	800586e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057d0:	f000 f8cc 	bl	800596c <prvAddNewTaskToReadyList>
 80057d4:	e001      	b.n	80057da <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057da:	697b      	ldr	r3, [r7, #20]
	}
 80057dc:	4618      	mov	r0, r3
 80057de:	3728      	adds	r7, #40	; 0x28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08c      	sub	sp, #48	; 0x30
 80057e8:	af04      	add	r7, sp, #16
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	4613      	mov	r3, r2
 80057f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fcaf 	bl	800715c <pvPortMalloc>
 80057fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00e      	beq.n	8005824 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005806:	2054      	movs	r0, #84	; 0x54
 8005808:	f001 fca8 	bl	800715c <pvPortMalloc>
 800580c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
 800581a:	e005      	b.n	8005828 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800581c:	6978      	ldr	r0, [r7, #20]
 800581e:	f001 fd61 	bl	80072e4 <vPortFree>
 8005822:	e001      	b.n	8005828 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d017      	beq.n	800585e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	2300      	movs	r3, #0
 800583a:	9303      	str	r3, [sp, #12]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	9302      	str	r3, [sp, #8]
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f80e 	bl	800586e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005852:	69f8      	ldr	r0, [r7, #28]
 8005854:	f000 f88a 	bl	800596c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005858:	2301      	movs	r3, #1
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	e002      	b.n	8005864 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005864:	69bb      	ldr	r3, [r7, #24]
	}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b088      	sub	sp, #32
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005886:	3b01      	subs	r3, #1
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	f023 0307 	bic.w	r3, r3, #7
 8005894:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <prvInitialiseNewTask+0x48>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	617b      	str	r3, [r7, #20]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b6:	2300      	movs	r3, #0
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	e012      	b.n	80058e2 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	7819      	ldrb	r1, [r3, #0]
 80058c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	3334      	adds	r3, #52	; 0x34
 80058cc:	460a      	mov	r2, r1
 80058ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d006      	beq.n	80058ea <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	3301      	adds	r3, #1
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	2b0f      	cmp	r3, #15
 80058e6:	d9e9      	bls.n	80058bc <prvInitialiseNewTask+0x4e>
 80058e8:	e000      	b.n	80058ec <prvInitialiseNewTask+0x7e>
		{
			break;
 80058ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d901      	bls.n	80058fe <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058fa:	2306      	movs	r3, #6
 80058fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005908:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	2200      	movs	r2, #0
 800590e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	3304      	adds	r3, #4
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff f95a 	bl	8004bce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	3318      	adds	r3, #24
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff f955 	bl	8004bce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005928:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	f1c3 0207 	rsb	r2, r3, #7
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005938:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	2200      	movs	r2, #0
 800593e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	69b8      	ldr	r0, [r7, #24]
 800594e:	f001 fa13 	bl	8006d78 <pxPortInitialiseStack>
 8005952:	4602      	mov	r2, r0
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005962:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005964:	bf00      	nop
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005974:	f001 faf2 	bl	8006f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005978:	4b2a      	ldr	r3, [pc, #168]	; (8005a24 <prvAddNewTaskToReadyList+0xb8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	4a29      	ldr	r2, [pc, #164]	; (8005a24 <prvAddNewTaskToReadyList+0xb8>)
 8005980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005982:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800598a:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005990:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <prvAddNewTaskToReadyList+0xb8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d110      	bne.n	80059ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005998:	f000 fc9a 	bl	80062d0 <prvInitialiseTaskLists>
 800599c:	e00d      	b.n	80059ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800599e:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <prvAddNewTaskToReadyList+0xc0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d802      	bhi.n	80059ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059b4:	4a1c      	ldr	r2, [pc, #112]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <prvAddNewTaskToReadyList+0xc4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <prvAddNewTaskToReadyList+0xc4>)
 80059c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	2201      	movs	r2, #1
 80059ca:	409a      	lsls	r2, r3
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <prvAddNewTaskToReadyList+0xc8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <prvAddNewTaskToReadyList+0xc8>)
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <prvAddNewTaskToReadyList+0xcc>)
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f7ff f8fa 	bl	8004be6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059f2:	f001 fae3 	bl	8006fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <prvAddNewTaskToReadyList+0xc0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00e      	beq.n	8005a1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d207      	bcs.n	8005a1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <prvAddNewTaskToReadyList+0xd0>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000ad4 	.word	0x20000ad4
 8005a28:	200009d4 	.word	0x200009d4
 8005a2c:	20000ae0 	.word	0x20000ae0
 8005a30:	20000af0 	.word	0x20000af0
 8005a34:	20000adc 	.word	0x20000adc
 8005a38:	200009d8 	.word	0x200009d8
 8005a3c:	e000ed04 	.word	0xe000ed04

08005a40 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005a48:	f001 fa88 	bl	8006f5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <vTaskDelete+0x18>
 8005a52:	4b39      	ldr	r3, [pc, #228]	; (8005b38 <vTaskDelete+0xf8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	e000      	b.n	8005a5a <vTaskDelete+0x1a>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff f91b 	bl	8004c9c <uxListRemove>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d115      	bne.n	8005a98 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a70:	4932      	ldr	r1, [pc, #200]	; (8005b3c <vTaskDelete+0xfc>)
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <vTaskDelete+0x58>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	2201      	movs	r2, #1
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	43da      	mvns	r2, r3
 8005a8e:	4b2c      	ldr	r3, [pc, #176]	; (8005b40 <vTaskDelete+0x100>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4013      	ands	r3, r2
 8005a94:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <vTaskDelete+0x100>)
 8005a96:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d004      	beq.n	8005aaa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	3318      	adds	r3, #24
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff f8f9 	bl	8004c9c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005aaa:	4b26      	ldr	r3, [pc, #152]	; (8005b44 <vTaskDelete+0x104>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <vTaskDelete+0x104>)
 8005ab2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005ab4:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <vTaskDelete+0xf8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d10b      	bne.n	8005ad6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4820      	ldr	r0, [pc, #128]	; (8005b48 <vTaskDelete+0x108>)
 8005ac6:	f7ff f88e 	bl	8004be6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005aca:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <vTaskDelete+0x10c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <vTaskDelete+0x10c>)
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	e009      	b.n	8005aea <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005ad6:	4b1e      	ldr	r3, [pc, #120]	; (8005b50 <vTaskDelete+0x110>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	4a1c      	ldr	r2, [pc, #112]	; (8005b50 <vTaskDelete+0x110>)
 8005ade:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fc63 	bl	80063ac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005ae6:	f000 fc91 	bl	800640c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005aea:	f001 fa67 	bl	8006fbc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005aee:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <vTaskDelete+0x114>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01b      	beq.n	8005b2e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <vTaskDelete+0xf8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d116      	bne.n	8005b2e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005b00:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <vTaskDelete+0x118>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <vTaskDelete+0xde>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	60bb      	str	r3, [r7, #8]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8005b1e:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <vTaskDelete+0x11c>)
 8005b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b2e:	bf00      	nop
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	200009d4 	.word	0x200009d4
 8005b3c:	200009d8 	.word	0x200009d8
 8005b40:	20000adc 	.word	0x20000adc
 8005b44:	20000af0 	.word	0x20000af0
 8005b48:	20000aa8 	.word	0x20000aa8
 8005b4c:	20000abc 	.word	0x20000abc
 8005b50:	20000ad4 	.word	0x20000ad4
 8005b54:	20000ae0 	.word	0x20000ae0
 8005b58:	20000afc 	.word	0x20000afc
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d017      	beq.n	8005ba2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b72:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <vTaskDelay+0x60>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <vTaskDelay+0x30>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	60bb      	str	r3, [r7, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b90:	f000 f880 	bl	8005c94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b94:	2100      	movs	r1, #0
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fd00 	bl	800659c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b9c:	f000 f888 	bl	8005cb0 <xTaskResumeAll>
 8005ba0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d107      	bne.n	8005bb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <vTaskDelay+0x64>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000afc 	.word	0x20000afc
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	; 0x28
 8005bcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bd6:	463a      	mov	r2, r7
 8005bd8:	1d39      	adds	r1, r7, #4
 8005bda:	f107 0308 	add.w	r3, r7, #8
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fb f9b6 	bl	8000f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	9202      	str	r2, [sp, #8]
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	460a      	mov	r2, r1
 8005bf6:	4921      	ldr	r1, [pc, #132]	; (8005c7c <vTaskStartScheduler+0xb4>)
 8005bf8:	4821      	ldr	r0, [pc, #132]	; (8005c80 <vTaskStartScheduler+0xb8>)
 8005bfa:	f7ff fd97 	bl	800572c <xTaskCreateStatic>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4a20      	ldr	r2, [pc, #128]	; (8005c84 <vTaskStartScheduler+0xbc>)
 8005c02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c04:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <vTaskStartScheduler+0xbc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e001      	b.n	8005c16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d102      	bne.n	8005c22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c1c:	f000 fd24 	bl	8006668 <xTimerCreateTimerTask>
 8005c20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d116      	bne.n	8005c56 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	613b      	str	r3, [r7, #16]
}
 8005c3a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c3c:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <vTaskStartScheduler+0xc0>)
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <vTaskStartScheduler+0xc4>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005c4a:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <vTaskStartScheduler+0xc8>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c50:	f001 f912 	bl	8006e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c54:	e00e      	b.n	8005c74 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d10a      	bne.n	8005c74 <vTaskStartScheduler+0xac>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	60fb      	str	r3, [r7, #12]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <vTaskStartScheduler+0xaa>
}
 8005c74:	bf00      	nop
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	0800768c 	.word	0x0800768c
 8005c80:	080062a1 	.word	0x080062a1
 8005c84:	20000af8 	.word	0x20000af8
 8005c88:	20000af4 	.word	0x20000af4
 8005c8c:	20000ae0 	.word	0x20000ae0
 8005c90:	20000ad8 	.word	0x20000ad8

08005c94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c98:	4b04      	ldr	r3, [pc, #16]	; (8005cac <vTaskSuspendAll+0x18>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	4a03      	ldr	r2, [pc, #12]	; (8005cac <vTaskSuspendAll+0x18>)
 8005ca0:	6013      	str	r3, [r2, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20000afc 	.word	0x20000afc

08005cb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cbe:	4b41      	ldr	r3, [pc, #260]	; (8005dc4 <xTaskResumeAll+0x114>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <xTaskResumeAll+0x2c>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	603b      	str	r3, [r7, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cdc:	f001 f93e 	bl	8006f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ce0:	4b38      	ldr	r3, [pc, #224]	; (8005dc4 <xTaskResumeAll+0x114>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	4a37      	ldr	r2, [pc, #220]	; (8005dc4 <xTaskResumeAll+0x114>)
 8005ce8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cea:	4b36      	ldr	r3, [pc, #216]	; (8005dc4 <xTaskResumeAll+0x114>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d161      	bne.n	8005db6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cf2:	4b35      	ldr	r3, [pc, #212]	; (8005dc8 <xTaskResumeAll+0x118>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d05d      	beq.n	8005db6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cfa:	e02e      	b.n	8005d5a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005cfc:	4b33      	ldr	r3, [pc, #204]	; (8005dcc <xTaskResumeAll+0x11c>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3318      	adds	r3, #24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe ffc7 	bl	8004c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe ffc2 	bl	8004c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <xTaskResumeAll+0x120>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	4a2a      	ldr	r2, [pc, #168]	; (8005dd0 <xTaskResumeAll+0x120>)
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4a27      	ldr	r2, [pc, #156]	; (8005dd4 <xTaskResumeAll+0x124>)
 8005d38:	441a      	add	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f7fe ff50 	bl	8004be6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	4b23      	ldr	r3, [pc, #140]	; (8005dd8 <xTaskResumeAll+0x128>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d302      	bcc.n	8005d5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d54:	4b21      	ldr	r3, [pc, #132]	; (8005ddc <xTaskResumeAll+0x12c>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d5a:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <xTaskResumeAll+0x11c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1cc      	bne.n	8005cfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d68:	f000 fb50 	bl	800640c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d6c:	4b1c      	ldr	r3, [pc, #112]	; (8005de0 <xTaskResumeAll+0x130>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d010      	beq.n	8005d9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d78:	f000 f844 	bl	8005e04 <xTaskIncrementTick>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d82:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <xTaskResumeAll+0x12c>)
 8005d84:	2201      	movs	r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1f1      	bne.n	8005d78 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005d94:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <xTaskResumeAll+0x130>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d9a:	4b10      	ldr	r3, [pc, #64]	; (8005ddc <xTaskResumeAll+0x12c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005da6:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <xTaskResumeAll+0x134>)
 8005da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005db6:	f001 f901 	bl	8006fbc <vPortExitCritical>

	return xAlreadyYielded;
 8005dba:	68bb      	ldr	r3, [r7, #8]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000afc 	.word	0x20000afc
 8005dc8:	20000ad4 	.word	0x20000ad4
 8005dcc:	20000a94 	.word	0x20000a94
 8005dd0:	20000adc 	.word	0x20000adc
 8005dd4:	200009d8 	.word	0x200009d8
 8005dd8:	200009d4 	.word	0x200009d4
 8005ddc:	20000ae8 	.word	0x20000ae8
 8005de0:	20000ae4 	.word	0x20000ae4
 8005de4:	e000ed04 	.word	0xe000ed04

08005de8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dee:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <xTaskGetTickCount+0x18>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005df4:	687b      	ldr	r3, [r7, #4]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr
 8005e00:	20000ad8 	.word	0x20000ad8

08005e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e0e:	4b51      	ldr	r3, [pc, #324]	; (8005f54 <xTaskIncrementTick+0x150>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f040 808d 	bne.w	8005f32 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e18:	4b4f      	ldr	r3, [pc, #316]	; (8005f58 <xTaskIncrementTick+0x154>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e20:	4a4d      	ldr	r2, [pc, #308]	; (8005f58 <xTaskIncrementTick+0x154>)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d120      	bne.n	8005e6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e2c:	4b4b      	ldr	r3, [pc, #300]	; (8005f5c <xTaskIncrementTick+0x158>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <xTaskIncrementTick+0x48>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	603b      	str	r3, [r7, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <xTaskIncrementTick+0x46>
 8005e4c:	4b43      	ldr	r3, [pc, #268]	; (8005f5c <xTaskIncrementTick+0x158>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	4b43      	ldr	r3, [pc, #268]	; (8005f60 <xTaskIncrementTick+0x15c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a41      	ldr	r2, [pc, #260]	; (8005f5c <xTaskIncrementTick+0x158>)
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	4a41      	ldr	r2, [pc, #260]	; (8005f60 <xTaskIncrementTick+0x15c>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	4b40      	ldr	r3, [pc, #256]	; (8005f64 <xTaskIncrementTick+0x160>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a3f      	ldr	r2, [pc, #252]	; (8005f64 <xTaskIncrementTick+0x160>)
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	f000 facf 	bl	800640c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e6e:	4b3e      	ldr	r3, [pc, #248]	; (8005f68 <xTaskIncrementTick+0x164>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d34d      	bcc.n	8005f14 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e78:	4b38      	ldr	r3, [pc, #224]	; (8005f5c <xTaskIncrementTick+0x158>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <xTaskIncrementTick+0x82>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <xTaskIncrementTick+0x84>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d004      	beq.n	8005e96 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8c:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <xTaskIncrementTick+0x164>)
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	601a      	str	r2, [r3, #0]
					break;
 8005e94:	e03e      	b.n	8005f14 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e96:	4b31      	ldr	r3, [pc, #196]	; (8005f5c <xTaskIncrementTick+0x158>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d203      	bcs.n	8005eb6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005eae:	4a2e      	ldr	r2, [pc, #184]	; (8005f68 <xTaskIncrementTick+0x164>)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6013      	str	r3, [r2, #0]
						break;
 8005eb4:	e02e      	b.n	8005f14 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe feee 	bl	8004c9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d004      	beq.n	8005ed2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	3318      	adds	r3, #24
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe fee5 	bl	8004c9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	409a      	lsls	r2, r3
 8005eda:	4b24      	ldr	r3, [pc, #144]	; (8005f6c <xTaskIncrementTick+0x168>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <xTaskIncrementTick+0x168>)
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <xTaskIncrementTick+0x16c>)
 8005ef2:	441a      	add	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f7fe fe73 	bl	8004be6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <xTaskIncrementTick+0x170>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d3b4      	bcc.n	8005e78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f12:	e7b1      	b.n	8005e78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f14:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <xTaskIncrementTick+0x170>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1a:	4915      	ldr	r1, [pc, #84]	; (8005f70 <xTaskIncrementTick+0x16c>)
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d907      	bls.n	8005f3c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e004      	b.n	8005f3c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f32:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <xTaskIncrementTick+0x174>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3301      	adds	r3, #1
 8005f38:	4a0f      	ldr	r2, [pc, #60]	; (8005f78 <xTaskIncrementTick+0x174>)
 8005f3a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f3c:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <xTaskIncrementTick+0x178>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005f44:	2301      	movs	r3, #1
 8005f46:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f48:	697b      	ldr	r3, [r7, #20]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000afc 	.word	0x20000afc
 8005f58:	20000ad8 	.word	0x20000ad8
 8005f5c:	20000a8c 	.word	0x20000a8c
 8005f60:	20000a90 	.word	0x20000a90
 8005f64:	20000aec 	.word	0x20000aec
 8005f68:	20000af4 	.word	0x20000af4
 8005f6c:	20000adc 	.word	0x20000adc
 8005f70:	200009d8 	.word	0x200009d8
 8005f74:	200009d4 	.word	0x200009d4
 8005f78:	20000ae4 	.word	0x20000ae4
 8005f7c:	20000ae8 	.word	0x20000ae8

08005f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f86:	4b26      	ldr	r3, [pc, #152]	; (8006020 <vTaskSwitchContext+0xa0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f8e:	4b25      	ldr	r3, [pc, #148]	; (8006024 <vTaskSwitchContext+0xa4>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f94:	e03f      	b.n	8006016 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005f96:	4b23      	ldr	r3, [pc, #140]	; (8006024 <vTaskSwitchContext+0xa4>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f9c:	4b22      	ldr	r3, [pc, #136]	; (8006028 <vTaskSwitchContext+0xa8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	fab3 f383 	clz	r3, r3
 8005fa8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005faa:	7afb      	ldrb	r3, [r7, #11]
 8005fac:	f1c3 031f 	rsb	r3, r3, #31
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	491e      	ldr	r1, [pc, #120]	; (800602c <vTaskSwitchContext+0xac>)
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	607b      	str	r3, [r7, #4]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <vTaskSwitchContext+0x5a>
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4a11      	ldr	r2, [pc, #68]	; (800602c <vTaskSwitchContext+0xac>)
 8005fe8:	4413      	add	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d104      	bne.n	800600c <vTaskSwitchContext+0x8c>
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	605a      	str	r2, [r3, #4]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	4a07      	ldr	r2, [pc, #28]	; (8006030 <vTaskSwitchContext+0xb0>)
 8006014:	6013      	str	r3, [r2, #0]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	20000afc 	.word	0x20000afc
 8006024:	20000ae8 	.word	0x20000ae8
 8006028:	20000adc 	.word	0x20000adc
 800602c:	200009d8 	.word	0x200009d8
 8006030:	200009d4 	.word	0x200009d4

08006034 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60fb      	str	r3, [r7, #12]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <vTaskPlaceOnEventList+0x44>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3318      	adds	r3, #24
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fe fde2 	bl	8004c2c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006068:	2101      	movs	r1, #1
 800606a:	6838      	ldr	r0, [r7, #0]
 800606c:	f000 fa96 	bl	800659c <prvAddCurrentTaskToDelayedList>
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	200009d4 	.word	0x200009d4

0800607c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	617b      	str	r3, [r7, #20]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3318      	adds	r3, #24
 80060aa:	4619      	mov	r1, r3
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7fe fd9a 	bl	8004be6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80060b8:	f04f 33ff 	mov.w	r3, #4294967295
 80060bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	68b8      	ldr	r0, [r7, #8]
 80060c2:	f000 fa6b 	bl	800659c <prvAddCurrentTaskToDelayedList>
	}
 80060c6:	bf00      	nop
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200009d4 	.word	0x200009d4

080060d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	60fb      	str	r3, [r7, #12]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3318      	adds	r3, #24
 8006104:	4618      	mov	r0, r3
 8006106:	f7fe fdc9 	bl	8004c9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800610a:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <xTaskRemoveFromEventList+0xac>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d11c      	bne.n	800614c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	3304      	adds	r3, #4
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fdc0 	bl	8004c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	2201      	movs	r2, #1
 8006122:	409a      	lsls	r2, r3
 8006124:	4b17      	ldr	r3, [pc, #92]	; (8006184 <xTaskRemoveFromEventList+0xb0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4313      	orrs	r3, r2
 800612a:	4a16      	ldr	r2, [pc, #88]	; (8006184 <xTaskRemoveFromEventList+0xb0>)
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4a13      	ldr	r2, [pc, #76]	; (8006188 <xTaskRemoveFromEventList+0xb4>)
 800613c:	441a      	add	r2, r3
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3304      	adds	r3, #4
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f7fe fd4e 	bl	8004be6 <vListInsertEnd>
 800614a:	e005      	b.n	8006158 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	3318      	adds	r3, #24
 8006150:	4619      	mov	r1, r3
 8006152:	480e      	ldr	r0, [pc, #56]	; (800618c <xTaskRemoveFromEventList+0xb8>)
 8006154:	f7fe fd47 	bl	8004be6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <xTaskRemoveFromEventList+0xbc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	429a      	cmp	r2, r3
 8006164:	d905      	bls.n	8006172 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006166:	2301      	movs	r3, #1
 8006168:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <xTaskRemoveFromEventList+0xc0>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e001      	b.n	8006176 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006176:	697b      	ldr	r3, [r7, #20]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000afc 	.word	0x20000afc
 8006184:	20000adc 	.word	0x20000adc
 8006188:	200009d8 	.word	0x200009d8
 800618c:	20000a94 	.word	0x20000a94
 8006190:	200009d4 	.word	0x200009d4
 8006194:	20000ae8 	.word	0x20000ae8

08006198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <vTaskInternalSetTimeOutState+0x24>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <vTaskInternalSetTimeOutState+0x28>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	605a      	str	r2, [r3, #4]
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20000aec 	.word	0x20000aec
 80061c0:	20000ad8 	.word	0x20000ad8

080061c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	613b      	str	r3, [r7, #16]
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	60fb      	str	r3, [r7, #12]
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006206:	f000 fea9 	bl	8006f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800620a:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <xTaskCheckForTimeOut+0xbc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d102      	bne.n	800622a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006224:	2300      	movs	r3, #0
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	e023      	b.n	8006272 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b15      	ldr	r3, [pc, #84]	; (8006284 <xTaskCheckForTimeOut+0xc0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d007      	beq.n	8006246 <xTaskCheckForTimeOut+0x82>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	429a      	cmp	r2, r3
 800623e:	d302      	bcc.n	8006246 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006240:	2301      	movs	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	e015      	b.n	8006272 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	429a      	cmp	r2, r3
 800624e:	d20b      	bcs.n	8006268 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	1ad2      	subs	r2, r2, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff ff9b 	bl	8006198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
 8006266:	e004      	b.n	8006272 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800626e:	2301      	movs	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006272:	f000 fea3 	bl	8006fbc <vPortExitCritical>

	return xReturn;
 8006276:	69fb      	ldr	r3, [r7, #28]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000ad8 	.word	0x20000ad8
 8006284:	20000aec 	.word	0x20000aec

08006288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800628c:	4b03      	ldr	r3, [pc, #12]	; (800629c <vTaskMissedYield+0x14>)
 800628e:	2201      	movs	r2, #1
 8006290:	601a      	str	r2, [r3, #0]
}
 8006292:	bf00      	nop
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000ae8 	.word	0x20000ae8

080062a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062a8:	f000 f852 	bl	8006350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <prvIdleTask+0x28>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d9f9      	bls.n	80062a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <prvIdleTask+0x2c>)
 80062b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062c4:	e7f0      	b.n	80062a8 <prvIdleTask+0x8>
 80062c6:	bf00      	nop
 80062c8:	200009d8 	.word	0x200009d8
 80062cc:	e000ed04 	.word	0xe000ed04

080062d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062d6:	2300      	movs	r3, #0
 80062d8:	607b      	str	r3, [r7, #4]
 80062da:	e00c      	b.n	80062f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a12      	ldr	r2, [pc, #72]	; (8006330 <prvInitialiseTaskLists+0x60>)
 80062e8:	4413      	add	r3, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fc50 	bl	8004b90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3301      	adds	r3, #1
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b06      	cmp	r3, #6
 80062fa:	d9ef      	bls.n	80062dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062fc:	480d      	ldr	r0, [pc, #52]	; (8006334 <prvInitialiseTaskLists+0x64>)
 80062fe:	f7fe fc47 	bl	8004b90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006302:	480d      	ldr	r0, [pc, #52]	; (8006338 <prvInitialiseTaskLists+0x68>)
 8006304:	f7fe fc44 	bl	8004b90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006308:	480c      	ldr	r0, [pc, #48]	; (800633c <prvInitialiseTaskLists+0x6c>)
 800630a:	f7fe fc41 	bl	8004b90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800630e:	480c      	ldr	r0, [pc, #48]	; (8006340 <prvInitialiseTaskLists+0x70>)
 8006310:	f7fe fc3e 	bl	8004b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006314:	480b      	ldr	r0, [pc, #44]	; (8006344 <prvInitialiseTaskLists+0x74>)
 8006316:	f7fe fc3b 	bl	8004b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <prvInitialiseTaskLists+0x78>)
 800631c:	4a05      	ldr	r2, [pc, #20]	; (8006334 <prvInitialiseTaskLists+0x64>)
 800631e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <prvInitialiseTaskLists+0x7c>)
 8006322:	4a05      	ldr	r2, [pc, #20]	; (8006338 <prvInitialiseTaskLists+0x68>)
 8006324:	601a      	str	r2, [r3, #0]
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	200009d8 	.word	0x200009d8
 8006334:	20000a64 	.word	0x20000a64
 8006338:	20000a78 	.word	0x20000a78
 800633c:	20000a94 	.word	0x20000a94
 8006340:	20000aa8 	.word	0x20000aa8
 8006344:	20000ac0 	.word	0x20000ac0
 8006348:	20000a8c 	.word	0x20000a8c
 800634c:	20000a90 	.word	0x20000a90

08006350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006356:	e019      	b.n	800638c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006358:	f000 fe00 	bl	8006f5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800635c:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <prvCheckTasksWaitingTermination+0x50>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3304      	adds	r3, #4
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fc97 	bl	8004c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800636e:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <prvCheckTasksWaitingTermination+0x54>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3b01      	subs	r3, #1
 8006374:	4a0b      	ldr	r2, [pc, #44]	; (80063a4 <prvCheckTasksWaitingTermination+0x54>)
 8006376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <prvCheckTasksWaitingTermination+0x58>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3b01      	subs	r3, #1
 800637e:	4a0a      	ldr	r2, [pc, #40]	; (80063a8 <prvCheckTasksWaitingTermination+0x58>)
 8006380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006382:	f000 fe1b 	bl	8006fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f810 	bl	80063ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <prvCheckTasksWaitingTermination+0x58>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e1      	bne.n	8006358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000aa8 	.word	0x20000aa8
 80063a4:	20000ad4 	.word	0x20000ad4
 80063a8:	20000abc 	.word	0x20000abc

080063ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d108      	bne.n	80063d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 ff8e 	bl	80072e4 <vPortFree>
				vPortFree( pxTCB );
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 ff8b 	bl	80072e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063ce:	e018      	b.n	8006402 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d103      	bne.n	80063e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 ff82 	bl	80072e4 <vPortFree>
	}
 80063e0:	e00f      	b.n	8006402 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d00a      	beq.n	8006402 <prvDeleteTCB+0x56>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60fb      	str	r3, [r7, #12]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <prvDeleteTCB+0x54>
	}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006412:	4b0e      	ldr	r3, [pc, #56]	; (800644c <prvResetNextTaskUnblockTime+0x40>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <prvResetNextTaskUnblockTime+0x14>
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <prvResetNextTaskUnblockTime+0x16>
 8006420:	2300      	movs	r3, #0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <prvResetNextTaskUnblockTime+0x44>)
 8006428:	f04f 32ff 	mov.w	r2, #4294967295
 800642c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800642e:	e008      	b.n	8006442 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <prvResetNextTaskUnblockTime+0x40>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4a04      	ldr	r2, [pc, #16]	; (8006450 <prvResetNextTaskUnblockTime+0x44>)
 8006440:	6013      	str	r3, [r2, #0]
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr
 800644c:	20000a8c 	.word	0x20000a8c
 8006450:	20000af4 	.word	0x20000af4

08006454 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800645a:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <xTaskGetSchedulerState+0x34>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006462:	2301      	movs	r3, #1
 8006464:	607b      	str	r3, [r7, #4]
 8006466:	e008      	b.n	800647a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006468:	4b08      	ldr	r3, [pc, #32]	; (800648c <xTaskGetSchedulerState+0x38>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006470:	2302      	movs	r3, #2
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	e001      	b.n	800647a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006476:	2300      	movs	r3, #0
 8006478:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800647a:	687b      	ldr	r3, [r7, #4]
	}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000ae0 	.word	0x20000ae0
 800648c:	20000afc 	.word	0x20000afc

08006490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d06e      	beq.n	8006584 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064a6:	4b3a      	ldr	r3, [pc, #232]	; (8006590 <xTaskPriorityDisinherit+0x100>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d00a      	beq.n	80064c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	60bb      	str	r3, [r7, #8]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e8:	1e5a      	subs	r2, r3, #1
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d044      	beq.n	8006584 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d140      	bne.n	8006584 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	3304      	adds	r3, #4
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe fbc8 	bl	8004c9c <uxListRemove>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d115      	bne.n	800653e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006516:	491f      	ldr	r1, [pc, #124]	; (8006594 <xTaskPriorityDisinherit+0x104>)
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <xTaskPriorityDisinherit+0xae>
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	2201      	movs	r2, #1
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	43da      	mvns	r2, r3
 8006534:	4b18      	ldr	r3, [pc, #96]	; (8006598 <xTaskPriorityDisinherit+0x108>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4013      	ands	r3, r2
 800653a:	4a17      	ldr	r2, [pc, #92]	; (8006598 <xTaskPriorityDisinherit+0x108>)
 800653c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	f1c3 0207 	rsb	r2, r3, #7
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	2201      	movs	r2, #1
 8006558:	409a      	lsls	r2, r3
 800655a:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <xTaskPriorityDisinherit+0x108>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4313      	orrs	r3, r2
 8006560:	4a0d      	ldr	r2, [pc, #52]	; (8006598 <xTaskPriorityDisinherit+0x108>)
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4a08      	ldr	r2, [pc, #32]	; (8006594 <xTaskPriorityDisinherit+0x104>)
 8006572:	441a      	add	r2, r3
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	3304      	adds	r3, #4
 8006578:	4619      	mov	r1, r3
 800657a:	4610      	mov	r0, r2
 800657c:	f7fe fb33 	bl	8004be6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006580:	2301      	movs	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006584:	697b      	ldr	r3, [r7, #20]
	}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	200009d4 	.word	0x200009d4
 8006594:	200009d8 	.word	0x200009d8
 8006598:	20000adc 	.word	0x20000adc

0800659c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065a6:	4b29      	ldr	r3, [pc, #164]	; (800664c <prvAddCurrentTaskToDelayedList+0xb0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ac:	4b28      	ldr	r3, [pc, #160]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fb72 	bl	8004c9c <uxListRemove>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80065be:	4b24      	ldr	r3, [pc, #144]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	2201      	movs	r2, #1
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43da      	mvns	r2, r3
 80065cc:	4b21      	ldr	r3, [pc, #132]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4013      	ands	r3, r2
 80065d2:	4a20      	ldr	r2, [pc, #128]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d10a      	bne.n	80065f4 <prvAddCurrentTaskToDelayedList+0x58>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065e4:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3304      	adds	r3, #4
 80065ea:	4619      	mov	r1, r3
 80065ec:	481a      	ldr	r0, [pc, #104]	; (8006658 <prvAddCurrentTaskToDelayedList+0xbc>)
 80065ee:	f7fe fafa 	bl	8004be6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065f2:	e026      	b.n	8006642 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4413      	add	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065fc:	4b14      	ldr	r3, [pc, #80]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	429a      	cmp	r2, r3
 800660a:	d209      	bcs.n	8006620 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800660c:	4b13      	ldr	r3, [pc, #76]	; (800665c <prvAddCurrentTaskToDelayedList+0xc0>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b0f      	ldr	r3, [pc, #60]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fe fb07 	bl	8004c2c <vListInsert>
}
 800661e:	e010      	b.n	8006642 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006620:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7fe fafd 	bl	8004c2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006632:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	429a      	cmp	r2, r3
 800663a:	d202      	bcs.n	8006642 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800663c:	4a09      	ldr	r2, [pc, #36]	; (8006664 <prvAddCurrentTaskToDelayedList+0xc8>)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	6013      	str	r3, [r2, #0]
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000ad8 	.word	0x20000ad8
 8006650:	200009d4 	.word	0x200009d4
 8006654:	20000adc 	.word	0x20000adc
 8006658:	20000ac0 	.word	0x20000ac0
 800665c:	20000a90 	.word	0x20000a90
 8006660:	20000a8c 	.word	0x20000a8c
 8006664:	20000af4 	.word	0x20000af4

08006668 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006672:	f000 fb41 	bl	8006cf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006676:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <xTimerCreateTimerTask+0x80>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d021      	beq.n	80066c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006686:	1d3a      	adds	r2, r7, #4
 8006688:	f107 0108 	add.w	r1, r7, #8
 800668c:	f107 030c 	add.w	r3, r7, #12
 8006690:	4618      	mov	r0, r3
 8006692:	f7fa fc75 	bl	8000f80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	9202      	str	r2, [sp, #8]
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	2302      	movs	r3, #2
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	460a      	mov	r2, r1
 80066a8:	4910      	ldr	r1, [pc, #64]	; (80066ec <xTimerCreateTimerTask+0x84>)
 80066aa:	4811      	ldr	r0, [pc, #68]	; (80066f0 <xTimerCreateTimerTask+0x88>)
 80066ac:	f7ff f83e 	bl	800572c <xTaskCreateStatic>
 80066b0:	4603      	mov	r3, r0
 80066b2:	4a10      	ldr	r2, [pc, #64]	; (80066f4 <xTimerCreateTimerTask+0x8c>)
 80066b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <xTimerCreateTimerTask+0x8c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066be:	2301      	movs	r3, #1
 80066c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	613b      	str	r3, [r7, #16]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80066de:	697b      	ldr	r3, [r7, #20]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000b30 	.word	0x20000b30
 80066ec:	08007694 	.word	0x08007694
 80066f0:	08006935 	.word	0x08006935
 80066f4:	20000b34 	.word	0x20000b34

080066f8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006706:	202c      	movs	r0, #44	; 0x2c
 8006708:	f000 fd28 	bl	800715c <pvPortMalloc>
 800670c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00d      	beq.n	8006730 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f846 	bl	80067b4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006730:	697b      	ldr	r3, [r7, #20]
	}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800673a:	b580      	push	{r7, lr}
 800673c:	b08a      	sub	sp, #40	; 0x28
 800673e:	af02      	add	r7, sp, #8
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006748:	232c      	movs	r3, #44	; 0x2c
 800674a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b2c      	cmp	r3, #44	; 0x2c
 8006750:	d00a      	beq.n	8006768 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	61bb      	str	r3, [r7, #24]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <xTimerCreateStatic+0x4a>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	617b      	str	r3, [r7, #20]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00d      	beq.n	80067aa <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f809 	bl	80067b4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80067aa:	69fb      	ldr	r3, [r7, #28]
	}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	617b      	str	r3, [r7, #20]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d015      	beq.n	8006810 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80067e4:	f000 fa88 	bl	8006cf8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	6a3a      	ldr	r2, [r7, #32]
 8006804:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe f9df 	bl	8004bce <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006810:	bf00      	nop
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006826:	2300      	movs	r3, #0
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	623b      	str	r3, [r7, #32]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006846:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <xTimerGenericCommand+0x98>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d02a      	beq.n	80068a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b05      	cmp	r3, #5
 800685e:	dc18      	bgt.n	8006892 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006860:	f7ff fdf8 	bl	8006454 <xTaskGetSchedulerState>
 8006864:	4603      	mov	r3, r0
 8006866:	2b02      	cmp	r3, #2
 8006868:	d109      	bne.n	800687e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800686a:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <xTimerGenericCommand+0x98>)
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f107 0114 	add.w	r1, r7, #20
 8006872:	2300      	movs	r3, #0
 8006874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006876:	f7fe fb77 	bl	8004f68 <xQueueGenericSend>
 800687a:	6278      	str	r0, [r7, #36]	; 0x24
 800687c:	e012      	b.n	80068a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800687e:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <xTimerGenericCommand+0x98>)
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	f107 0114 	add.w	r1, r7, #20
 8006886:	2300      	movs	r3, #0
 8006888:	2200      	movs	r2, #0
 800688a:	f7fe fb6d 	bl	8004f68 <xQueueGenericSend>
 800688e:	6278      	str	r0, [r7, #36]	; 0x24
 8006890:	e008      	b.n	80068a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006892:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <xTimerGenericCommand+0x98>)
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	f107 0114 	add.w	r1, r7, #20
 800689a:	2300      	movs	r3, #0
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	f7fe fc61 	bl	8005164 <xQueueGenericSendFromISR>
 80068a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3728      	adds	r7, #40	; 0x28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000b30 	.word	0x20000b30

080068b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068be:	4b1c      	ldr	r3, [pc, #112]	; (8006930 <prvProcessExpiredTimer+0x7c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe f9e5 	bl	8004c9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d122      	bne.n	8006920 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	18d1      	adds	r1, r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	6978      	ldr	r0, [r7, #20]
 80068e8:	f000 f8c8 	bl	8006a7c <prvInsertTimerInActiveList>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d016      	beq.n	8006920 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068f2:	2300      	movs	r3, #0
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	2300      	movs	r3, #0
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	2100      	movs	r1, #0
 80068fc:	6978      	ldr	r0, [r7, #20]
 80068fe:	f7ff ff8b 	bl	8006818 <xTimerGenericCommand>
 8006902:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	60fb      	str	r3, [r7, #12]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	6978      	ldr	r0, [r7, #20]
 8006926:	4798      	blx	r3
}
 8006928:	bf00      	nop
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20000b28 	.word	0x20000b28

08006934 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800693c:	f107 0308 	add.w	r3, r7, #8
 8006940:	4618      	mov	r0, r3
 8006942:	f000 f857 	bl	80069f4 <prvGetNextExpireTime>
 8006946:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4619      	mov	r1, r3
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f803 	bl	8006958 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006952:	f000 f8d5 	bl	8006b00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006956:	e7f1      	b.n	800693c <prvTimerTask+0x8>

08006958 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006962:	f7ff f997 	bl	8005c94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006966:	f107 0308 	add.w	r3, r7, #8
 800696a:	4618      	mov	r0, r3
 800696c:	f000 f866 	bl	8006a3c <prvSampleTimeNow>
 8006970:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d130      	bne.n	80069da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <prvProcessTimerOrBlockTask+0x3c>
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	429a      	cmp	r2, r3
 8006984:	d806      	bhi.n	8006994 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006986:	f7ff f993 	bl	8005cb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff91 	bl	80068b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006992:	e024      	b.n	80069de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800699a:	4b13      	ldr	r3, [pc, #76]	; (80069e8 <prvProcessTimerOrBlockTask+0x90>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bf0c      	ite	eq
 80069a4:	2301      	moveq	r3, #1
 80069a6:	2300      	movne	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069ac:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <prvProcessTimerOrBlockTask+0x94>)
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	4619      	mov	r1, r3
 80069ba:	f7fe fe83 	bl	80056c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80069be:	f7ff f977 	bl	8005cb0 <xTaskResumeAll>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80069c8:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <prvProcessTimerOrBlockTask+0x98>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
}
 80069d8:	e001      	b.n	80069de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80069da:	f7ff f969 	bl	8005cb0 <xTaskResumeAll>
}
 80069de:	bf00      	nop
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000b2c 	.word	0x20000b2c
 80069ec:	20000b30 	.word	0x20000b30
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069fc:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <prvGetNextExpireTime+0x44>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d105      	bne.n	8006a26 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <prvGetNextExpireTime+0x44>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e001      	b.n	8006a2a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20000b28 	.word	0x20000b28

08006a3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a44:	f7ff f9d0 	bl	8005de8 <xTaskGetTickCount>
 8006a48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <prvSampleTimeNow+0x3c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d205      	bcs.n	8006a60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a54:	f000 f8ee 	bl	8006c34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e002      	b.n	8006a66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a66:	4a04      	ldr	r2, [pc, #16]	; (8006a78 <prvSampleTimeNow+0x3c>)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000b38 	.word	0x20000b38

08006a7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d812      	bhi.n	8006ac8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	1ad2      	subs	r2, r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d302      	bcc.n	8006ab6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	e01b      	b.n	8006aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ab6:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <prvInsertTimerInActiveList+0x7c>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	f7fe f8b3 	bl	8004c2c <vListInsert>
 8006ac6:	e012      	b.n	8006aee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d206      	bcs.n	8006ade <prvInsertTimerInActiveList+0x62>
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e007      	b.n	8006aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ade:	4b07      	ldr	r3, [pc, #28]	; (8006afc <prvInsertTimerInActiveList+0x80>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f7fe f89f 	bl	8004c2c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006aee:	697b      	ldr	r3, [r7, #20]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000b2c 	.word	0x20000b2c
 8006afc:	20000b28 	.word	0x20000b28

08006b00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08c      	sub	sp, #48	; 0x30
 8006b04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b06:	e081      	b.n	8006c0c <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	db7e      	blt.n	8006c0c <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d004      	beq.n	8006b24 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe f8bc 	bl	8004c9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b24:	1d3b      	adds	r3, r7, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff ff88 	bl	8006a3c <prvSampleTimeNow>
 8006b2c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b09      	cmp	r3, #9
 8006b32:	d86a      	bhi.n	8006c0a <prvProcessReceivedCommands+0x10a>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <prvProcessReceivedCommands+0x3c>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b65 	.word	0x08006b65
 8006b48:	08006c0d 	.word	0x08006c0d
 8006b4c:	08006bc1 	.word	0x08006bc1
 8006b50:	08006bf9 	.word	0x08006bf9
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006b65 	.word	0x08006b65
 8006b5c:	08006c0d 	.word	0x08006c0d
 8006b60:	08006bc1 	.word	0x08006bc1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	18d1      	adds	r1, r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a3a      	ldr	r2, [r7, #32]
 8006b70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b72:	f7ff ff83 	bl	8006a7c <prvInsertTimerInActiveList>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d047      	beq.n	8006c0c <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d13f      	bne.n	8006c0c <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	441a      	add	r2, r3
 8006b94:	2300      	movs	r3, #0
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b9e:	f7ff fe3b 	bl	8006818 <xTimerGenericCommand>
 8006ba2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d130      	bne.n	8006c0c <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	61bb      	str	r3, [r7, #24]
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	617b      	str	r3, [r7, #20]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	18d1      	adds	r1, r2, r3
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	6a3a      	ldr	r2, [r7, #32]
 8006bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bf2:	f7ff ff43 	bl	8006a7c <prvInsertTimerInActiveList>
					break;
 8006bf6:	e009      	b.n	8006c0c <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d104      	bne.n	8006c0c <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 8006c02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c04:	f000 fb6e 	bl	80072e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c08:	e000      	b.n	8006c0c <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 8006c0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c0c:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <prvProcessReceivedCommands+0x130>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f107 0108 	add.w	r1, r7, #8
 8006c14:	2200      	movs	r2, #0
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fb3c 	bl	8005294 <xQueueReceive>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f47f af72 	bne.w	8006b08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	3728      	adds	r7, #40	; 0x28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000b30 	.word	0x20000b30

08006c34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c3a:	e045      	b.n	8006cc8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c3c:	4b2c      	ldr	r3, [pc, #176]	; (8006cf0 <prvSwitchTimerLists+0xbc>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c46:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <prvSwitchTimerLists+0xbc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe f821 	bl	8004c9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d12e      	bne.n	8006cc8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4413      	add	r3, r2
 8006c72:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d90e      	bls.n	8006c9a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <prvSwitchTimerLists+0xbc>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f7fd ffca 	bl	8004c2c <vListInsert>
 8006c98:	e016      	b.n	8006cc8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff fdb7 	bl	8006818 <xTimerGenericCommand>
 8006caa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	603b      	str	r3, [r7, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <prvSwitchTimerLists+0xbc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1b4      	bne.n	8006c3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006cd2:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <prvSwitchTimerLists+0xbc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006cd8:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <prvSwitchTimerLists+0xc0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a04      	ldr	r2, [pc, #16]	; (8006cf0 <prvSwitchTimerLists+0xbc>)
 8006cde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ce0:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <prvSwitchTimerLists+0xc0>)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	6013      	str	r3, [r2, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000b28 	.word	0x20000b28
 8006cf4:	20000b2c 	.word	0x20000b2c

08006cf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006cfe:	f000 f92d 	bl	8006f5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <prvCheckForValidListAndQueue+0x60>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d120      	bne.n	8006d4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d0a:	4814      	ldr	r0, [pc, #80]	; (8006d5c <prvCheckForValidListAndQueue+0x64>)
 8006d0c:	f7fd ff40 	bl	8004b90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d10:	4813      	ldr	r0, [pc, #76]	; (8006d60 <prvCheckForValidListAndQueue+0x68>)
 8006d12:	f7fd ff3d 	bl	8004b90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d16:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <prvCheckForValidListAndQueue+0x6c>)
 8006d18:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <prvCheckForValidListAndQueue+0x64>)
 8006d1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d1c:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <prvCheckForValidListAndQueue+0x70>)
 8006d1e:	4a10      	ldr	r2, [pc, #64]	; (8006d60 <prvCheckForValidListAndQueue+0x68>)
 8006d20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d22:	2300      	movs	r3, #0
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <prvCheckForValidListAndQueue+0x74>)
 8006d28:	4a11      	ldr	r2, [pc, #68]	; (8006d70 <prvCheckForValidListAndQueue+0x78>)
 8006d2a:	210c      	movs	r1, #12
 8006d2c:	200a      	movs	r0, #10
 8006d2e:	f7fe f847 	bl	8004dc0 <xQueueGenericCreateStatic>
 8006d32:	4603      	mov	r3, r0
 8006d34:	4a08      	ldr	r2, [pc, #32]	; (8006d58 <prvCheckForValidListAndQueue+0x60>)
 8006d36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d38:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <prvCheckForValidListAndQueue+0x60>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <prvCheckForValidListAndQueue+0x60>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	490b      	ldr	r1, [pc, #44]	; (8006d74 <prvCheckForValidListAndQueue+0x7c>)
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fc94 	bl	8005674 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d4c:	f000 f936 	bl	8006fbc <vPortExitCritical>
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000b30 	.word	0x20000b30
 8006d5c:	20000b00 	.word	0x20000b00
 8006d60:	20000b14 	.word	0x20000b14
 8006d64:	20000b28 	.word	0x20000b28
 8006d68:	20000b2c 	.word	0x20000b2c
 8006d6c:	20000bb4 	.word	0x20000bb4
 8006d70:	20000b3c 	.word	0x20000b3c
 8006d74:	0800769c 	.word	0x0800769c

08006d78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3b04      	subs	r3, #4
 8006d88:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3b04      	subs	r3, #4
 8006d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f023 0201 	bic.w	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3b04      	subs	r3, #4
 8006da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006da8:	4a08      	ldr	r2, [pc, #32]	; (8006dcc <pxPortInitialiseStack+0x54>)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3b14      	subs	r3, #20
 8006db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3b20      	subs	r3, #32
 8006dbe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr
 8006dcc:	08006dd1 	.word	0x08006dd1

08006dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dda:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <prvTaskExitError+0x54>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de2:	d00a      	beq.n	8006dfa <prvTaskExitError+0x2a>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	60fb      	str	r3, [r7, #12]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <prvTaskExitError+0x28>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60bb      	str	r3, [r7, #8]
}
 8006e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e0e:	bf00      	nop
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0fc      	beq.n	8006e10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000078 	.word	0x20000078
	...

08006e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e30:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <pxCurrentTCBConst2>)
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	6808      	ldr	r0, [r1, #0]
 8006e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e3a:	f380 8809 	msr	PSP, r0
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f04f 0000 	mov.w	r0, #0
 8006e46:	f380 8811 	msr	BASEPRI, r0
 8006e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006e4e:	4770      	bx	lr

08006e50 <pxCurrentTCBConst2>:
 8006e50:	200009d4 	.word	0x200009d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop

08006e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006e58:	4806      	ldr	r0, [pc, #24]	; (8006e74 <prvPortStartFirstTask+0x1c>)
 8006e5a:	6800      	ldr	r0, [r0, #0]
 8006e5c:	6800      	ldr	r0, [r0, #0]
 8006e5e:	f380 8808 	msr	MSP, r0
 8006e62:	b662      	cpsie	i
 8006e64:	b661      	cpsie	f
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	df00      	svc	0
 8006e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e72:	bf00      	nop
 8006e74:	e000ed08 	.word	0xe000ed08

08006e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e7e:	4b32      	ldr	r3, [pc, #200]	; (8006f48 <xPortStartScheduler+0xd0>)
 8006e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	4b2a      	ldr	r3, [pc, #168]	; (8006f4c <xPortStartScheduler+0xd4>)
 8006ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ea6:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006ea8:	2207      	movs	r2, #7
 8006eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eac:	e009      	b.n	8006ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006eae:	4b28      	ldr	r3, [pc, #160]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	4a26      	ldr	r2, [pc, #152]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ec2:	78fb      	ldrb	r3, [r7, #3]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d0ef      	beq.n	8006eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ece:	4b20      	ldr	r3, [pc, #128]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f1c3 0307 	rsb	r3, r3, #7
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d00a      	beq.n	8006ef0 <xPortStartScheduler+0x78>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	60bb      	str	r3, [r7, #8]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ef0:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	4a16      	ldr	r2, [pc, #88]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006ef8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006efa:	4b15      	ldr	r3, [pc, #84]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f02:	4a13      	ldr	r2, [pc, #76]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006f04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f0e:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <xPortStartScheduler+0xdc>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a10      	ldr	r2, [pc, #64]	; (8006f54 <xPortStartScheduler+0xdc>)
 8006f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f1a:	4b0e      	ldr	r3, [pc, #56]	; (8006f54 <xPortStartScheduler+0xdc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a0d      	ldr	r2, [pc, #52]	; (8006f54 <xPortStartScheduler+0xdc>)
 8006f20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f26:	f000 f8b9 	bl	800709c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <xPortStartScheduler+0xe0>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f30:	f7ff ff92 	bl	8006e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f34:	f7ff f824 	bl	8005f80 <vTaskSwitchContext>
	prvTaskExitError();
 8006f38:	f7ff ff4a 	bl	8006dd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	e000e400 	.word	0xe000e400
 8006f4c:	20000bfc 	.word	0x20000bfc
 8006f50:	20000c00 	.word	0x20000c00
 8006f54:	e000ed20 	.word	0xe000ed20
 8006f58:	20000078 	.word	0x20000078

08006f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	607b      	str	r3, [r7, #4]
}
 8006f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <vPortEnterCritical+0x58>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	4a0d      	ldr	r2, [pc, #52]	; (8006fb4 <vPortEnterCritical+0x58>)
 8006f7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <vPortEnterCritical+0x58>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d10f      	bne.n	8006fa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f88:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <vPortEnterCritical+0x5c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	603b      	str	r3, [r7, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <vPortEnterCritical+0x4a>
	}
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000078 	.word	0x20000078
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <vPortExitCritical+0x4c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <vPortExitCritical+0x24>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	607b      	str	r3, [r7, #4]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fe0:	4b09      	ldr	r3, [pc, #36]	; (8007008 <vPortExitCritical+0x4c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	4a08      	ldr	r2, [pc, #32]	; (8007008 <vPortExitCritical+0x4c>)
 8006fe8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fea:	4b07      	ldr	r3, [pc, #28]	; (8007008 <vPortExitCritical+0x4c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d105      	bne.n	8006ffe <vPortExitCritical+0x42>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	f383 8811 	msr	BASEPRI, r3
}
 8006ffc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr
 8007008:	20000078 	.word	0x20000078
 800700c:	00000000 	.word	0x00000000

08007010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007010:	f3ef 8009 	mrs	r0, PSP
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <pxCurrentTCBConst>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007020:	6010      	str	r0, [r2, #0]
 8007022:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007026:	f04f 0050 	mov.w	r0, #80	; 0x50
 800702a:	f380 8811 	msr	BASEPRI, r0
 800702e:	f7fe ffa7 	bl	8005f80 <vTaskSwitchContext>
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f380 8811 	msr	BASEPRI, r0
 800703a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800703e:	6819      	ldr	r1, [r3, #0]
 8007040:	6808      	ldr	r0, [r1, #0]
 8007042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007046:	f380 8809 	msr	PSP, r0
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	4770      	bx	lr

08007050 <pxCurrentTCBConst>:
 8007050:	200009d4 	.word	0x200009d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop

08007058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	607b      	str	r3, [r7, #4]
}
 8007070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007072:	f7fe fec7 	bl	8005e04 <xTaskIncrementTick>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <xPortSysTickHandler+0x40>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	2300      	movs	r3, #0
 8007086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f383 8811 	msr	BASEPRI, r3
}
 800708e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <vPortSetupTimerInterrupt+0x30>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070a6:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <vPortSetupTimerInterrupt+0x34>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070ac:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <vPortSetupTimerInterrupt+0x38>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a09      	ldr	r2, [pc, #36]	; (80070d8 <vPortSetupTimerInterrupt+0x3c>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	099b      	lsrs	r3, r3, #6
 80070b8:	4a08      	ldr	r2, [pc, #32]	; (80070dc <vPortSetupTimerInterrupt+0x40>)
 80070ba:	3b01      	subs	r3, #1
 80070bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070be:	4b03      	ldr	r3, [pc, #12]	; (80070cc <vPortSetupTimerInterrupt+0x30>)
 80070c0:	2207      	movs	r2, #7
 80070c2:	601a      	str	r2, [r3, #0]
}
 80070c4:	bf00      	nop
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr
 80070cc:	e000e010 	.word	0xe000e010
 80070d0:	e000e018 	.word	0xe000e018
 80070d4:	2000006c 	.word	0x2000006c
 80070d8:	10624dd3 	.word	0x10624dd3
 80070dc:	e000e014 	.word	0xe000e014

080070e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070e6:	f3ef 8305 	mrs	r3, IPSR
 80070ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d914      	bls.n	800711c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070f2:	4a16      	ldr	r2, [pc, #88]	; (800714c <vPortValidateInterruptPriority+0x6c>)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070fc:	4b14      	ldr	r3, [pc, #80]	; (8007150 <vPortValidateInterruptPriority+0x70>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	7afa      	ldrb	r2, [r7, #11]
 8007102:	429a      	cmp	r2, r3
 8007104:	d20a      	bcs.n	800711c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	607b      	str	r3, [r7, #4]
}
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <vPortValidateInterruptPriority+0x74>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <vPortValidateInterruptPriority+0x78>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d90a      	bls.n	8007142 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	603b      	str	r3, [r7, #0]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <vPortValidateInterruptPriority+0x60>
	}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr
 800714c:	e000e3f0 	.word	0xe000e3f0
 8007150:	20000bfc 	.word	0x20000bfc
 8007154:	e000ed0c 	.word	0xe000ed0c
 8007158:	20000c00 	.word	0x20000c00

0800715c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08a      	sub	sp, #40	; 0x28
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007168:	f7fe fd94 	bl	8005c94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800716c:	4b58      	ldr	r3, [pc, #352]	; (80072d0 <pvPortMalloc+0x174>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007174:	f000 f910 	bl	8007398 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007178:	4b56      	ldr	r3, [pc, #344]	; (80072d4 <pvPortMalloc+0x178>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4013      	ands	r3, r2
 8007180:	2b00      	cmp	r3, #0
 8007182:	f040 808e 	bne.w	80072a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01d      	beq.n	80071c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800718c:	2208      	movs	r2, #8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4413      	add	r3, r2
 8007192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	2b00      	cmp	r3, #0
 800719c:	d014      	beq.n	80071c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f023 0307 	bic.w	r3, r3, #7
 80071a4:	3308      	adds	r3, #8
 80071a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <pvPortMalloc+0x6c>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	617b      	str	r3, [r7, #20]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d069      	beq.n	80072a2 <pvPortMalloc+0x146>
 80071ce:	4b42      	ldr	r3, [pc, #264]	; (80072d8 <pvPortMalloc+0x17c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d864      	bhi.n	80072a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071d8:	4b40      	ldr	r3, [pc, #256]	; (80072dc <pvPortMalloc+0x180>)
 80071da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071dc:	4b3f      	ldr	r3, [pc, #252]	; (80072dc <pvPortMalloc+0x180>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071e2:	e004      	b.n	80071ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d903      	bls.n	8007200 <pvPortMalloc+0xa4>
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1f1      	bne.n	80071e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007200:	4b33      	ldr	r3, [pc, #204]	; (80072d0 <pvPortMalloc+0x174>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007206:	429a      	cmp	r2, r3
 8007208:	d04b      	beq.n	80072a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2208      	movs	r2, #8
 8007210:	4413      	add	r3, r2
 8007212:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	1ad2      	subs	r2, r2, r3
 8007224:	2308      	movs	r3, #8
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	429a      	cmp	r2, r3
 800722a:	d91f      	bls.n	800726c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800722c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4413      	add	r3, r2
 8007232:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <pvPortMalloc+0xf8>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	613b      	str	r3, [r7, #16]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007266:	69b8      	ldr	r0, [r7, #24]
 8007268:	f000 f8f8 	bl	800745c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800726c:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <pvPortMalloc+0x17c>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <pvPortMalloc+0x17c>)
 8007278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800727a:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <pvPortMalloc+0x17c>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4b18      	ldr	r3, [pc, #96]	; (80072e0 <pvPortMalloc+0x184>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d203      	bcs.n	800728e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007286:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <pvPortMalloc+0x17c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <pvPortMalloc+0x184>)
 800728c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <pvPortMalloc+0x178>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	431a      	orrs	r2, r3
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072a2:	f7fe fd05 	bl	8005cb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <pvPortMalloc+0x16a>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	60fb      	str	r3, [r7, #12]
}
 80072c2:	bf00      	nop
 80072c4:	e7fe      	b.n	80072c4 <pvPortMalloc+0x168>
	return pvReturn;
 80072c6:	69fb      	ldr	r3, [r7, #28]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3728      	adds	r7, #40	; 0x28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	2000180c 	.word	0x2000180c
 80072d4:	20001818 	.word	0x20001818
 80072d8:	20001810 	.word	0x20001810
 80072dc:	20001804 	.word	0x20001804
 80072e0:	20001814 	.word	0x20001814

080072e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d048      	beq.n	8007388 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072f6:	2308      	movs	r3, #8
 80072f8:	425b      	negs	r3, r3
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4413      	add	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	4b21      	ldr	r3, [pc, #132]	; (8007390 <vPortFree+0xac>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4013      	ands	r3, r2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10a      	bne.n	8007328 <vPortFree+0x44>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	60fb      	str	r3, [r7, #12]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <vPortFree+0x62>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	60bb      	str	r3, [r7, #8]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	4b11      	ldr	r3, [pc, #68]	; (8007390 <vPortFree+0xac>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4013      	ands	r3, r2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d019      	beq.n	8007388 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d115      	bne.n	8007388 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <vPortFree+0xac>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	43db      	mvns	r3, r3
 8007366:	401a      	ands	r2, r3
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800736c:	f7fe fc92 	bl	8005c94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	4b07      	ldr	r3, [pc, #28]	; (8007394 <vPortFree+0xb0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4413      	add	r3, r2
 800737a:	4a06      	ldr	r2, [pc, #24]	; (8007394 <vPortFree+0xb0>)
 800737c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800737e:	6938      	ldr	r0, [r7, #16]
 8007380:	f000 f86c 	bl	800745c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007384:	f7fe fc94 	bl	8005cb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007388:	bf00      	nop
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20001818 	.word	0x20001818
 8007394:	20001810 	.word	0x20001810

08007398 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800739e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073a4:	4b27      	ldr	r3, [pc, #156]	; (8007444 <prvHeapInit+0xac>)
 80073a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00c      	beq.n	80073cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3307      	adds	r3, #7
 80073b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0307 	bic.w	r3, r3, #7
 80073be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	4a1f      	ldr	r2, [pc, #124]	; (8007444 <prvHeapInit+0xac>)
 80073c8:	4413      	add	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073d0:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <prvHeapInit+0xb0>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073d6:	4b1c      	ldr	r3, [pc, #112]	; (8007448 <prvHeapInit+0xb0>)
 80073d8:	2200      	movs	r2, #0
 80073da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	4413      	add	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073e4:	2208      	movs	r2, #8
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0307 	bic.w	r3, r3, #7
 80073f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4a15      	ldr	r2, [pc, #84]	; (800744c <prvHeapInit+0xb4>)
 80073f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073fa:	4b14      	ldr	r3, [pc, #80]	; (800744c <prvHeapInit+0xb4>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <prvHeapInit+0xb4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	1ad2      	subs	r2, r2, r3
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <prvHeapInit+0xb4>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	4a0a      	ldr	r2, [pc, #40]	; (8007450 <prvHeapInit+0xb8>)
 8007426:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4a09      	ldr	r2, [pc, #36]	; (8007454 <prvHeapInit+0xbc>)
 800742e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007430:	4b09      	ldr	r3, [pc, #36]	; (8007458 <prvHeapInit+0xc0>)
 8007432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007436:	601a      	str	r2, [r3, #0]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000c04 	.word	0x20000c04
 8007448:	20001804 	.word	0x20001804
 800744c:	2000180c 	.word	0x2000180c
 8007450:	20001814 	.word	0x20001814
 8007454:	20001810 	.word	0x20001810
 8007458:	20001818 	.word	0x20001818

0800745c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007464:	4b27      	ldr	r3, [pc, #156]	; (8007504 <prvInsertBlockIntoFreeList+0xa8>)
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	e002      	b.n	8007470 <prvInsertBlockIntoFreeList+0x14>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	429a      	cmp	r2, r3
 8007478:	d8f7      	bhi.n	800746a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	4413      	add	r3, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	429a      	cmp	r2, r3
 800748a:	d108      	bne.n	800749e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	441a      	add	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	441a      	add	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d118      	bne.n	80074e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	4b14      	ldr	r3, [pc, #80]	; (8007508 <prvInsertBlockIntoFreeList+0xac>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d00d      	beq.n	80074da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	441a      	add	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e008      	b.n	80074ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074da:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <prvInsertBlockIntoFreeList+0xac>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e003      	b.n	80074ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d002      	beq.n	80074fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr
 8007504:	20001804 	.word	0x20001804
 8007508:	2000180c 	.word	0x2000180c

0800750c <memset>:
 800750c:	4603      	mov	r3, r0
 800750e:	4402      	add	r2, r0
 8007510:	4293      	cmp	r3, r2
 8007512:	d100      	bne.n	8007516 <memset+0xa>
 8007514:	4770      	bx	lr
 8007516:	f803 1b01 	strb.w	r1, [r3], #1
 800751a:	e7f9      	b.n	8007510 <memset+0x4>

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	2600      	movs	r6, #0
 8007520:	4d0c      	ldr	r5, [pc, #48]	; (8007554 <__libc_init_array+0x38>)
 8007522:	4c0d      	ldr	r4, [pc, #52]	; (8007558 <__libc_init_array+0x3c>)
 8007524:	1b64      	subs	r4, r4, r5
 8007526:	10a4      	asrs	r4, r4, #2
 8007528:	42a6      	cmp	r6, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	f000 f828 	bl	8007580 <_init>
 8007530:	2600      	movs	r6, #0
 8007532:	4d0a      	ldr	r5, [pc, #40]	; (800755c <__libc_init_array+0x40>)
 8007534:	4c0a      	ldr	r4, [pc, #40]	; (8007560 <__libc_init_array+0x44>)
 8007536:	1b64      	subs	r4, r4, r5
 8007538:	10a4      	asrs	r4, r4, #2
 800753a:	42a6      	cmp	r6, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f855 3b04 	ldr.w	r3, [r5], #4
 8007544:	4798      	blx	r3
 8007546:	3601      	adds	r6, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f855 3b04 	ldr.w	r3, [r5], #4
 800754e:	4798      	blx	r3
 8007550:	3601      	adds	r6, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	080076d0 	.word	0x080076d0
 8007558:	080076d0 	.word	0x080076d0
 800755c:	080076d0 	.word	0x080076d0
 8007560:	080076d4 	.word	0x080076d4

08007564 <memcpy>:
 8007564:	440a      	add	r2, r1
 8007566:	4291      	cmp	r1, r2
 8007568:	f100 33ff 	add.w	r3, r0, #4294967295
 800756c:	d100      	bne.n	8007570 <memcpy+0xc>
 800756e:	4770      	bx	lr
 8007570:	b510      	push	{r4, lr}
 8007572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007576:	4291      	cmp	r1, r2
 8007578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800757c:	d1f9      	bne.n	8007572 <memcpy+0xe>
 800757e:	bd10      	pop	{r4, pc}

08007580 <_init>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr

0800758c <_fini>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr
