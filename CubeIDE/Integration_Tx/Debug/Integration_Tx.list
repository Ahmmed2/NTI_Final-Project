
Integration_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004908  08004908  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004908  08004908  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004908  08004908  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000001c  0800492c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  0800492c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed09  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002323  00000000  00000000  0002ed91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  000310b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba7  00000000  00000000  00031fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001827d  00000000  00000000  00032b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d9d  00000000  00000000  0004adc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdf2  00000000  00000000  0005bb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e2c  00000000  00000000  000e7954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000eb780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080048b4 	.word	0x080048b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080048b4 	.word	0x080048b4

0800014c <HAL_voidControlMotors>:
#include "HAL/dc_motor.h"

extern TIM_HandleTypeDef htim1;

void HAL_voidControlMotors(uint8_t Copy_u8Speed, uint8_t Copy_u8direction)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
  if (Copy_u8direction == STOP)
 800015c:	79bb      	ldrb	r3, [r7, #6]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d114      	bne.n	800018c <HAL_voidControlMotors+0x40>
  {
		/*stop the 4 motors to stop the car*/
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000162:	2200      	movs	r2, #0
 8000164:	2101      	movs	r1, #1
 8000166:	484b      	ldr	r0, [pc, #300]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000168:	f001 fc44 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	2102      	movs	r1, #2
 8000170:	4848      	ldr	r0, [pc, #288]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000172:	f001 fc3f 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8000176:	2200      	movs	r2, #0
 8000178:	2104      	movs	r1, #4
 800017a:	4846      	ldr	r0, [pc, #280]	; (8000294 <HAL_voidControlMotors+0x148>)
 800017c:	f001 fc3a 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2108      	movs	r1, #8
 8000184:	4843      	ldr	r0, [pc, #268]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000186:	f001 fc35 	bl	80019f4 <HAL_GPIO_WritePin>
 800018a:	e05e      	b.n	800024a <HAL_voidControlMotors+0xfe>
  }
  else if (Copy_u8direction == BACKWARD)
 800018c:	79bb      	ldrb	r3, [r7, #6]
 800018e:	2b02      	cmp	r3, #2
 8000190:	d114      	bne.n	80001bc <HAL_voidControlMotors+0x70>
  {
		/*move the  motors in the backward direction to move the car backward*/
	    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_SET);
 8000192:	2201      	movs	r2, #1
 8000194:	2101      	movs	r1, #1
 8000196:	483f      	ldr	r0, [pc, #252]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000198:	f001 fc2c 	bl	80019f4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2102      	movs	r1, #2
 80001a0:	483c      	ldr	r0, [pc, #240]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001a2:	f001 fc27 	bl	80019f4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2104      	movs	r1, #4
 80001aa:	483a      	ldr	r0, [pc, #232]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001ac:	f001 fc22 	bl	80019f4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2108      	movs	r1, #8
 80001b4:	4837      	ldr	r0, [pc, #220]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001b6:	f001 fc1d 	bl	80019f4 <HAL_GPIO_WritePin>
 80001ba:	e046      	b.n	800024a <HAL_voidControlMotors+0xfe>
  }
  else if (Copy_u8direction == FORWARD)
 80001bc:	79bb      	ldrb	r3, [r7, #6]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d114      	bne.n	80001ec <HAL_voidControlMotors+0xa0>
  {
		/*move the  motors in the forward direction to move the car forward*/
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2101      	movs	r1, #1
 80001c6:	4833      	ldr	r0, [pc, #204]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001c8:	f001 fc14 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2102      	movs	r1, #2
 80001d0:	4830      	ldr	r0, [pc, #192]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001d2:	f001 fc0f 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2104      	movs	r1, #4
 80001da:	482e      	ldr	r0, [pc, #184]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001dc:	f001 fc0a 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2108      	movs	r1, #8
 80001e4:	482b      	ldr	r0, [pc, #172]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001e6:	f001 fc05 	bl	80019f4 <HAL_GPIO_WritePin>
 80001ea:	e02e      	b.n	800024a <HAL_voidControlMotors+0xfe>
  }
  else if (Copy_u8direction == RIGHT)
 80001ec:	79bb      	ldrb	r3, [r7, #6]
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	d114      	bne.n	800021c <HAL_voidControlMotors+0xd0>
  {
		/*move the left motors in the forward direction and stop the right motors to make the car turn right*/
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2101      	movs	r1, #1
 80001f6:	4827      	ldr	r0, [pc, #156]	; (8000294 <HAL_voidControlMotors+0x148>)
 80001f8:	f001 fbfc 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2102      	movs	r1, #2
 8000200:	4824      	ldr	r0, [pc, #144]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000202:	f001 fbf7 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2104      	movs	r1, #4
 800020a:	4822      	ldr	r0, [pc, #136]	; (8000294 <HAL_voidControlMotors+0x148>)
 800020c:	f001 fbf2 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2108      	movs	r1, #8
 8000214:	481f      	ldr	r0, [pc, #124]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000216:	f001 fbed 	bl	80019f4 <HAL_GPIO_WritePin>
 800021a:	e016      	b.n	800024a <HAL_voidControlMotors+0xfe>
  }
  else if (Copy_u8direction == LEFT)
 800021c:	79bb      	ldrb	r3, [r7, #6]
 800021e:	2b04      	cmp	r3, #4
 8000220:	d113      	bne.n	800024a <HAL_voidControlMotors+0xfe>
  {		/*move the right motors in the forward direction and stop the left motors to make the car turn left*/
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2101      	movs	r1, #1
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000228:	f001 fbe4 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	2102      	movs	r1, #2
 8000230:	4818      	ldr	r0, [pc, #96]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000232:	f001 fbdf 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2104      	movs	r1, #4
 800023a:	4816      	ldr	r0, [pc, #88]	; (8000294 <HAL_voidControlMotors+0x148>)
 800023c:	f001 fbda 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_DRIVER_PORT, MOTOR2_IN4_PIN, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	2108      	movs	r1, #8
 8000244:	4813      	ldr	r0, [pc, #76]	; (8000294 <HAL_voidControlMotors+0x148>)
 8000246:	f001 fbd5 	bl	80019f4 <HAL_GPIO_WritePin>
  }

  // Set the PWM duty cycle for both motors' speed control
  // Calculate duty cycle based on the desired speed
  uint64_t dutyCycle = ((100 - Copy_u8Speed) * htim1.Init.Period) / 100;
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000250:	461a      	mov	r2, r3
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <HAL_voidControlMotors+0x14c>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	fb02 f303 	mul.w	r3, r2, r3
 800025a:	4a10      	ldr	r2, [pc, #64]	; (800029c <HAL_voidControlMotors+0x150>)
 800025c:	fba2 2303 	umull	r2, r3, r2, r3
 8000260:	095b      	lsrs	r3, r3, #5
 8000262:	2200      	movs	r2, #0
 8000264:	461c      	mov	r4, r3
 8000266:	4615      	mov	r5, r2
 8000268:	e9c7 4502 	strd	r4, r5, [r7, #8]

  // Set the duty cycle for TIM_CHANNEL_1 (Motor 1)
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <HAL_voidControlMotors+0x14c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	68ba      	ldr	r2, [r7, #8]
 8000272:	635a      	str	r2, [r3, #52]	; 0x34
  // Start the PWM generation for Motor 1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000274:	2100      	movs	r1, #0
 8000276:	4808      	ldr	r0, [pc, #32]	; (8000298 <HAL_voidControlMotors+0x14c>)
 8000278:	f002 ffae 	bl	80031d8 <HAL_TIM_PWM_Start>

  // Set the duty cycle for TIM_CHANNEL_2 (Motor 2)
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, dutyCycle);
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <HAL_voidControlMotors+0x14c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	68ba      	ldr	r2, [r7, #8]
 8000282:	639a      	str	r2, [r3, #56]	; 0x38
  // Start the PWM generation for Motor 2
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000284:	2104      	movs	r1, #4
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <HAL_voidControlMotors+0x14c>)
 8000288:	f002 ffa6 	bl	80031d8 <HAL_TIM_PWM_Start>
}
 800028c:	bf00      	nop
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bdb0      	pop	{r4, r5, r7, pc}
 8000294:	40010800 	.word	0x40010800
 8000298:	2000009c 	.word	0x2000009c
 800029c:	51eb851f 	.word	0x51eb851f

080002a0 <NRF_ChipSelect>:
uint8_t Send_Data[10] ;

extern UART_HandleTypeDef huart1;

void NRF_ChipSelect (void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_RESET) ;
 80002a4:	2200      	movs	r2, #0
 80002a6:	2104      	movs	r1, #4
 80002a8:	4802      	ldr	r0, [pc, #8]	; (80002b4 <NRF_ChipSelect+0x14>)
 80002aa:	f001 fba3 	bl	80019f4 <HAL_GPIO_WritePin>
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40010800 	.word	0x40010800

080002b8 <NRF_ChipUnSelect>:

void NRF_ChipUnSelect (void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_SET) ;
 80002bc:	2201      	movs	r2, #1
 80002be:	2104      	movs	r1, #4
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <NRF_ChipUnSelect+0x14>)
 80002c2:	f001 fb97 	bl	80019f4 <HAL_GPIO_WritePin>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010800 	.word	0x40010800

080002d0 <NRF_ChipEnable>:


void NRF_ChipEnable (void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET) ;
 80002d4:	2201      	movs	r2, #1
 80002d6:	2102      	movs	r1, #2
 80002d8:	4802      	ldr	r0, [pc, #8]	; (80002e4 <NRF_ChipEnable+0x14>)
 80002da:	f001 fb8b 	bl	80019f4 <HAL_GPIO_WritePin>
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010800 	.word	0x40010800

080002e8 <NRF_ChipDisable>:

void NRF_ChipDisable (void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET) ;
 80002ec:	2200      	movs	r2, #0
 80002ee:	2102      	movs	r1, #2
 80002f0:	4802      	ldr	r0, [pc, #8]	; (80002fc <NRF_ChipDisable+0x14>)
 80002f2:	f001 fb7f 	bl	80019f4 <HAL_GPIO_WritePin>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010800 	.word	0x40010800

08000300 <NRF_voidWriteByteReg>:
 * Return : None
 * note :
 *
 */
void NRF_voidWriteByteReg(uint8_t Copy_u8Reg , uint8_t Copy_u8RegData)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	460a      	mov	r2, r1
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	4613      	mov	r3, r2
 800030e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[2] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	b2db      	uxtb	r3, r3
 8000318:	733b      	strb	r3, [r7, #12]

	/* Data to be written */
	Local_Buffer[1] =  Copy_u8RegData ;
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	737b      	strb	r3, [r7, #13]

	/* Chip Select */
	NRF_ChipSelect() ;
 800031e:	f7ff ffbf 	bl	80002a0 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, Local_Buffer,2,1000) ;
 8000322:	f107 010c 	add.w	r1, r7, #12
 8000326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032a:	2202      	movs	r2, #2
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <NRF_voidWriteByteReg+0x40>)
 800032e:	f002 f80d 	bl	800234c <HAL_SPI_Transmit>

	/* Release"Unselect"  device */
	NRF_ChipUnSelect () ;
 8000332:	f7ff ffc1 	bl	80002b8 <NRF_ChipUnSelect>
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000044 	.word	0x20000044

08000344 <NRF_voidWriteMultiByteReg>:
 * note :
 *
 */

void NRF_voidWriteMultiByteReg(uint8_t Copy_u8Reg , uint8_t *Data , uint8_t Copy_u8Size)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	71fb      	strb	r3, [r7, #7]
 8000350:	4613      	mov	r3, r2
 8000352:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[1] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	b2db      	uxtb	r3, r3
 800035c:	733b      	strb	r3, [r7, #12]

	/* Chip Select */
	NRF_ChipSelect() ;
 800035e:	f7ff ff9f 	bl	80002a0 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1,Local_Buffer,1,100) ;
 8000362:	f107 010c 	add.w	r1, r7, #12
 8000366:	2364      	movs	r3, #100	; 0x64
 8000368:	2201      	movs	r2, #1
 800036a:	4808      	ldr	r0, [pc, #32]	; (800038c <NRF_voidWriteMultiByteReg+0x48>)
 800036c:	f001 ffee 	bl	800234c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF_SPI1,Data,Copy_u8Size,1000) ;
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	b29a      	uxth	r2, r3
 8000374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000378:	6839      	ldr	r1, [r7, #0]
 800037a:	4804      	ldr	r0, [pc, #16]	; (800038c <NRF_voidWriteMultiByteReg+0x48>)
 800037c:	f001 ffe6 	bl	800234c <HAL_SPI_Transmit>

	/* Release"Unselect"device */
	NRF_ChipUnSelect () ;
 8000380:	f7ff ff9a 	bl	80002b8 <NRF_ChipUnSelect>
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000044 	.word	0x20000044

08000390 <NRF_u8ReadByteReg>:
 * Return : Register Value
 * note :
 *
 */
uint8_t NRF_u8ReadByteReg(uint8_t Copy_u8Reg)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_Data = 0 ;
 800039a:	2300      	movs	r3, #0
 800039c:	73fb      	strb	r3, [r7, #15]

	/* Chip Select */
	NRF_ChipSelect() ;
 800039e:	f7ff ff7f 	bl	80002a0 <NRF_ChipSelect>

	/* Receive Data */
	HAL_SPI_Transmit(NRF_SPI1,&Copy_u8Reg,1,100 ) ;
 80003a2:	1df9      	adds	r1, r7, #7
 80003a4:	2364      	movs	r3, #100	; 0x64
 80003a6:	2201      	movs	r2, #1
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <NRF_u8ReadByteReg+0x48>)
 80003aa:	f001 ffcf 	bl	800234c <HAL_SPI_Transmit>
	HAL_Delay(100) ;
 80003ae:	2064      	movs	r0, #100	; 0x64
 80003b0:	f000 ffb8 	bl	8001324 <HAL_Delay>
	HAL_SPI_Receive(NRF_SPI1,&Local_Data,1,1000) ;
 80003b4:	f107 010f 	add.w	r1, r7, #15
 80003b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003bc:	2201      	movs	r2, #1
 80003be:	4806      	ldr	r0, [pc, #24]	; (80003d8 <NRF_u8ReadByteReg+0x48>)
 80003c0:	f002 f907 	bl	80025d2 <HAL_SPI_Receive>
	HAL_Delay(100) ;
 80003c4:	2064      	movs	r0, #100	; 0x64
 80003c6:	f000 ffad 	bl	8001324 <HAL_Delay>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 80003ca:	f7ff ff75 	bl	80002b8 <NRF_ChipUnSelect>

	return Local_Data ;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000044 	.word	0x20000044

080003dc <NRF_voidCommandSet>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidCommandSet (uint8_t Copy_u8Command )
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	/* Chip Select */
	NRF_ChipSelect() ;
 80003e6:	f7ff ff5b 	bl	80002a0 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, &Copy_u8Command, 1 ,100) ;
 80003ea:	1df9      	adds	r1, r7, #7
 80003ec:	2364      	movs	r3, #100	; 0x64
 80003ee:	2201      	movs	r2, #1
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <NRF_voidCommandSet+0x28>)
 80003f2:	f001 ffab 	bl	800234c <HAL_SPI_Transmit>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 80003f6:	f7ff ff5f 	bl	80002b8 <NRF_ChipUnSelect>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000044 	.word	0x20000044

08000408 <NRF_voidInit>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidInit ()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	/* Disable Chip */
	NRF_ChipDisable () ;
 800040c:	f7ff ff6c 	bl	80002e8 <NRF_ChipDisable>

	/* Reset All Registers */
	//NRF_voidResetNRF(0X00) ;

	/* Config Init */
	NRF_voidWriteByteReg(CONFIG,0x00) ;
 8000410:	2100      	movs	r1, #0
 8000412:	2000      	movs	r0, #0
 8000414:	f7ff ff74 	bl	8000300 <NRF_voidWriteByteReg>

	/* EN_AA Init "NO ACK is Used" */
	NRF_voidWriteByteReg(EN_AA,0x00) ;
 8000418:	2100      	movs	r1, #0
 800041a:	2001      	movs	r0, #1
 800041c:	f7ff ff70 	bl	8000300 <NRF_voidWriteByteReg>

	/* EN_RXADDR Init "Disable Data pipes for now"  */
	NRF_voidWriteByteReg(EN_RXADDR,0x00) ;
 8000420:	2100      	movs	r1, #0
 8000422:	2002      	movs	r0, #2
 8000424:	f7ff ff6c 	bl	8000300 <NRF_voidWriteByteReg>

	/* SETUP_AW Init "Width of data pipe Addresses" */
	NRF_voidWriteByteReg(SETUP_AW,0x03) ;	  	  //5 Byte Address Width
 8000428:	2103      	movs	r1, #3
 800042a:	2003      	movs	r0, #3
 800042c:	f7ff ff68 	bl	8000300 <NRF_voidWriteByteReg>

	/* SETUP_RETR Init "Auto Transmit time " */
	NRF_voidWriteByteReg(SETUP_RETR,0x00) ;	  //Disable Auto Transmit
 8000430:	2100      	movs	r1, #0
 8000432:	2004      	movs	r0, #4
 8000434:	f7ff ff64 	bl	8000300 <NRF_voidWriteByteReg>

	/* RF_CH Init "Channel Number" */
	NRF_voidWriteByteReg(RF_CH,0x00) ;	  	  //Disable for now will be configured later
 8000438:	2100      	movs	r1, #0
 800043a:	2005      	movs	r0, #5
 800043c:	f7ff ff60 	bl	8000300 <NRF_voidWriteByteReg>

	/* RF_SETUP Init "BaudRate , Power" */
	NRF_voidWriteByteReg(RF_SETUP,0x0E) ;	   	   //0dBM, 2Mbps
 8000440:	210e      	movs	r1, #14
 8000442:	2006      	movs	r0, #6
 8000444:	f7ff ff5c 	bl	8000300 <NRF_voidWriteByteReg>

	/* Enable Chip */
	NRF_ChipEnable () ;
 8000448:	f7ff ff42 	bl	80002d0 <NRF_ChipEnable>


}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}

08000450 <NRF_voidTransmitterMode>:
 * note :
 *
 */

void NRF_voidTransmitterMode (uint8_t * Address ,uint8_t Copy_u8Channel_Number )
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	/* Disable Chip */
	NRF_ChipDisable () ;
 800045c:	f7ff ff44 	bl	80002e8 <NRF_ChipDisable>

	/* Select Channel */
	NRF_voidWriteByteReg(RF_CH,Copy_u8Channel_Number) ;
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	4619      	mov	r1, r3
 8000464:	2005      	movs	r0, #5
 8000466:	f7ff ff4b 	bl	8000300 <NRF_voidWriteByteReg>

	/* Transmit Address */
	NRF_voidWriteMultiByteReg(TX_ADDR,Address,5) ;
 800046a:	2205      	movs	r2, #5
 800046c:	6879      	ldr	r1, [r7, #4]
 800046e:	2010      	movs	r0, #16
 8000470:	f7ff ff68 	bl	8000344 <NRF_voidWriteMultiByteReg>

	/* Power up Device and select the device as TX */
	uint8_t Temp ;
	Temp = NRF_u8ReadByteReg(CONFIG);
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff8b 	bl	8000390 <NRF_u8ReadByteReg>
 800047a:	4603      	mov	r3, r0
 800047c:	73fb      	strb	r3, [r7, #15]
	Temp = Temp | (1<<1) | (0<<0) ;   // 0b0000 0010
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	f043 0302 	orr.w	r3, r3, #2
 8000484:	73fb      	strb	r3, [r7, #15]
	NRF_voidWriteByteReg(CONFIG,0x02) ;
 8000486:	2102      	movs	r1, #2
 8000488:	2000      	movs	r0, #0
 800048a:	f7ff ff39 	bl	8000300 <NRF_voidWriteByteReg>
	HAL_Delay(100) ;
 800048e:	2064      	movs	r0, #100	; 0x64
 8000490:	f000 ff48 	bl	8001324 <HAL_Delay>

	/* Enable Chip */
	NRF_ChipEnable () ;
 8000494:	f7ff ff1c 	bl	80002d0 <NRF_ChipEnable>


}
 8000498:	bf00      	nop
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <NRF_voidSendData>:
 * note :
 *
 */

void NRF_voidSendData (uint8_t * Data , uint8_t Copy_u8SizeinByte ,uint8_t Copy_u8CharFlag  )
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	70fb      	strb	r3, [r7, #3]
 80004ac:	4613      	mov	r3, r2
 80004ae:	70bb      	strb	r3, [r7, #2]
	/* Counter of For Loop */
	uint8_t Local_Counter = 0 ;
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]
	/* Array Index */
	uint8_t Local_ArrayIndex = 0 ;
 80004b4:	2300      	movs	r3, #0
 80004b6:	73bb      	strb	r3, [r7, #14]

	/* Chip Select  */
	NRF_ChipSelect() ;
 80004b8:	f7ff fef2 	bl	80002a0 <NRF_ChipSelect>

   uint8_t Temp = W_TX_PAYLOAD ;
 80004bc:	23a0      	movs	r3, #160	; 0xa0
 80004be:	733b      	strb	r3, [r7, #12]

   /* Get the Receiver ready , Next Pay-Load is Data */
   HAL_SPI_Transmit(NRF_SPI1, &Temp, 1 , 100) ;
 80004c0:	f107 010c 	add.w	r1, r7, #12
 80004c4:	2364      	movs	r3, #100	; 0x64
 80004c6:	2201      	movs	r2, #1
 80004c8:	482d      	ldr	r0, [pc, #180]	; (8000580 <NRF_voidSendData+0xe0>)
 80004ca:	f001 ff3f 	bl	800234c <HAL_SPI_Transmit>

   /* Always First Byte is Character */
   Send_Data[0] = Data[0] ;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <NRF_voidSendData+0xe4>)
 80004d4:	701a      	strb	r2, [r3, #0]
   Local_ArrayIndex ++ ;
 80004d6:	7bbb      	ldrb	r3, [r7, #14]
 80004d8:	3301      	adds	r3, #1
 80004da:	73bb      	strb	r3, [r7, #14]

   if (Copy_u8CharFlag == NRF_NUMBERS_EXIST )
 80004dc:	78bb      	ldrb	r3, [r7, #2]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d115      	bne.n	800050e <NRF_voidSendData+0x6e>
   {
	   /* Number(s) */
	   for (Local_Counter = 1 ; Local_Counter < Copy_u8SizeinByte ; Local_Counter++ )
 80004e2:	2301      	movs	r3, #1
 80004e4:	73fb      	strb	r3, [r7, #15]
 80004e6:	e00e      	b.n	8000506 <NRF_voidSendData+0x66>
	   {
		   Local_ArrayIndex= HAL_NRF_Send_Number(Data[Local_Counter] ,Local_Counter ) ;
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	4619      	mov	r1, r3
 80004f6:	4610      	mov	r0, r2
 80004f8:	f000 f846 	bl	8000588 <HAL_NRF_Send_Number>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73bb      	strb	r3, [r7, #14]
	   for (Local_Counter = 1 ; Local_Counter < Copy_u8SizeinByte ; Local_Counter++ )
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	3301      	adds	r3, #1
 8000504:	73fb      	strb	r3, [r7, #15]
 8000506:	7bfa      	ldrb	r2, [r7, #15]
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	429a      	cmp	r2, r3
 800050c:	d3ec      	bcc.n	80004e8 <NRF_voidSendData+0x48>
	   }

   }

   /* Last Element is + */
   Send_Data[Local_ArrayIndex] = '+' ;
 800050e:	7bbb      	ldrb	r3, [r7, #14]
 8000510:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <NRF_voidSendData+0xe4>)
 8000512:	212b      	movs	r1, #43	; 0x2b
 8000514:	54d1      	strb	r1, [r2, r3]

   /* Send Pay-Load "Data" */
   HAL_SPI_Transmit(NRF_SPI1, Send_Data, (Local_ArrayIndex+1) , 10000) ;
 8000516:	7bbb      	ldrb	r3, [r7, #14]
 8000518:	b29b      	uxth	r3, r3
 800051a:	3301      	adds	r3, #1
 800051c:	b29a      	uxth	r2, r3
 800051e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000522:	4918      	ldr	r1, [pc, #96]	; (8000584 <NRF_voidSendData+0xe4>)
 8000524:	4816      	ldr	r0, [pc, #88]	; (8000580 <NRF_voidSendData+0xe0>)
 8000526:	f001 ff11 	bl	800234c <HAL_SPI_Transmit>

	/* Chip UnSelect  */
	NRF_ChipUnSelect() ;
 800052a:	f7ff fec5 	bl	80002b8 <NRF_ChipUnSelect>

	/* Delay */
	HAL_Delay(1) ;
 800052e:	2001      	movs	r0, #1
 8000530:	f000 fef8 	bl	8001324 <HAL_Delay>

	/* Check if TX Buffer is empty or not */
	uint8_t Local_FIFOStatus ;
	Local_FIFOStatus = NRF_u8ReadByteReg(FIFO_STATUS) ;
 8000534:	2017      	movs	r0, #23
 8000536:	f7ff ff2b 	bl	8000390 <NRF_u8ReadByteReg>
 800053a:	4603      	mov	r3, r0
 800053c:	737b      	strb	r3, [r7, #13]



	// 4 --> TX_EMPTY(1)
	if ((Local_FIFOStatus & (1<<4)))
 800053e:	7b7b      	ldrb	r3, [r7, #13]
 8000540:	f003 0310 	and.w	r3, r3, #16
 8000544:	2b00      	cmp	r3, #0
 8000546:	d008      	beq.n	800055a <NRF_voidSendData+0xba>
	{
		/* Put Any-Condition To Check */

		Temp = FLUSH_TX ;
 8000548:	23e1      	movs	r3, #225	; 0xe1
 800054a:	733b      	strb	r3, [r7, #12]
		/* Flush TX */
		NRF_voidCommandSet(Temp);
 800054c:	7b3b      	ldrb	r3, [r7, #12]
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff44 	bl	80003dc <NRF_voidCommandSet>

		// Reset FIFO_STATUS
		NRF_voidResetNRF(FIFO_STATUS) ;
 8000554:	2017      	movs	r0, #23
 8000556:	f000 f86b 	bl	8000630 <NRF_voidResetNRF>

	}

	/* Reinitialize the array with Zeros */
   for (Local_Counter = 0 ; Local_Counter<10 ; Local_Counter++ )
 800055a:	2300      	movs	r3, #0
 800055c:	73fb      	strb	r3, [r7, #15]
 800055e:	e006      	b.n	800056e <NRF_voidSendData+0xce>
   {
	   Send_Data[Local_Counter] = 0 ;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <NRF_voidSendData+0xe4>)
 8000564:	2100      	movs	r1, #0
 8000566:	54d1      	strb	r1, [r2, r3]
   for (Local_Counter = 0 ; Local_Counter<10 ; Local_Counter++ )
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	3301      	adds	r3, #1
 800056c:	73fb      	strb	r3, [r7, #15]
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	2b09      	cmp	r3, #9
 8000572:	d9f5      	bls.n	8000560 <NRF_voidSendData+0xc0>
   }



}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000044 	.word	0x20000044
 8000584:	20000038 	.word	0x20000038

08000588 <HAL_NRF_Send_Number>:
 * note :
 *
 */

uint8_t HAL_NRF_Send_Number(uint32_t Copy_u32Number , uint8_t Copy_u8Number_Index)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]

	uint8_t Local_u8Number_Element = 0  ;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
	uint8_t Main_Arr[5] = {0}			;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	2300      	movs	r3, #0
 800059e:	733b      	strb	r3, [r7, #12]

	if (Copy_u32Number == 0)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d11e      	bne.n	80005e4 <HAL_NRF_Send_Number+0x5c>
	{
		Local_u8Number_Element++ ;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	3301      	adds	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	e01d      	b.n	80005ea <HAL_NRF_Send_Number+0x62>
	else
	{
    /* Splitting Number */
    while (Copy_u32Number > 0)
    {
    	Main_Arr[Local_u8Number_Element] = (Copy_u32Number % 10) + 48 ;
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <HAL_NRF_Send_Number+0xa0>)
 80005b2:	fba3 2301 	umull	r2, r3, r3, r1
 80005b6:	08da      	lsrs	r2, r3, #3
 80005b8:	4613      	mov	r3, r2
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	4413      	add	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	1aca      	subs	r2, r1, r3
 80005c2:	b2d2      	uxtb	r2, r2
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	3230      	adds	r2, #48	; 0x30
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	3310      	adds	r3, #16
 80005cc:	443b      	add	r3, r7
 80005ce:	f803 2c08 	strb.w	r2, [r3, #-8]
    	Copy_u32Number = Copy_u32Number / 10 ;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <HAL_NRF_Send_Number+0xa0>)
 80005d6:	fba2 2303 	umull	r2, r3, r2, r3
 80005da:	08db      	lsrs	r3, r3, #3
 80005dc:	607b      	str	r3, [r7, #4]
    	Local_u8Number_Element++ ;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
    while (Copy_u32Number > 0)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e1      	bne.n	80005ae <HAL_NRF_Send_Number+0x26>
    }

	}
    /* Copy the elements of Main_Arr --> Reverted_Arr then send them to UART in correct order */

    for (uint8_t Revert_Index = 0 ; Revert_Index<Local_u8Number_Element ; Revert_Index++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	73bb      	strb	r3, [r7, #14]
 80005ee:	e010      	b.n	8000612 <HAL_NRF_Send_Number+0x8a>
    {
    	Send_Data[Copy_u8Number_Index] = Main_Arr[Local_u8Number_Element-Revert_Index-1] ;
 80005f0:	7bfa      	ldrb	r2, [r7, #15]
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	3210      	adds	r2, #16
 80005fc:	443a      	add	r2, r7
 80005fe:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <HAL_NRF_Send_Number+0xa4>)
 8000604:	54d1      	strb	r1, [r2, r3]
    	Copy_u8Number_Index ++ ;
 8000606:	78fb      	ldrb	r3, [r7, #3]
 8000608:	3301      	adds	r3, #1
 800060a:	70fb      	strb	r3, [r7, #3]
    for (uint8_t Revert_Index = 0 ; Revert_Index<Local_u8Number_Element ; Revert_Index++)
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	3301      	adds	r3, #1
 8000610:	73bb      	strb	r3, [r7, #14]
 8000612:	7bba      	ldrb	r2, [r7, #14]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	429a      	cmp	r2, r3
 8000618:	d3ea      	bcc.n	80005f0 <HAL_NRF_Send_Number+0x68>
    }

    return Copy_u8Number_Index ;
 800061a:	78fb      	ldrb	r3, [r7, #3]

}
 800061c:	4618      	mov	r0, r3
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	cccccccd 	.word	0xcccccccd
 800062c:	20000038 	.word	0x20000038

08000630 <NRF_voidResetNRF>:
 *
 */


void NRF_voidResetNRF(uint8_t Copy_u8REG)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8REG == STATUS)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b07      	cmp	r3, #7
 800063e:	d104      	bne.n	800064a <NRF_voidResetNRF+0x1a>
	{
		NRF_voidWriteByteReg(STATUS, 0x00);
 8000640:	2100      	movs	r1, #0
 8000642:	2007      	movs	r0, #7
 8000644:	f7ff fe5c 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
	NRF_voidWriteByteReg(DYNPD, 0);
	NRF_voidWriteByteReg(FEATURE, 0);
	}
}
 8000648:	e090      	b.n	800076c <NRF_voidResetNRF+0x13c>
	else if (Copy_u8REG == FIFO_STATUS)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b17      	cmp	r3, #23
 800064e:	d104      	bne.n	800065a <NRF_voidResetNRF+0x2a>
		NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 8000650:	2111      	movs	r1, #17
 8000652:	2017      	movs	r0, #23
 8000654:	f7ff fe54 	bl	8000300 <NRF_voidWriteByteReg>
}
 8000658:	e088      	b.n	800076c <NRF_voidResetNRF+0x13c>
	NRF_voidWriteByteReg(CONFIG, 0x08);
 800065a:	2108      	movs	r1, #8
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff fe4f 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_AA, 0x3F);
 8000662:	213f      	movs	r1, #63	; 0x3f
 8000664:	2001      	movs	r0, #1
 8000666:	f7ff fe4b 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_RXADDR, 0x03);
 800066a:	2103      	movs	r1, #3
 800066c:	2002      	movs	r0, #2
 800066e:	f7ff fe47 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_AW, 0x03);
 8000672:	2103      	movs	r1, #3
 8000674:	2003      	movs	r0, #3
 8000676:	f7ff fe43 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_RETR, 0x03);
 800067a:	2103      	movs	r1, #3
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff fe3f 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_CH, 0x02);
 8000682:	2102      	movs	r1, #2
 8000684:	2005      	movs	r0, #5
 8000686:	f7ff fe3b 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_SETUP, 0x0E);
 800068a:	210e      	movs	r1, #14
 800068c:	2006      	movs	r0, #6
 800068e:	f7ff fe37 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(STATUS, 0x00);
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f7ff fe33 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(OBSERVE_TX, 0x00);
 800069a:	2100      	movs	r1, #0
 800069c:	2008      	movs	r0, #8
 800069e:	f7ff fe2f 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(CD, 0x00);
 80006a2:	2100      	movs	r1, #0
 80006a4:	2009      	movs	r0, #9
 80006a6:	f7ff fe2b 	bl	8000300 <NRF_voidWriteByteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006aa:	4a32      	ldr	r2, [pc, #200]	; (8000774 <NRF_voidResetNRF+0x144>)
 80006ac:	f107 0318 	add.w	r3, r7, #24
 80006b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b4:	6018      	str	r0, [r3, #0]
 80006b6:	3304      	adds	r3, #4
 80006b8:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P0, rx_addr_p0_def, 5);
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	2205      	movs	r2, #5
 80006c0:	4619      	mov	r1, r3
 80006c2:	200a      	movs	r0, #10
 80006c4:	f7ff fe3e 	bl	8000344 <NRF_voidWriteMultiByteReg>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80006c8:	4a2b      	ldr	r2, [pc, #172]	; (8000778 <NRF_voidResetNRF+0x148>)
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d2:	6018      	str	r0, [r3, #0]
 80006d4:	3304      	adds	r3, #4
 80006d6:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P1, rx_addr_p1_def, 5);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2205      	movs	r2, #5
 80006de:	4619      	mov	r1, r3
 80006e0:	200b      	movs	r0, #11
 80006e2:	f7ff fe2f 	bl	8000344 <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P2, 0xC3);
 80006e6:	21c3      	movs	r1, #195	; 0xc3
 80006e8:	200c      	movs	r0, #12
 80006ea:	f7ff fe09 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P3, 0xC4);
 80006ee:	21c4      	movs	r1, #196	; 0xc4
 80006f0:	200d      	movs	r0, #13
 80006f2:	f7ff fe05 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P4, 0xC5);
 80006f6:	21c5      	movs	r1, #197	; 0xc5
 80006f8:	200e      	movs	r0, #14
 80006fa:	f7ff fe01 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P5, 0xC6);
 80006fe:	21c6      	movs	r1, #198	; 0xc6
 8000700:	200f      	movs	r0, #15
 8000702:	f7ff fdfd 	bl	8000300 <NRF_voidWriteByteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000706:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <NRF_voidResetNRF+0x144>)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000710:	6018      	str	r0, [r3, #0]
 8000712:	3304      	adds	r3, #4
 8000714:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(TX_ADDR, tx_addr_def, 5);
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	2205      	movs	r2, #5
 800071c:	4619      	mov	r1, r3
 800071e:	2010      	movs	r0, #16
 8000720:	f7ff fe10 	bl	8000344 <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_PW_P0, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	2011      	movs	r0, #17
 8000728:	f7ff fdea 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P1, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	2012      	movs	r0, #18
 8000730:	f7ff fde6 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P2, 0);
 8000734:	2100      	movs	r1, #0
 8000736:	2013      	movs	r0, #19
 8000738:	f7ff fde2 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P3, 0);
 800073c:	2100      	movs	r1, #0
 800073e:	2014      	movs	r0, #20
 8000740:	f7ff fdde 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P4, 0);
 8000744:	2100      	movs	r1, #0
 8000746:	2015      	movs	r0, #21
 8000748:	f7ff fdda 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	2016      	movs	r0, #22
 8000750:	f7ff fdd6 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 8000754:	2111      	movs	r1, #17
 8000756:	2017      	movs	r0, #23
 8000758:	f7ff fdd2 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(DYNPD, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	201c      	movs	r0, #28
 8000760:	f7ff fdce 	bl	8000300 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FEATURE, 0);
 8000764:	2100      	movs	r1, #0
 8000766:	201d      	movs	r0, #29
 8000768:	f7ff fdca 	bl	8000300 <NRF_voidWriteByteReg>
}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	080048cc 	.word	0x080048cc
 8000778:	080048d4 	.word	0x080048d4

0800077c <HAL_voidUltraSonic>:
#include "HAL/Ultrasonic.h"
#include "HAL/DC_MOTOR.h"


void HAL_voidUltraSonic (uint16_t *UltraSonic_Reading)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]


/* TODO  ****************/

}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <HAL_UltraSonic_Decision>:

uint8_t HAL_UltraSonic_Decision(uint16_t *UltraSonic_Reading)
{
 800078e:	b480      	push	{r7}
 8000790:	b085      	sub	sp, #20
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]

	uint8_t Return_Value = 254 ;
 8000796:	23fe      	movs	r3, #254	; 0xfe
 8000798:	73fb      	strb	r3, [r7, #15]

	/* About to Hit */
	if ( (10 <= UltraSonic_Reading[0]) &&  (UltraSonic_Reading[0]<= 20) )
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	2b09      	cmp	r3, #9
 80007a0:	d906      	bls.n	80007b0 <HAL_UltraSonic_Decision+0x22>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	2b14      	cmp	r3, #20
 80007a8:	d802      	bhi.n	80007b0 <HAL_UltraSonic_Decision+0x22>
	{
		Return_Value = STOP ;
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e009      	b.n	80007c4 <HAL_UltraSonic_Decision+0x36>

	}

	/* Close to Hit */
	else if ((20 < UltraSonic_Reading[0]) &&  (UltraSonic_Reading[0]<= 30) )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	2b14      	cmp	r3, #20
 80007b6:	d905      	bls.n	80007c4 <HAL_UltraSonic_Decision+0x36>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b1e      	cmp	r3, #30
 80007be:	d801      	bhi.n	80007c4 <HAL_UltraSonic_Decision+0x36>
	{
		Return_Value = SPEED_25 ;
 80007c0:	2319      	movs	r3, #25
 80007c2:	73fb      	strb	r3, [r7, #15]

	}



	return Return_Value ;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]

}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fd44 	bl	8001260 <HAL_Init>

  /* USER CODE BEGIN Init */
  NRF_voidInit();
 80007d8:	f7ff fe16 	bl	8000408 <NRF_voidInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f836 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f000 f9b4 	bl	8000b4c <MX_GPIO_Init>
  MX_TIM1_Init();
 80007e4:	f000 f8a2 	bl	800092c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007e8:	f000 f986 	bl	8000af8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80007ec:	f000 f92e 	bl	8000a4c <MX_TIM3_Init>
  MX_SPI1_Init();
 80007f0:	f000 f866 	bl	80008c0 <MX_SPI1_Init>
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 80007f4:	2201      	movs	r2, #1
 80007f6:	490e      	ldr	r1, [pc, #56]	; (8000830 <main+0x60>)
 80007f8:	480e      	ldr	r0, [pc, #56]	; (8000834 <main+0x64>)
 80007fa:	f003 faf8 	bl	8003dee <HAL_UART_Receive_IT>
  HAL_TIM_OC_MspInit(&htim3) ;
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <main+0x68>)
 8000800:	f000 fc0a 	bl	8001018 <HAL_TIM_OC_MspInit>
  NRF_voidTransmitterMode (TxAddress ,10 );
 8000804:	210a      	movs	r1, #10
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <main+0x6c>)
 8000808:	f7ff fe22 	bl	8000450 <NRF_voidTransmitterMode>
  /* USER CODE BEGIN 2 */

  Data_Tx.Speed 	 = 0 						;  /* Input from MOTION Branch     */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <main+0x70>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
  Data_Tx.Direction  = FORWARD 					;  /* Input from MOTION Branch     */
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <main+0x70>)
 8000814:	2201      	movs	r2, #1
 8000816:	705a      	strb	r2, [r3, #1]
  Data_Tx.Distance 	 = 0						;  /* Input from ULTRASONIC Branch */
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <main+0x70>)
 800081a:	2200      	movs	r2, #0
 800081c:	709a      	strb	r2, [r3, #2]
  Data_Tx.Indication = INDICATION_NORMAL 	    ;  /* Input from Emergency		   */
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <main+0x70>)
 8000820:	2204      	movs	r2, #4
 8000822:	70da      	strb	r2, [r3, #3]

  Data_Sent[6]     = Data_States[3]				;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <main+0x74>)
 8000826:	78da      	ldrb	r2, [r3, #3]
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <main+0x78>)
 800082a:	719a      	strb	r2, [r3, #6]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082c:	e7fe      	b.n	800082c <main+0x5c>
 800082e:	bf00      	nop
 8000830:	20000176 	.word	0x20000176
 8000834:	2000012c 	.word	0x2000012c
 8000838:	200000e4 	.word	0x200000e4
 800083c:	20000000 	.word	0x20000000
 8000840:	2000018c 	.word	0x2000018c
 8000844:	20000008 	.word	0x20000008
 8000848:	20000184 	.word	0x20000184

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b090      	sub	sp, #64	; 0x40
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	2228      	movs	r2, #40	; 0x28
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fffe 	bl	800485c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000878:	2300      	movs	r3, #0
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	4618      	mov	r0, r3
 8000882:	f001 f8cf 	bl	8001a24 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x44>
  {
    Error_Handler();
 800088c:	f000 fb24 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fb3d 	bl	8001f28 <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80008b4:	f000 fb10 	bl	8000ed8 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	3740      	adds	r7, #64	; 0x40
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_SPI1_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_SPI1_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_SPI1_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_SPI1_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_SPI1_Init+0x64>)
 80008f4:	2208      	movs	r2, #8
 80008f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI1_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_SPI1_Init+0x64>)
 8000912:	f001 fc97 	bl	8002244 <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 fadc 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000044 	.word	0x20000044
 8000928:	40013000 	.word	0x40013000

0800092c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b092      	sub	sp, #72	; 0x48
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000932:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2220      	movs	r2, #32
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f003 ff80 	bl	800485c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <MX_TIM1_Init+0x118>)
 800095e:	4a3a      	ldr	r2, [pc, #232]	; (8000a48 <MX_TIM1_Init+0x11c>)
 8000960:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000962:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <MX_TIM1_Init+0x118>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <MX_TIM1_Init+0x118>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800096e:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <MX_TIM1_Init+0x118>)
 8000970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000974:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <MX_TIM1_Init+0x118>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <MX_TIM1_Init+0x118>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <MX_TIM1_Init+0x118>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000988:	482e      	ldr	r0, [pc, #184]	; (8000a44 <MX_TIM1_Init+0x118>)
 800098a:	f002 fbd5 	bl	8003138 <HAL_TIM_PWM_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000994:	f000 faa0 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009a4:	4619      	mov	r1, r3
 80009a6:	4827      	ldr	r0, [pc, #156]	; (8000a44 <MX_TIM1_Init+0x118>)
 80009a8:	f003 f910 	bl	8003bcc <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80009b2:	f000 fa91 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b6:	2360      	movs	r3, #96	; 0x60
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	481a      	ldr	r0, [pc, #104]	; (8000a44 <MX_TIM1_Init+0x118>)
 80009dc:	f002 fe02 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80009e6:	f000 fa77 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	2204      	movs	r2, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4814      	ldr	r0, [pc, #80]	; (8000a44 <MX_TIM1_Init+0x118>)
 80009f4:	f002 fdf6 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80009fe:	f000 fa6b 	bl	8000ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <MX_TIM1_Init+0x118>)
 8000a26:	f003 f92f 	bl	8003c88 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000a30:	f000 fa52 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <MX_TIM1_Init+0x118>)
 8000a36:	f000 fb15 	bl	8001064 <HAL_TIM_MspPostInit>

}
 8000a3a:	bf00      	nop
 8000a3c:	3748      	adds	r7, #72	; 0x48
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000009c 	.word	0x2000009c
 8000a48:	40012c00 	.word	0x40012c00

08000a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_TIM3_Init+0xa4>)
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <MX_TIM3_Init+0xa8>)
 8000a72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <MX_TIM3_Init+0xa4>)
 8000a76:	2220      	movs	r2, #32
 8000a78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_TIM3_Init+0xa4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_TIM3_Init+0xa4>)
 8000a82:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_TIM3_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_TIM3_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000a94:	4816      	ldr	r0, [pc, #88]	; (8000af0 <MX_TIM3_Init+0xa4>)
 8000a96:	f002 f95d 	bl	8002d54 <HAL_TIM_OC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f000 fa1a 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480f      	ldr	r0, [pc, #60]	; (8000af0 <MX_TIM3_Init+0xa4>)
 8000ab4:	f003 f88a 	bl	8003bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000abe:	f000 fa0b 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_TIM3_Init+0xa4>)
 8000ada:	f002 fd27 	bl	800352c <HAL_TIM_OC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ae4:	f000 f9f8 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000e4 	.word	0x200000e4
 8000af4:	40000400 	.word	0x40000400

08000af8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_USART1_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART1_UART_Init+0x4c>)
 8000b30:	f003 f90d 	bl	8003d4e <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f9cd 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000012c 	.word	0x2000012c
 8000b48:	40013800 	.word	0x40013800

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a2c      	ldr	r2, [pc, #176]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0320 	and.w	r3, r3, #32
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xcc>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc6:	4815      	ldr	r0, [pc, #84]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000bc8:	f000 ff14 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2106      	movs	r1, #6
 8000bd0:	4813      	ldr	r0, [pc, #76]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000bd2:	f000 ff0f 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	480b      	ldr	r0, [pc, #44]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000bf0:	f000 fd7c 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000c0c:	f000 fd6e 	bl	80016ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40011000 	.word	0x40011000
 8000c20:	40010800 	.word	0x40010800

08000c24 <HAL_UART_RxCpltCallback>:
  * @param Handler
  * @retval None
  */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <HAL_UART_RxCpltCallback+0x24>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d104      	bne.n	8000c40 <HAL_UART_RxCpltCallback+0x1c>
  {
	  APP_voidTakeDecision(rxData) ;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_UART_RxCpltCallback+0x28>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f808 	bl	8000c50 <APP_voidTakeDecision>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40013800 	.word	0x40013800
 8000c4c:	20000176 	.word	0x20000176

08000c50 <APP_voidTakeDecision>:
  * @param Data from BM -->Copy_u8rxData
  * @retval None
  */

void APP_voidTakeDecision (uint8_t Copy_u8rxData)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	/* Start Timer */
	HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_1) ;
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4840      	ldr	r0, [pc, #256]	; (8000d60 <APP_voidTakeDecision+0x110>)
 8000c5e:	f002 f8c9 	bl	8002df4 <HAL_TIM_OC_Start_IT>

	switch (Copy_u8rxData)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	3b42      	subs	r3, #66	; 0x42
 8000c66:	2b11      	cmp	r3, #17
 8000c68:	d85d      	bhi.n	8000d26 <APP_voidTakeDecision+0xd6>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <APP_voidTakeDecision+0x20>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000ccd 	.word	0x08000ccd
 8000c74:	08000d27 	.word	0x08000d27
 8000c78:	08000d27 	.word	0x08000d27
 8000c7c:	08000d27 	.word	0x08000d27
 8000c80:	08000cb9 	.word	0x08000cb9
 8000c84:	08000d27 	.word	0x08000d27
 8000c88:	08000d27 	.word	0x08000d27
 8000c8c:	08000d27 	.word	0x08000d27
 8000c90:	08000d27 	.word	0x08000d27
 8000c94:	08000d27 	.word	0x08000d27
 8000c98:	08000cf5 	.word	0x08000cf5
 8000c9c:	08000d27 	.word	0x08000d27
 8000ca0:	08000d27 	.word	0x08000d27
 8000ca4:	08000d27 	.word	0x08000d27
 8000ca8:	08000d09 	.word	0x08000d09
 8000cac:	08000d27 	.word	0x08000d27
 8000cb0:	08000ce1 	.word	0x08000ce1
 8000cb4:	08000d19 	.word	0x08000d19
	{

	case 'F' :
		APP_voidAction (US_Decision,FORWARD) ;
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <APP_voidTakeDecision+0x114>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f8b6 	bl	8000e30 <APP_voidAction>
		Car_State = STATE_MOVING ;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <APP_voidTakeDecision+0x118>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
		break ;
 8000cca:	e02c      	b.n	8000d26 <APP_voidTakeDecision+0xd6>

	case 'B' :
    	APP_voidAction (US_Decision,BACKWARD) ;
 8000ccc:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <APP_voidTakeDecision+0x114>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f8ac 	bl	8000e30 <APP_voidAction>
    	Car_State = STATE_MOVING ;
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <APP_voidTakeDecision+0x118>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
    	break ;
 8000cde:	e022      	b.n	8000d26 <APP_voidTakeDecision+0xd6>

	case 'R' :
		APP_voidAction (US_Decision,RIGHT) ;
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <APP_voidTakeDecision+0x114>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f8a2 	bl	8000e30 <APP_voidAction>
		Car_State = STATE_MOVING ;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <APP_voidTakeDecision+0x118>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
    	break ;
 8000cf2:	e018      	b.n	8000d26 <APP_voidTakeDecision+0xd6>

	case 'L' :
		APP_voidAction (US_Decision,LEFT) ;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <APP_voidTakeDecision+0x114>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f898 	bl	8000e30 <APP_voidAction>
		Car_State = STATE_MOVING ;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <APP_voidTakeDecision+0x118>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
    	break ;
 8000d06:	e00e      	b.n	8000d26 <APP_voidTakeDecision+0xd6>

	case 'P' :
		HAL_voidControlMotors(SPEED_0,STOP) ;
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fa1e 	bl	800014c <HAL_voidControlMotors>
		Car_State = STATE_STOP ;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <APP_voidTakeDecision+0x118>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	701a      	strb	r2, [r3, #0]
    	break ;
 8000d16:	e006      	b.n	8000d26 <APP_voidTakeDecision+0xd6>

	case 'S' :
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1e:	4813      	ldr	r0, [pc, #76]	; (8000d6c <APP_voidTakeDecision+0x11c>)
 8000d20:	f000 fe68 	bl	80019f4 <HAL_GPIO_WritePin>
		break ;
 8000d24:	bf00      	nop

	}

	HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8000d26:	2201      	movs	r2, #1
 8000d28:	4911      	ldr	r1, [pc, #68]	; (8000d70 <APP_voidTakeDecision+0x120>)
 8000d2a:	4812      	ldr	r0, [pc, #72]	; (8000d74 <APP_voidTakeDecision+0x124>)
 8000d2c:	f003 f85f 	bl	8003dee <HAL_UART_Receive_IT>
	APP_voidModeUpdate();
 8000d30:	f000 f826 	bl	8000d80 <APP_voidModeUpdate>
	if(System_Mode == Comm_Mode || System_Mode == Dominant_Mode || System_Mode == Emergency_Mode)
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <APP_voidTakeDecision+0x128>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d007      	beq.n	8000d4c <APP_voidTakeDecision+0xfc>
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <APP_voidTakeDecision+0x128>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d003      	beq.n	8000d4c <APP_voidTakeDecision+0xfc>
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <APP_voidTakeDecision+0x128>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d104      	bne.n	8000d56 <APP_voidTakeDecision+0x106>
	{
		NRF_voidSendData (Data_Sent, 4 ,NRF_NUMBERS_EXIST  );
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2104      	movs	r1, #4
 8000d50:	480a      	ldr	r0, [pc, #40]	; (8000d7c <APP_voidTakeDecision+0x12c>)
 8000d52:	f7ff fba5 	bl	80004a0 <NRF_voidSendData>
	}
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000e4 	.word	0x200000e4
 8000d64:	20000180 	.word	0x20000180
 8000d68:	20000174 	.word	0x20000174
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	20000176 	.word	0x20000176
 8000d74:	2000012c 	.word	0x2000012c
 8000d78:	20000175 	.word	0x20000175
 8000d7c:	20000184 	.word	0x20000184

08000d80 <APP_voidModeUpdate>:

void APP_voidModeUpdate()
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	if(US_ARR[3] < 60 )
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <APP_voidModeUpdate+0x24>)
 8000d86:	88db      	ldrh	r3, [r3, #6]
 8000d88:	2b3b      	cmp	r3, #59	; 0x3b
 8000d8a:	d803      	bhi.n	8000d94 <APP_voidModeUpdate+0x14>
	{
		System_Mode = Comm_Mode ;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <APP_voidModeUpdate+0x28>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]
	}
	else
		System_Mode = Normal_Mode ;
}
 8000d92:	e002      	b.n	8000d9a <APP_voidModeUpdate+0x1a>
		System_Mode = Normal_Mode ;
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <APP_voidModeUpdate+0x28>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000178 	.word	0x20000178
 8000da8:	20000175 	.word	0x20000175

08000dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @param Handler
  * @retval None
  */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	TMR_Counter ++ ;
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000dbe:	701a      	strb	r2, [r3, #0]

    /* Reading of all UltraSonic */
    HAL_voidUltraSonic(US_ARR) ;
 8000dc0:	4815      	ldr	r0, [pc, #84]	; (8000e18 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000dc2:	f7ff fcdb 	bl	800077c <HAL_voidUltraSonic>

    /* Update NRF values*/
    Data_Tx.Distance = US_ARR[3] 						;  /* Backward UltraSonic reading */
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8000dce:	709a      	strb	r2, [r3, #2]
	Data_Sent[4]     = Data_States[2]					;
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000dd2:	789a      	ldrb	r2, [r3, #2]
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000dd6:	711a      	strb	r2, [r3, #4]
    Data_Sent[5]     = Data_Tx.Distance				    ;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8000dda:	789a      	ldrb	r2, [r3, #2]
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000dde:	715a      	strb	r2, [r3, #5]

    /* Decision  */
    US_Decision = HAL_UltraSonic_Decision(US_ARR) ;
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000de2:	f7ff fcd4 	bl	800078e <HAL_UltraSonic_Decision>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000dec:	701a      	strb	r2, [r3, #0]

	/* Delay 2 Second */
	if (TMR_Counter == 10 )
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b0a      	cmp	r3, #10
 8000df4:	d10a      	bne.n	8000e0c <HAL_TIM_OC_DelayElapsedCallback+0x60>
	  {

		TMR_Counter = 0 ;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
		HAL_voidControlMotors(SPEED_0 , STOP ) 	  ;
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff f9a4 	bl	800014c <HAL_voidControlMotors>
		HAL_TIM_OC_Stop_IT (&htim3,TIM_CHANNEL_1) ;
 8000e04:	2100      	movs	r1, #0
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8000e08:	f002 f8e4 	bl	8002fd4 <HAL_TIM_OC_Stop_IT>

	  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000177 	.word	0x20000177
 8000e18:	20000178 	.word	0x20000178
 8000e1c:	2000018c 	.word	0x2000018c
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000184 	.word	0x20000184
 8000e28:	20000180 	.word	0x20000180
 8000e2c:	200000e4 	.word	0x200000e4

08000e30 <APP_voidAction>:
void APP_voidAction (uint8_t Copy_u8Action , uint8_t Copy_u8Direction)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_speed;
	/* NO Obstacle is Close */
	if (Copy_u8Action == 254)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2bfe      	cmp	r3, #254	; 0xfe
 8000e44:	d10a      	bne.n	8000e5c <APP_voidAction+0x2c>
	{
		Data_Tx.Indication = Normal_Mode 	;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <APP_voidAction+0x9c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	70da      	strb	r2, [r3, #3]
		Local_speed = SPEED_50 ;
 8000e4c:	2332      	movs	r3, #50	; 0x32
 8000e4e:	73fb      	strb	r3, [r7, #15]
		HAL_voidControlMotors(SPEED_50,Copy_u8Direction) ;
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	4619      	mov	r1, r3
 8000e54:	2032      	movs	r0, #50	; 0x32
 8000e56:	f7ff f979 	bl	800014c <HAL_voidControlMotors>
 8000e5a:	e019      	b.n	8000e90 <APP_voidAction+0x60>

	}
	else if (Copy_u8Action == STOP)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d109      	bne.n	8000e76 <APP_voidAction+0x46>
	{
		Data_Tx.Indication = INDICATION_SUDDEN_BRAKE 	;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <APP_voidAction+0x9c>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	70da      	strb	r2, [r3, #3]
		Local_speed = SPEED_0 ;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
		HAL_voidControlMotors(SPEED_0,STOP) ;
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff f96c 	bl	800014c <HAL_voidControlMotors>
 8000e74:	e00c      	b.n	8000e90 <APP_voidAction+0x60>
	}
	else if (Copy_u8Action == SPEED_25)
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b19      	cmp	r3, #25
 8000e7a:	d109      	bne.n	8000e90 <APP_voidAction+0x60>
	{
		Data_Tx.Indication = INDICATION_OBSTACLE 	;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <APP_voidAction+0x9c>)
 8000e7e:	2203      	movs	r2, #3
 8000e80:	70da      	strb	r2, [r3, #3]
		Local_speed = SPEED_25 ;
 8000e82:	2319      	movs	r3, #25
 8000e84:	73fb      	strb	r3, [r7, #15]
		HAL_voidControlMotors(SPEED_25,Copy_u8Direction) ;
 8000e86:	79bb      	ldrb	r3, [r7, #6]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	2019      	movs	r0, #25
 8000e8c:	f7ff f95e 	bl	800014c <HAL_voidControlMotors>
	}
	  Data_Tx.Speed 	 = Local_speed						;
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <APP_voidAction+0x9c>)
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	7013      	strb	r3, [r2, #0]
	  Data_Tx.Direction  = Copy_u8Direction 				;
 8000e96:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <APP_voidAction+0x9c>)
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	7053      	strb	r3, [r2, #1]

	  Data_Sent[0] = Data_States[0]							;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <APP_voidAction+0xa0>)
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <APP_voidAction+0xa4>)
 8000ea2:	701a      	strb	r2, [r3, #0]
	  Data_Sent[1] = Data_Tx.Speed							;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <APP_voidAction+0x9c>)
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <APP_voidAction+0xa4>)
 8000eaa:	705a      	strb	r2, [r3, #1]
	  Data_Sent[2] = Data_States[1]							;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <APP_voidAction+0xa0>)
 8000eae:	785a      	ldrb	r2, [r3, #1]
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <APP_voidAction+0xa4>)
 8000eb2:	709a      	strb	r2, [r3, #2]
	  Data_Sent[3] = Data_Tx.Direction						;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <APP_voidAction+0x9c>)
 8000eb6:	785a      	ldrb	r2, [r3, #1]
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <APP_voidAction+0xa4>)
 8000eba:	70da      	strb	r2, [r3, #3]
	  Data_Sent[7] = Data_Tx.Indication						;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <APP_voidAction+0x9c>)
 8000ebe:	78da      	ldrb	r2, [r3, #3]
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <APP_voidAction+0xa4>)
 8000ec2:	71da      	strb	r2, [r3, #7]
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000018c 	.word	0x2000018c
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000184 	.word	0x20000184

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <HAL_MspInit+0x5c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6193      	str	r3, [r2, #24]
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_MspInit+0x5c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_MspInit+0x60>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_MspInit+0x60>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000

08000f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <HAL_SPI_MspInit+0x88>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d12f      	bne.n	8000fc8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f98:	23a0      	movs	r3, #160	; 0xa0
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <HAL_SPI_MspInit+0x90>)
 8000fac:	f000 fb9e 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fb0:	2340      	movs	r3, #64	; 0x40
 8000fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_SPI_MspInit+0x90>)
 8000fc4:	f000 fb92 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40013000 	.word	0x40013000
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010800 	.word	0x40010800

08000fdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a09      	ldr	r2, [pc, #36]	; (8001010 <HAL_TIM_PWM_MspInit+0x34>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10b      	bne.n	8001006 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_TIM_PWM_MspInit+0x38>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_TIM_PWM_MspInit+0x38>)
 8000ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_TIM_PWM_MspInit+0x38>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40012c00 	.word	0x40012c00
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_TIM_OC_MspInit+0x44>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d113      	bne.n	8001052 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_TIM_OC_MspInit+0x48>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a0c      	ldr	r2, [pc, #48]	; (8001060 <HAL_TIM_OC_MspInit+0x48>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_TIM_OC_MspInit+0x48>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	201d      	movs	r0, #29
 8001048:	f000 fa67 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800104c:	201d      	movs	r0, #29
 800104e:	f000 fa80 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40000400 	.word	0x40000400
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_TIM_MspPostInit+0x5c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d118      	bne.n	80010b6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_TIM_MspPostInit+0x60>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <HAL_TIM_MspPostInit+0x60>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_TIM_MspPostInit+0x60>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_TIM_MspPostInit+0x64>)
 80010b2:	f000 fb1b 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010800 	.word	0x40010800

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a26      	ldr	r2, [pc, #152]	; (8001180 <HAL_UART_MspInit+0xb4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d145      	bne.n	8001178 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_UART_MspInit+0xb8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a24      	ldr	r2, [pc, #144]	; (8001184 <HAL_UART_MspInit+0xb8>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_UART_MspInit+0xb8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_UART_MspInit+0xb8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_UART_MspInit+0xb8>)
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_UART_MspInit+0xb8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BM_TX_Pin;
 800111c:	2340      	movs	r3, #64	; 0x40
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BM_TX_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	4816      	ldr	r0, [pc, #88]	; (8001188 <HAL_UART_MspInit+0xbc>)
 8001130:	f000 fadc 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BM_RX_Pin;
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BM_RX_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4810      	ldr	r0, [pc, #64]	; (8001188 <HAL_UART_MspInit+0xbc>)
 8001148:	f000 fad0 	bl	80016ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_UART_MspInit+0xc0>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_UART_MspInit+0xc0>)
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2025      	movs	r0, #37	; 0x25
 800116e:	f000 f9d4 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001172:	2025      	movs	r0, #37	; 0x25
 8001174:	f000 f9ed 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40013800 	.word	0x40013800
 8001184:	40021000 	.word	0x40021000
 8001188:	40010c00 	.word	0x40010c00
 800118c:	40010000 	.word	0x40010000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d6:	f000 f889 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <TIM3_IRQHandler+0x10>)
 80011e6:	f002 f899 	bl	800331c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200000e4 	.word	0x200000e4

080011f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <USART1_IRQHandler+0x10>)
 80011fa:	f002 fe1d 	bl	8003e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000012c 	.word	0x2000012c

08001208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001214:	f7ff fff8 	bl	8001208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800121a:	490c      	ldr	r1, [pc, #48]	; (800124c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <LoopFillZerobss+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001230:	4c09      	ldr	r4, [pc, #36]	; (8001258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f003 fb15 	bl	800486c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001242:	f7ff fac5 	bl	80007d0 <main>
  bx lr
 8001246:	4770      	bx	lr
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001250:	08004910 	.word	0x08004910
  ldr r2, =_sbss
 8001254:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001258:	20000194 	.word	0x20000194

0800125c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_Init+0x28>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_Init+0x28>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f947 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	200f      	movs	r0, #15
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fe32 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f95f 	bl	800156e <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f000 f927 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000010 	.word	0x20000010
 80012e4:	20000018 	.word	0x20000018
 80012e8:	20000014 	.word	0x20000014

080012ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_IncTick+0x1c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x20>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <HAL_IncTick+0x20>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	20000018 	.word	0x20000018
 800130c:	20000190 	.word	0x20000190

08001310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b02      	ldr	r3, [pc, #8]	; (8001320 <HAL_GetTick+0x10>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	20000190 	.word	0x20000190

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff fff0 	bl	8001310 <HAL_GetTick>
 8001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134a:	bf00      	nop
 800134c:	f7ff ffe0 	bl	8001310 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000018 	.word	0x20000018

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4906      	ldr	r1, [pc, #24]	; (8001404 <__NVIC_EnableIRQ+0x34>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff90 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff2d 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff42 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff90 	bl	800145c <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5f 	bl	8001408 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff35 	bl	80013d0 <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa2 	bl	80014c0 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001586:	b480      	push	{r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d008      	beq.n	80015b0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2204      	movs	r2, #4
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e020      	b.n	80015f2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 020e 	bic.w	r2, r2, #14
 80015be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f202 	lsl.w	r2, r1, r2
 80015de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d005      	beq.n	8001620 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2204      	movs	r2, #4
 8001618:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e051      	b.n	80016c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 020e 	bic.w	r2, r2, #14
 800162e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_DMA_Abort_IT+0xd4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d029      	beq.n	800169e <HAL_DMA_Abort_IT+0xa2>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <HAL_DMA_Abort_IT+0xd8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d022      	beq.n	800169a <HAL_DMA_Abort_IT+0x9e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <HAL_DMA_Abort_IT+0xdc>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d01a      	beq.n	8001694 <HAL_DMA_Abort_IT+0x98>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_DMA_Abort_IT+0xe0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d012      	beq.n	800168e <HAL_DMA_Abort_IT+0x92>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <HAL_DMA_Abort_IT+0xe4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00a      	beq.n	8001688 <HAL_DMA_Abort_IT+0x8c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <HAL_DMA_Abort_IT+0xe8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d102      	bne.n	8001682 <HAL_DMA_Abort_IT+0x86>
 800167c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001680:	e00e      	b.n	80016a0 <HAL_DMA_Abort_IT+0xa4>
 8001682:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001686:	e00b      	b.n	80016a0 <HAL_DMA_Abort_IT+0xa4>
 8001688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168c:	e008      	b.n	80016a0 <HAL_DMA_Abort_IT+0xa4>
 800168e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001692:	e005      	b.n	80016a0 <HAL_DMA_Abort_IT+0xa4>
 8001694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001698:	e002      	b.n	80016a0 <HAL_DMA_Abort_IT+0xa4>
 800169a:	2310      	movs	r3, #16
 800169c:	e000      	b.n	80016a0 <HAL_DMA_Abort_IT+0xa4>
 800169e:	2301      	movs	r3, #1
 80016a0:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_DMA_Abort_IT+0xec>)
 80016a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
    } 
  }
  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40020008 	.word	0x40020008
 80016d4:	4002001c 	.word	0x4002001c
 80016d8:	40020030 	.word	0x40020030
 80016dc:	40020044 	.word	0x40020044
 80016e0:	40020058 	.word	0x40020058
 80016e4:	4002006c 	.word	0x4002006c
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e169      	b.n	80019d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001700:	2201      	movs	r2, #1
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8158 	bne.w	80019ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a9a      	ldr	r2, [pc, #616]	; (800198c <HAL_GPIO_Init+0x2a0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d05e      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001728:	4a98      	ldr	r2, [pc, #608]	; (800198c <HAL_GPIO_Init+0x2a0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d875      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800172e:	4a98      	ldr	r2, [pc, #608]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d058      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001734:	4a96      	ldr	r2, [pc, #600]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d86f      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800173a:	4a96      	ldr	r2, [pc, #600]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d052      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001740:	4a94      	ldr	r2, [pc, #592]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d869      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001746:	4a94      	ldr	r2, [pc, #592]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d04c      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 800174c:	4a92      	ldr	r2, [pc, #584]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d863      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001752:	4a92      	ldr	r2, [pc, #584]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d046      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001758:	4a90      	ldr	r2, [pc, #576]	; (800199c <HAL_GPIO_Init+0x2b0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d85d      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d82a      	bhi.n	80017b8 <HAL_GPIO_Init+0xcc>
 8001762:	2b12      	cmp	r3, #18
 8001764:	d859      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_GPIO_Init+0x80>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017c1 	.word	0x080017c1
 8001774:	080017d3 	.word	0x080017d3
 8001778:	08001815 	.word	0x08001815
 800177c:	0800181b 	.word	0x0800181b
 8001780:	0800181b 	.word	0x0800181b
 8001784:	0800181b 	.word	0x0800181b
 8001788:	0800181b 	.word	0x0800181b
 800178c:	0800181b 	.word	0x0800181b
 8001790:	0800181b 	.word	0x0800181b
 8001794:	0800181b 	.word	0x0800181b
 8001798:	0800181b 	.word	0x0800181b
 800179c:	0800181b 	.word	0x0800181b
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	0800181b 	.word	0x0800181b
 80017a8:	0800181b 	.word	0x0800181b
 80017ac:	0800181b 	.word	0x0800181b
 80017b0:	080017c9 	.word	0x080017c9
 80017b4:	080017dd 	.word	0x080017dd
 80017b8:	4a79      	ldr	r2, [pc, #484]	; (80019a0 <HAL_GPIO_Init+0x2b4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017be:	e02c      	b.n	800181a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e029      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e024      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	3308      	adds	r3, #8
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e01f      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	330c      	adds	r3, #12
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e01a      	b.n	800181c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ee:	2304      	movs	r3, #4
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e013      	b.n	800181c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	611a      	str	r2, [r3, #16]
          break;
 8001806:	e009      	b.n	800181c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	615a      	str	r2, [r3, #20]
          break;
 8001812:	e003      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x130>
          break;
 800181a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d801      	bhi.n	8001826 <HAL_GPIO_Init+0x13a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e001      	b.n	800182a <HAL_GPIO_Init+0x13e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d802      	bhi.n	8001838 <HAL_GPIO_Init+0x14c>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x152>
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3b08      	subs	r3, #8
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	210f      	movs	r1, #15
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80b1 	beq.w	80019ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001884:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_GPIO_Init+0x1ec>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1e8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <HAL_GPIO_Init+0x2c8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1e4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <HAL_GPIO_Init+0x2cc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1e0>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d8:	2300      	movs	r3, #0
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ea:	492f      	ldr	r1, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	492c      	ldr	r1, [pc, #176]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4928      	ldr	r1, [pc, #160]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4922      	ldr	r1, [pc, #136]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	491e      	ldr	r1, [pc, #120]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001944:	4013      	ands	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4918      	ldr	r1, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800196c:	4013      	ands	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d021      	beq.n	80019c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e021      	b.n	80019ce <HAL_GPIO_Init+0x2e2>
 800198a:	bf00      	nop
 800198c:	10320000 	.word	0x10320000
 8001990:	10310000 	.word	0x10310000
 8001994:	10220000 	.word	0x10220000
 8001998:	10210000 	.word	0x10210000
 800199c:	10120000 	.word	0x10120000
 80019a0:	10110000 	.word	0x10110000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40011400 	.word	0x40011400
 80019bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4909      	ldr	r1, [pc, #36]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f47f ae8e 	bne.w	8001700 <HAL_GPIO_Init+0x14>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	372c      	adds	r7, #44	; 0x2c
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	611a      	str	r2, [r3, #16]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e272      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8087 	beq.w	8001b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a44:	4b92      	ldr	r3, [pc, #584]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d00c      	beq.n	8001a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a50:	4b8f      	ldr	r3, [pc, #572]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d112      	bne.n	8001a82 <HAL_RCC_OscConfig+0x5e>
 8001a5c:	4b8c      	ldr	r3, [pc, #560]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a68:	d10b      	bne.n	8001a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6a:	4b89      	ldr	r3, [pc, #548]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d06c      	beq.n	8001b50 <HAL_RCC_OscConfig+0x12c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d168      	bne.n	8001b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e24c      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x76>
 8001a8c:	4b80      	ldr	r3, [pc, #512]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a7f      	ldr	r2, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e02e      	b.n	8001af8 <HAL_RCC_OscConfig+0xd4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x98>
 8001aa2:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a7a      	ldr	r2, [pc, #488]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b78      	ldr	r3, [pc, #480]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a77      	ldr	r2, [pc, #476]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e01d      	b.n	8001af8 <HAL_RCC_OscConfig+0xd4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xbc>
 8001ac6:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a71      	ldr	r2, [pc, #452]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0xd4>
 8001ae0:	4b6b      	ldr	r3, [pc, #428]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a6a      	ldr	r2, [pc, #424]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b68      	ldr	r3, [pc, #416]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a67      	ldr	r2, [pc, #412]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fc06 	bl	8001310 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fc02 	bl	8001310 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e200      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b5d      	ldr	r3, [pc, #372]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0xe4>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fbf2 	bl	8001310 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fbee 	bl	8001310 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1ec      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x10c>
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d063      	beq.n	8001c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5e:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b6a:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d11c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x18c>
 8001b76:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d116      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_RCC_OscConfig+0x176>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d001      	beq.n	8001b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e1c0      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4939      	ldr	r1, [pc, #228]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	e03a      	b.n	8001c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb8:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fba7 	bl	8001310 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fba3 	bl	8001310 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1a1      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4927      	ldr	r1, [pc, #156]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]
 8001bf8:	e015      	b.n	8001c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fb86 	bl	8001310 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff fb82 	bl	8001310 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e180      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d03a      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d019      	beq.n	8001c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c40:	f7ff fb66 	bl	8001310 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c48:	f7ff fb62 	bl	8001310 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e160      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f000 face 	bl	8002208 <RCC_Delay>
 8001c6c:	e01c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7ff fb4c 	bl	8001310 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7a:	e00f      	b.n	8001c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fb48 	bl	8001310 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d908      	bls.n	8001c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e146      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	42420000 	.word	0x42420000
 8001c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e9      	bne.n	8001c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80a6 	beq.w	8001e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cba:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b88      	ldr	r3, [pc, #544]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a87      	ldr	r2, [pc, #540]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	61d3      	str	r3, [r2, #28]
 8001cd2:	4b85      	ldr	r3, [pc, #532]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b82      	ldr	r3, [pc, #520]	; (8001eec <HAL_RCC_OscConfig+0x4c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d118      	bne.n	8001d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <HAL_RCC_OscConfig+0x4c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7e      	ldr	r2, [pc, #504]	; (8001eec <HAL_RCC_OscConfig+0x4c8>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fb09 	bl	8001310 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d02:	f7ff fb05 	bl	8001310 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b64      	cmp	r3, #100	; 0x64
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e103      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	4b75      	ldr	r3, [pc, #468]	; (8001eec <HAL_RCC_OscConfig+0x4c8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x312>
 8001d28:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a6e      	ldr	r2, [pc, #440]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	e02d      	b.n	8001d92 <HAL_RCC_OscConfig+0x36e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x334>
 8001d3e:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a69      	ldr	r2, [pc, #420]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a66      	ldr	r2, [pc, #408]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	6213      	str	r3, [r2, #32]
 8001d56:	e01c      	b.n	8001d92 <HAL_RCC_OscConfig+0x36e>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d10c      	bne.n	8001d7a <HAL_RCC_OscConfig+0x356>
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a5d      	ldr	r2, [pc, #372]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	e00b      	b.n	8001d92 <HAL_RCC_OscConfig+0x36e>
 8001d7a:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d015      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fab9 	bl	8001310 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7ff fab5 	bl	8001310 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0b1      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ee      	beq.n	8001da2 <HAL_RCC_OscConfig+0x37e>
 8001dc4:	e014      	b.n	8001df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff faa3 	bl	8001310 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7ff fa9f 	bl	8001310 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e09b      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ee      	bne.n	8001dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d105      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a3b      	ldr	r2, [pc, #236]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8087 	beq.w	8001f1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d061      	beq.n	8001edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d146      	bne.n	8001eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_RCC_OscConfig+0x4cc>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fa73 	bl	8001310 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff fa6f 	bl	8001310 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e06d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e40:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d108      	bne.n	8001e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4921      	ldr	r1, [pc, #132]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a19      	ldr	r1, [r3, #32]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	491b      	ldr	r1, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x4cc>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fa43 	bl	8001310 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff fa3f 	bl	8001310 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e03d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x46a>
 8001eac:	e035      	b.n	8001f1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_RCC_OscConfig+0x4cc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fa2c 	bl	8001310 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff fa28 	bl	8001310 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e026      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x498>
 8001eda:	e01e      	b.n	8001f1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e019      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_OscConfig+0x500>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000

08001f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d0      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d910      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b67      	ldr	r3, [pc, #412]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4965      	ldr	r1, [pc, #404]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b8      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f84:	4b59      	ldr	r3, [pc, #356]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	494d      	ldr	r1, [pc, #308]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d040      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07f      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e073      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e06b      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4936      	ldr	r1, [pc, #216]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7ff f97a 	bl	8001310 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7ff f976 	bl	8001310 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e053      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d210      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4922      	ldr	r1, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e032      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4916      	ldr	r1, [pc, #88]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	490e      	ldr	r1, [pc, #56]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b6:	f000 f821 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	490a      	ldr	r1, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	5ccb      	ldrb	r3, [r1, r3]
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1cc>)
 80020d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f8d8 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	080048dc 	.word	0x080048dc
 80020f4:	20000010 	.word	0x20000010
 80020f8:	20000014 	.word	0x20000014

080020fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x30>
 8002126:	2b08      	cmp	r3, #8
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x36>
 800212a:	e027      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800212e:	613b      	str	r3, [r7, #16]
      break;
 8002130:	e027      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0c5b      	lsrs	r3, r3, #17
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800215e:	fb03 f202 	mul.w	r2, r3, r2
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e004      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	613b      	str	r3, [r7, #16]
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	613b      	str	r3, [r7, #16]
      break;
 8002180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002182:	693b      	ldr	r3, [r7, #16]
}
 8002184:	4618      	mov	r0, r3
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	080048f4 	.word	0x080048f4
 800219c:	08004904 	.word	0x08004904
 80021a0:	003d0900 	.word	0x003d0900

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000010 	.word	0x20000010

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff2 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	080048ec 	.word	0x080048ec

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f7ff ffde 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0adb      	lsrs	r3, r3, #11
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	080048ec 	.word	0x080048ec

08002208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <RCC_Delay+0x34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <RCC_Delay+0x38>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0a5b      	lsrs	r3, r3, #9
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002224:	bf00      	nop
  }
  while (Delay --);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	60fa      	str	r2, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <RCC_Delay+0x1c>
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	20000010 	.word	0x20000010
 8002240:	10624dd3 	.word	0x10624dd3

08002244 <HAL_SPI_Init>:
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_SPI_Init+0x12>
 8002252:	2301      	movs	r3, #1
 8002254:	e076      	b.n	8002344 <HAL_SPI_Init+0x100>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_SPI_Init+0x2c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002266:	d009      	beq.n	800227c <HAL_SPI_Init+0x38>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
 800226e:	e005      	b.n	800227c <HAL_SPI_Init+0x38>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_SPI_Init+0x58>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fe56 	bl	8000f48 <HAL_SPI_MspInit>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	ea42 0103 	orr.w	r1, r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	0c1a      	lsrs	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f002 0204 	and.w	r2, r2, #4
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002332:	61da      	str	r2, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002342:	2300      	movs	r3, #0
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_SPI_Transmit>:
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	80fb      	strh	r3, [r7, #6]
 800235c:	2300      	movs	r3, #0
 800235e:	77fb      	strb	r3, [r7, #31]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_SPI_Transmit+0x22>
 800236a:	2302      	movs	r3, #2
 800236c:	e12d      	b.n	80025ca <HAL_SPI_Transmit+0x27e>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002376:	f7fe ffcb 	bl	8001310 <HAL_GetTick>
 800237a:	61b8      	str	r0, [r7, #24]
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	82fb      	strh	r3, [r7, #22]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d002      	beq.n	8002392 <HAL_SPI_Transmit+0x46>
 800238c:	2302      	movs	r3, #2
 800238e:	77fb      	strb	r3, [r7, #31]
 8002390:	e116      	b.n	80025c0 <HAL_SPI_Transmit+0x274>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_SPI_Transmit+0x52>
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_SPI_Transmit+0x58>
 800239e:	2301      	movs	r3, #1
 80023a0:	77fb      	strb	r3, [r7, #31]
 80023a2:	e10d      	b.n	80025c0 <HAL_SPI_Transmit+0x274>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2203      	movs	r2, #3
 80023a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	869a      	strh	r2, [r3, #52]	; 0x34
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	879a      	strh	r2, [r3, #60]	; 0x3c
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ea:	d10f      	bne.n	800240c <HAL_SPI_Transmit+0xc0>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d007      	beq.n	800242a <HAL_SPI_Transmit+0xde>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002432:	d14f      	bne.n	80024d4 <HAL_SPI_Transmit+0x188>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Transmit+0xf6>
 800243c:	8afb      	ldrh	r3, [r7, #22]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d142      	bne.n	80024c8 <HAL_SPI_Transmit+0x17c>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	881a      	ldrh	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	1c9a      	adds	r2, r3, #2
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	86da      	strh	r2, [r3, #54]	; 0x36
 8002466:	e02f      	b.n	80024c8 <HAL_SPI_Transmit+0x17c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d112      	bne.n	800249c <HAL_SPI_Transmit+0x150>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	881a      	ldrh	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	1c9a      	adds	r2, r3, #2
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	86da      	strh	r2, [r3, #54]	; 0x36
 800249a:	e015      	b.n	80024c8 <HAL_SPI_Transmit+0x17c>
 800249c:	f7fe ff38 	bl	8001310 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d803      	bhi.n	80024b4 <HAL_SPI_Transmit+0x168>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d102      	bne.n	80024ba <HAL_SPI_Transmit+0x16e>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_SPI_Transmit+0x17c>
 80024ba:	2303      	movs	r3, #3
 80024bc:	77fb      	strb	r3, [r7, #31]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80024c6:	e07b      	b.n	80025c0 <HAL_SPI_Transmit+0x274>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ca      	bne.n	8002468 <HAL_SPI_Transmit+0x11c>
 80024d2:	e050      	b.n	8002576 <HAL_SPI_Transmit+0x22a>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_SPI_Transmit+0x196>
 80024dc:	8afb      	ldrh	r3, [r7, #22]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d144      	bne.n	800256c <HAL_SPI_Transmit+0x220>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	86da      	strh	r2, [r3, #54]	; 0x36
 8002508:	e030      	b.n	800256c <HAL_SPI_Transmit+0x220>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b02      	cmp	r3, #2
 8002516:	d113      	bne.n	8002540 <HAL_SPI_Transmit+0x1f4>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	330c      	adds	r3, #12
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	86da      	strh	r2, [r3, #54]	; 0x36
 800253e:	e015      	b.n	800256c <HAL_SPI_Transmit+0x220>
 8002540:	f7fe fee6 	bl	8001310 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d803      	bhi.n	8002558 <HAL_SPI_Transmit+0x20c>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d102      	bne.n	800255e <HAL_SPI_Transmit+0x212>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_SPI_Transmit+0x220>
 800255e:	2303      	movs	r3, #3
 8002560:	77fb      	strb	r3, [r7, #31]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800256a:	e029      	b.n	80025c0 <HAL_SPI_Transmit+0x274>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1c9      	bne.n	800250a <HAL_SPI_Transmit+0x1be>
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	6839      	ldr	r1, [r7, #0]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fbcc 	bl	8002d18 <SPI_EndRxTxTransaction>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_SPI_Transmit+0x240>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	655a      	str	r2, [r3, #84]	; 0x54
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_SPI_Transmit+0x25e>
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_SPI_Transmit+0x26c>
 80025b2:	2301      	movs	r3, #1
 80025b4:	77fb      	strb	r3, [r7, #31]
 80025b6:	e003      	b.n	80025c0 <HAL_SPI_Transmit+0x274>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80025c8:	7ffb      	ldrb	r3, [r7, #31]
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SPI_Receive>:
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b088      	sub	sp, #32
 80025d6:	af02      	add	r7, sp, #8
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d002      	beq.n	80025f8 <HAL_SPI_Receive+0x26>
 80025f2:	2302      	movs	r3, #2
 80025f4:	75fb      	strb	r3, [r7, #23]
 80025f6:	e0fb      	b.n	80027f0 <HAL_SPI_Receive+0x21e>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002600:	d112      	bne.n	8002628 <HAL_SPI_Receive+0x56>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10e      	bne.n	8002628 <HAL_SPI_Receive+0x56>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2204      	movs	r2, #4
 800260e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002612:	88fa      	ldrh	r2, [r7, #6]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f8ef 	bl	8002802 <HAL_SPI_TransmitReceive>
 8002624:	4603      	mov	r3, r0
 8002626:	e0e8      	b.n	80027fa <HAL_SPI_Receive+0x228>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_SPI_Receive+0x64>
 8002632:	2302      	movs	r3, #2
 8002634:	e0e1      	b.n	80027fa <HAL_SPI_Receive+0x228>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800263e:	f7fe fe67 	bl	8001310 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_SPI_Receive+0x7e>
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <HAL_SPI_Receive+0x84>
 8002650:	2301      	movs	r3, #1
 8002652:	75fb      	strb	r3, [r7, #23]
 8002654:	e0cc      	b.n	80027f0 <HAL_SPI_Receive+0x21e>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2204      	movs	r2, #4
 800265a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	88fa      	ldrh	r2, [r7, #6]
 800266e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	869a      	strh	r2, [r3, #52]	; 0x34
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	86da      	strh	r2, [r3, #54]	; 0x36
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	645a      	str	r2, [r3, #68]	; 0x44
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269c:	d10f      	bne.n	80026be <HAL_SPI_Receive+0xec>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d007      	beq.n	80026dc <HAL_SPI_Receive+0x10a>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d16a      	bne.n	80027ba <HAL_SPI_Receive+0x1e8>
 80026e4:	e032      	b.n	800274c <HAL_SPI_Receive+0x17a>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d115      	bne.n	8002720 <HAL_SPI_Receive+0x14e>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f103 020c 	add.w	r2, r3, #12
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800271e:	e015      	b.n	800274c <HAL_SPI_Receive+0x17a>
 8002720:	f7fe fdf6 	bl	8001310 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d803      	bhi.n	8002738 <HAL_SPI_Receive+0x166>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002736:	d102      	bne.n	800273e <HAL_SPI_Receive+0x16c>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_SPI_Receive+0x17a>
 800273e:	2303      	movs	r3, #3
 8002740:	75fb      	strb	r3, [r7, #23]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800274a:	e051      	b.n	80027f0 <HAL_SPI_Receive+0x21e>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1c7      	bne.n	80026e6 <HAL_SPI_Receive+0x114>
 8002756:	e035      	b.n	80027c4 <HAL_SPI_Receive+0x1f2>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d113      	bne.n	800278e <HAL_SPI_Receive+0x1bc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	b292      	uxth	r2, r2
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	1c9a      	adds	r2, r3, #2
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800278c:	e015      	b.n	80027ba <HAL_SPI_Receive+0x1e8>
 800278e:	f7fe fdbf 	bl	8001310 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d803      	bhi.n	80027a6 <HAL_SPI_Receive+0x1d4>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d102      	bne.n	80027ac <HAL_SPI_Receive+0x1da>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <HAL_SPI_Receive+0x1e8>
 80027ac:	2303      	movs	r3, #3
 80027ae:	75fb      	strb	r3, [r7, #23]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80027b8:	e01a      	b.n	80027f0 <HAL_SPI_Receive+0x21e>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1c9      	bne.n	8002758 <HAL_SPI_Receive+0x186>
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fa53 	bl	8002c74 <SPI_EndRxTransaction>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_SPI_Receive+0x208>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_SPI_Receive+0x216>
 80027e2:	2301      	movs	r3, #1
 80027e4:	75fb      	strb	r3, [r7, #23]
 80027e6:	e003      	b.n	80027f0 <HAL_SPI_Receive+0x21e>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SPI_TransmitReceive>:
 8002802:	b580      	push	{r7, lr}
 8002804:	b08c      	sub	sp, #48	; 0x30
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	807b      	strh	r3, [r7, #2]
 8002810:	2301      	movs	r3, #1
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002814:	2300      	movs	r3, #0
 8002816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_SPI_TransmitReceive+0x26>
 8002824:	2302      	movs	r3, #2
 8002826:	e198      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x358>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002830:	f7fe fd6e 	bl	8001310 <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	; 0x24
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800283c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	837b      	strh	r3, [r7, #26]
 800284a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800284e:	2b01      	cmp	r3, #1
 8002850:	d00f      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x70>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002858:	d107      	bne.n	800286a <HAL_SPI_TransmitReceive+0x68>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <HAL_SPI_TransmitReceive+0x68>
 8002862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002866:	2b04      	cmp	r3, #4
 8002868:	d003      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x70>
 800286a:	2302      	movs	r3, #2
 800286c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002870:	e16d      	b.n	8002b4e <HAL_SPI_TransmitReceive+0x34c>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x82>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x82>
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d103      	bne.n	800288c <HAL_SPI_TransmitReceive+0x8a>
 8002884:	2301      	movs	r3, #1
 8002886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800288a:	e160      	b.n	8002b4e <HAL_SPI_TransmitReceive+0x34c>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b04      	cmp	r3, #4
 8002896:	d003      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x9e>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2205      	movs	r2, #5
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	887a      	ldrh	r2, [r7, #2]
 80028b6:	879a      	strh	r2, [r3, #60]	; 0x3c
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	887a      	ldrh	r2, [r7, #2]
 80028c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	869a      	strh	r2, [r3, #52]	; 0x34
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b40      	cmp	r3, #64	; 0x40
 80028e2:	d007      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0xf2>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fc:	d17c      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x1f6>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_SPI_TransmitReceive+0x10a>
 8002906:	8b7b      	ldrh	r3, [r7, #26]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d16a      	bne.n	80029e2 <HAL_SPI_TransmitReceive+0x1e0>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	881a      	ldrh	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	1c9a      	adds	r2, r3, #2
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002930:	e057      	b.n	80029e2 <HAL_SPI_TransmitReceive+0x1e0>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d11b      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x176>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_SPI_TransmitReceive+0x176>
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d113      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x176>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60da      	str	r2, [r3, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	1c9a      	adds	r2, r3, #2
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	86da      	strh	r2, [r3, #54]	; 0x36
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d119      	bne.n	80029ba <HAL_SPI_TransmitReceive+0x1b8>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d014      	beq.n	80029ba <HAL_SPI_TransmitReceive+0x1b8>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	b292      	uxth	r2, r2
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	1c9a      	adds	r2, r3, #2
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029b6:	2301      	movs	r3, #1
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ba:	f7fe fca9 	bl	8001310 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d80b      	bhi.n	80029e2 <HAL_SPI_TransmitReceive+0x1e0>
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d007      	beq.n	80029e2 <HAL_SPI_TransmitReceive+0x1e0>
 80029d2:	2303      	movs	r3, #3
 80029d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80029e0:	e0b5      	b.n	8002b4e <HAL_SPI_TransmitReceive+0x34c>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1a2      	bne.n	8002932 <HAL_SPI_TransmitReceive+0x130>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d19d      	bne.n	8002932 <HAL_SPI_TransmitReceive+0x130>
 80029f6:	e080      	b.n	8002afa <HAL_SPI_TransmitReceive+0x2f8>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_SPI_TransmitReceive+0x204>
 8002a00:	8b7b      	ldrh	r3, [r7, #26]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d16f      	bne.n	8002ae6 <HAL_SPI_TransmitReceive+0x2e4>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	330c      	adds	r3, #12
 8002a10:	7812      	ldrb	r2, [r2, #0]
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a2c:	e05b      	b.n	8002ae6 <HAL_SPI_TransmitReceive+0x2e4>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d11c      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x274>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d017      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x274>
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d114      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x274>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	330c      	adds	r3, #12
 8002a56:	7812      	ldrb	r2, [r2, #0]
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d119      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x2b6>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d014      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x2b6>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab8:	f7fe fc2a 	bl	8001310 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d803      	bhi.n	8002ad0 <HAL_SPI_TransmitReceive+0x2ce>
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d102      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x2d4>
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_SPI_TransmitReceive+0x2e4>
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002ae4:	e033      	b.n	8002b4e <HAL_SPI_TransmitReceive+0x34c>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d19e      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x22c>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d199      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x22c>
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f90a 	bl	8002d18 <SPI_EndRxTxTransaction>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <HAL_SPI_TransmitReceive+0x316>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
 8002b16:	e01a      	b.n	8002b4e <HAL_SPI_TransmitReceive+0x34c>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <HAL_SPI_TransmitReceive+0x334>
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_SPI_TransmitReceive+0x344>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b44:	e003      	b.n	8002b4e <HAL_SPI_TransmitReceive+0x34c>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3730      	adds	r7, #48	; 0x30
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <SPI_WaitFlagStateUntilTimeout>:
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	71fb      	strb	r3, [r7, #7]
 8002b74:	f7fe fbcc 	bl	8001310 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	f7fe fbc4 	bl	8001310 <HAL_GetTick>
 8002b88:	61b8      	str	r0, [r7, #24]
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	015b      	lsls	r3, r3, #5
 8002b90:	0d1b      	lsrs	r3, r3, #20
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e054      	b.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d050      	beq.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8002ba4:	f7fe fbb4 	bl	8001310 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d902      	bls.n	8002bba <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d13d      	bne.n	8002c36 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd2:	d111      	bne.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bdc:	d004      	beq.n	8002be8 <SPI_WaitFlagStateUntilTimeout+0x84>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	d107      	bne.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c00:	d10f      	bne.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c32:	2303      	movs	r3, #3
 8002c34:	e017      	b.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0x102>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d19b      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0x38>
 8002c64:	2300      	movs	r3, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000010 	.word	0x20000010

08002c74 <SPI_EndRxTransaction>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c88:	d111      	bne.n	8002cae <SPI_EndRxTransaction+0x3a>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c92:	d004      	beq.n	8002c9e <SPI_EndRxTransaction+0x2a>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9c:	d107      	bne.n	8002cae <SPI_EndRxTransaction+0x3a>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cb6:	d117      	bne.n	8002ce8 <SPI_EndRxTransaction+0x74>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d112      	bne.n	8002ce8 <SPI_EndRxTransaction+0x74>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2101      	movs	r1, #1
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff ff49 	bl	8002b64 <SPI_WaitFlagStateUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01a      	beq.n	8002d0e <SPI_EndRxTransaction+0x9a>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e013      	b.n	8002d10 <SPI_EndRxTransaction+0x9c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7ff ff36 	bl	8002b64 <SPI_WaitFlagStateUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <SPI_EndRxTransaction+0x9a>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e000      	b.n	8002d10 <SPI_EndRxTransaction+0x9c>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <SPI_EndRxTxTransaction>:
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff ff18 	bl	8002b64 <SPI_WaitFlagStateUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <SPI_EndRxTxTransaction+0x32>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f043 0220 	orr.w	r2, r3, #32
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
 8002d46:	2303      	movs	r3, #3
 8002d48:	e000      	b.n	8002d4c <SPI_EndRxTxTransaction+0x34>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e041      	b.n	8002dea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe f94c 	bl	8001018 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4610      	mov	r0, r2
 8002d94:	f000 fd0c 	bl	80037b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_TIM_OC_Start_IT+0x28>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e022      	b.n	8002e62 <HAL_TIM_OC_Start_IT+0x6e>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d109      	bne.n	8002e36 <HAL_TIM_OC_Start_IT+0x42>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	e015      	b.n	8002e62 <HAL_TIM_OC_Start_IT+0x6e>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d109      	bne.n	8002e50 <HAL_TIM_OC_Start_IT+0x5c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e008      	b.n	8002e62 <HAL_TIM_OC_Start_IT+0x6e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0a9      	b.n	8002fbe <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_OC_Start_IT+0x86>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e78:	e013      	b.n	8002ea2 <HAL_TIM_OC_Start_IT+0xae>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_OC_Start_IT+0x96>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e88:	e00b      	b.n	8002ea2 <HAL_TIM_OC_Start_IT+0xae>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_OC_Start_IT+0xa6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e98:	e003      	b.n	8002ea2 <HAL_TIM_OC_Start_IT+0xae>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d841      	bhi.n	8002f2c <HAL_TIM_OC_Start_IT+0x138>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <HAL_TIM_OC_Start_IT+0xbc>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002f2d 	.word	0x08002f2d
 8002eb8:	08002f2d 	.word	0x08002f2d
 8002ebc:	08002f2d 	.word	0x08002f2d
 8002ec0:	08002ef7 	.word	0x08002ef7
 8002ec4:	08002f2d 	.word	0x08002f2d
 8002ec8:	08002f2d 	.word	0x08002f2d
 8002ecc:	08002f2d 	.word	0x08002f2d
 8002ed0:	08002f09 	.word	0x08002f09
 8002ed4:	08002f2d 	.word	0x08002f2d
 8002ed8:	08002f2d 	.word	0x08002f2d
 8002edc:	08002f2d 	.word	0x08002f2d
 8002ee0:	08002f1b 	.word	0x08002f1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0202 	orr.w	r2, r2, #2
 8002ef2:	60da      	str	r2, [r3, #12]
      break;
 8002ef4:	e01d      	b.n	8002f32 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0204 	orr.w	r2, r2, #4
 8002f04:	60da      	str	r2, [r3, #12]
      break;
 8002f06:	e014      	b.n	8002f32 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0208 	orr.w	r2, r2, #8
 8002f16:	60da      	str	r2, [r3, #12]
      break;
 8002f18:	e00b      	b.n	8002f32 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0210 	orr.w	r2, r2, #16
 8002f28:	60da      	str	r2, [r3, #12]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f30:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d141      	bne.n	8002fbc <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	6839      	ldr	r1, [r7, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fe1f 	bl	8003b84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_TIM_OC_Start_IT+0x1d4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d107      	bne.n	8002f60 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_TIM_OC_Start_IT+0x1d4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_TIM_OC_Start_IT+0x194>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d009      	beq.n	8002f88 <HAL_TIM_OC_Start_IT+0x194>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <HAL_TIM_OC_Start_IT+0x1d8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_TIM_OC_Start_IT+0x194>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <HAL_TIM_OC_Start_IT+0x1dc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d111      	bne.n	8002fac <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d010      	beq.n	8002fbc <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	e007      	b.n	8002fbc <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800

08002fd4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b0c      	cmp	r3, #12
 8002fe6:	d841      	bhi.n	800306c <HAL_TIM_OC_Stop_IT+0x98>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <HAL_TIM_OC_Stop_IT+0x1c>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003025 	.word	0x08003025
 8002ff4:	0800306d 	.word	0x0800306d
 8002ff8:	0800306d 	.word	0x0800306d
 8002ffc:	0800306d 	.word	0x0800306d
 8003000:	08003037 	.word	0x08003037
 8003004:	0800306d 	.word	0x0800306d
 8003008:	0800306d 	.word	0x0800306d
 800300c:	0800306d 	.word	0x0800306d
 8003010:	08003049 	.word	0x08003049
 8003014:	0800306d 	.word	0x0800306d
 8003018:	0800306d 	.word	0x0800306d
 800301c:	0800306d 	.word	0x0800306d
 8003020:	0800305b 	.word	0x0800305b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0202 	bic.w	r2, r2, #2
 8003032:	60da      	str	r2, [r3, #12]
      break;
 8003034:	e01d      	b.n	8003072 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0204 	bic.w	r2, r2, #4
 8003044:	60da      	str	r2, [r3, #12]
      break;
 8003046:	e014      	b.n	8003072 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0208 	bic.w	r2, r2, #8
 8003056:	60da      	str	r2, [r3, #12]
      break;
 8003058:	e00b      	b.n	8003072 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0210 	bic.w	r2, r2, #16
 8003068:	60da      	str	r2, [r3, #12]
      break;
 800306a:	e002      	b.n	8003072 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      break;
 8003070:	bf00      	nop
  }

  if (status == HAL_OK)
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d157      	bne.n	8003128 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fd7f 	bl	8003b84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <HAL_TIM_OC_Stop_IT+0x160>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d117      	bne.n	80030c0 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a1a      	ldr	r2, [r3, #32]
 8003096:	f241 1311 	movw	r3, #4369	; 0x1111
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10f      	bne.n	80030c0 <HAL_TIM_OC_Stop_IT+0xec>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a1a      	ldr	r2, [r3, #32]
 80030a6:	f240 4344 	movw	r3, #1092	; 0x444
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_OC_Stop_IT+0xec>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a1a      	ldr	r2, [r3, #32]
 80030c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10f      	bne.n	80030f0 <HAL_TIM_OC_Stop_IT+0x11c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6a1a      	ldr	r2, [r3, #32]
 80030d6:	f240 4344 	movw	r3, #1092	; 0x444
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_OC_Stop_IT+0x11c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <HAL_TIM_OC_Stop_IT+0x12c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030fe:	e013      	b.n	8003128 <HAL_TIM_OC_Stop_IT+0x154>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b04      	cmp	r3, #4
 8003104:	d104      	bne.n	8003110 <HAL_TIM_OC_Stop_IT+0x13c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800310e:	e00b      	b.n	8003128 <HAL_TIM_OC_Stop_IT+0x154>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b08      	cmp	r3, #8
 8003114:	d104      	bne.n	8003120 <HAL_TIM_OC_Stop_IT+0x14c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311e:	e003      	b.n	8003128 <HAL_TIM_OC_Stop_IT+0x154>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40012c00 	.word	0x40012c00

08003138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e041      	b.n	80031ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd ff3c 	bl	8000fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f000 fb1a 	bl	80037b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_TIM_PWM_Start+0x24>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e022      	b.n	8003242 <HAL_TIM_PWM_Start+0x6a>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d109      	bne.n	8003216 <HAL_TIM_PWM_Start+0x3e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	e015      	b.n	8003242 <HAL_TIM_PWM_Start+0x6a>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d109      	bne.n	8003230 <HAL_TIM_PWM_Start+0x58>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e008      	b.n	8003242 <HAL_TIM_PWM_Start+0x6a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e05e      	b.n	8003308 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <HAL_TIM_PWM_Start+0x82>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003258:	e013      	b.n	8003282 <HAL_TIM_PWM_Start+0xaa>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d104      	bne.n	800326a <HAL_TIM_PWM_Start+0x92>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003268:	e00b      	b.n	8003282 <HAL_TIM_PWM_Start+0xaa>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d104      	bne.n	800327a <HAL_TIM_PWM_Start+0xa2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003278:	e003      	b.n	8003282 <HAL_TIM_PWM_Start+0xaa>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fc7a 	bl	8003b84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_TIM_PWM_Start+0x138>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d107      	bne.n	80032aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIM_PWM_Start+0x138>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_TIM_PWM_Start+0xfa>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d009      	beq.n	80032d2 <HAL_TIM_PWM_Start+0xfa>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_TIM_PWM_Start+0x13c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_TIM_PWM_Start+0xfa>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a12      	ldr	r2, [pc, #72]	; (8003318 <HAL_TIM_PWM_Start+0x140>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d111      	bne.n	80032f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d010      	beq.n	8003306 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	e007      	b.n	8003306 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40012c00 	.word	0x40012c00
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800

0800331c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b02      	cmp	r3, #2
 8003330:	d122      	bne.n	8003378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b02      	cmp	r3, #2
 800333e:	d11b      	bne.n	8003378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0202 	mvn.w	r2, #2
 8003348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fa0b 	bl	800377a <HAL_TIM_IC_CaptureCallback>
 8003364:	e005      	b.n	8003372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fd20 	bl	8000dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fa0d 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b04      	cmp	r3, #4
 8003384:	d122      	bne.n	80033cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b04      	cmp	r3, #4
 8003392:	d11b      	bne.n	80033cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0204 	mvn.w	r2, #4
 800339c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f9e1 	bl	800377a <HAL_TIM_IC_CaptureCallback>
 80033b8:	e005      	b.n	80033c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fcf6 	bl	8000dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f9e3 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d122      	bne.n	8003420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d11b      	bne.n	8003420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0208 	mvn.w	r2, #8
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2204      	movs	r2, #4
 80033f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f9b7 	bl	800377a <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd fccc 	bl	8000dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f9b9 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b10      	cmp	r3, #16
 800342c:	d122      	bne.n	8003474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b10      	cmp	r3, #16
 800343a:	d11b      	bne.n	8003474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0210 	mvn.w	r2, #16
 8003444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2208      	movs	r2, #8
 800344a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f98d 	bl	800377a <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fca2 	bl	8000dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f98f 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d10e      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d107      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0201 	mvn.w	r2, #1
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f964 	bl	8003768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b8:	2b80      	cmp	r3, #128	; 0x80
 80034ba:	d107      	bne.n	80034cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fc38 	bl	8003d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f953 	bl	800379e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b20      	cmp	r3, #32
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b20      	cmp	r3, #32
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0220 	mvn.w	r2, #32
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fc03 	bl	8003d2a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003546:	2302      	movs	r3, #2
 8003548:	e048      	b.n	80035dc <HAL_TIM_OC_ConfigChannel+0xb0>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d839      	bhi.n	80035cc <HAL_TIM_OC_ConfigChannel+0xa0>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_TIM_OC_ConfigChannel+0x34>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003595 	.word	0x08003595
 8003564:	080035cd 	.word	0x080035cd
 8003568:	080035cd 	.word	0x080035cd
 800356c:	080035cd 	.word	0x080035cd
 8003570:	080035a3 	.word	0x080035a3
 8003574:	080035cd 	.word	0x080035cd
 8003578:	080035cd 	.word	0x080035cd
 800357c:	080035cd 	.word	0x080035cd
 8003580:	080035b1 	.word	0x080035b1
 8003584:	080035cd 	.word	0x080035cd
 8003588:	080035cd 	.word	0x080035cd
 800358c:	080035cd 	.word	0x080035cd
 8003590:	080035bf 	.word	0x080035bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f96a 	bl	8003874 <TIM_OC1_SetConfig>
      break;
 80035a0:	e017      	b.n	80035d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f9c9 	bl	8003940 <TIM_OC2_SetConfig>
      break;
 80035ae:	e010      	b.n	80035d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fa2c 	bl	8003a14 <TIM_OC3_SetConfig>
      break;
 80035bc:	e009      	b.n	80035d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fa8f 	bl	8003ae8 <TIM_OC4_SetConfig>
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	75fb      	strb	r3, [r7, #23]
      break;
 80035d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035da:	7dfb      	ldrb	r3, [r7, #23]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0ae      	b.n	8003760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	f200 809f 	bhi.w	8003750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	0800364d 	.word	0x0800364d
 800361c:	08003751 	.word	0x08003751
 8003620:	08003751 	.word	0x08003751
 8003624:	08003751 	.word	0x08003751
 8003628:	0800368d 	.word	0x0800368d
 800362c:	08003751 	.word	0x08003751
 8003630:	08003751 	.word	0x08003751
 8003634:	08003751 	.word	0x08003751
 8003638:	080036cf 	.word	0x080036cf
 800363c:	08003751 	.word	0x08003751
 8003640:	08003751 	.word	0x08003751
 8003644:	08003751 	.word	0x08003751
 8003648:	0800370f 	.word	0x0800370f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f90e 	bl	8003874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6999      	ldr	r1, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	619a      	str	r2, [r3, #24]
      break;
 800368a:	e064      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f954 	bl	8003940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6999      	ldr	r1, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	021a      	lsls	r2, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]
      break;
 80036cc:	e043      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f99d 	bl	8003a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0208 	orr.w	r2, r2, #8
 80036e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0204 	bic.w	r2, r2, #4
 80036f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	61da      	str	r2, [r3, #28]
      break;
 800370c:	e023      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 f9e7 	bl	8003ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69d9      	ldr	r1, [r3, #28]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	021a      	lsls	r2, r3, #8
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	61da      	str	r2, [r3, #28]
      break;
 800374e:	e002      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	75fb      	strb	r3, [r7, #23]
      break;
 8003754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a29      	ldr	r2, [pc, #164]	; (8003868 <TIM_Base_SetConfig+0xb8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00b      	beq.n	80037e0 <TIM_Base_SetConfig+0x30>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d007      	beq.n	80037e0 <TIM_Base_SetConfig+0x30>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a26      	ldr	r2, [pc, #152]	; (800386c <TIM_Base_SetConfig+0xbc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d003      	beq.n	80037e0 <TIM_Base_SetConfig+0x30>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a25      	ldr	r2, [pc, #148]	; (8003870 <TIM_Base_SetConfig+0xc0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d108      	bne.n	80037f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <TIM_Base_SetConfig+0xb8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00b      	beq.n	8003812 <TIM_Base_SetConfig+0x62>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003800:	d007      	beq.n	8003812 <TIM_Base_SetConfig+0x62>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <TIM_Base_SetConfig+0xbc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_Base_SetConfig+0x62>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <TIM_Base_SetConfig+0xc0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a07      	ldr	r2, [pc, #28]	; (8003868 <TIM_Base_SetConfig+0xb8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d103      	bne.n	8003858 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	615a      	str	r2, [r3, #20]
}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800

08003874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f023 0201 	bic.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0303 	bic.w	r3, r3, #3
 80038aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f023 0302 	bic.w	r3, r3, #2
 80038bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a1c      	ldr	r2, [pc, #112]	; (800393c <TIM_OC1_SetConfig+0xc8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10c      	bne.n	80038ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0308 	bic.w	r3, r3, #8
 80038d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 0304 	bic.w	r3, r3, #4
 80038e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a13      	ldr	r2, [pc, #76]	; (800393c <TIM_OC1_SetConfig+0xc8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d111      	bne.n	8003916 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40012c00 	.word	0x40012c00

08003940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f023 0210 	bic.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0320 	bic.w	r3, r3, #32
 800398a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <TIM_OC2_SetConfig+0xd0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10d      	bne.n	80039bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <TIM_OC2_SetConfig+0xd0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d113      	bne.n	80039ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00

08003a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <TIM_OC3_SetConfig+0xd0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10d      	bne.n	8003a8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <TIM_OC3_SetConfig+0xd0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d113      	bne.n	8003abe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	621a      	str	r2, [r3, #32]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00

08003ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	031b      	lsls	r3, r3, #12
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <TIM_OC4_SetConfig+0x98>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	40012c00 	.word	0x40012c00

08003b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	2201      	movs	r2, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1a      	ldr	r2, [r3, #32]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1a      	ldr	r2, [r3, #32]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e046      	b.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c30:	d009      	beq.n	8003c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10c      	bne.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800

08003c88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e03d      	b.n	8003d20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e042      	b.n	8003de6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fd f9a9 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2224      	movs	r2, #36	; 0x24
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fcd4 	bl	8004740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d112      	bne.n	8003e2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Receive_IT+0x26>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e00b      	b.n	8003e30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	461a      	mov	r2, r3
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fab6 	bl	8004396 <UART_Start_Receive_IT>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	e000      	b.n	8003e30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b0ba      	sub	sp, #232	; 0xe8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_UART_IRQHandler+0x66>
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fb93 	bl	80045c2 <UART_Receive_IT>
      return;
 8003e9c:	e25b      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80de 	beq.w	8004064 <HAL_UART_IRQHandler+0x22c>
 8003ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80d1 	beq.w	8004064 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xae>
 8003ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f043 0201 	orr.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_UART_IRQHandler+0xd2>
 8003ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_UART_IRQHandler+0xf6>
 8003f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	f043 0204 	orr.w	r2, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d011      	beq.n	8003f5e <HAL_UART_IRQHandler+0x126>
 8003f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 81f2 	beq.w	800434c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_UART_IRQHandler+0x14e>
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fb1e 	bl	80045c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x17a>
 8003faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d04f      	beq.n	8004052 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa28 	bl	8004408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d041      	beq.n	800404a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ff2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800400a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1d9      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d013      	beq.n	8004042 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	4a7e      	ldr	r2, [pc, #504]	; (8004218 <HAL_UART_IRQHandler+0x3e0>)
 8004020:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fae8 	bl	80015fc <HAL_DMA_Abort_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d016      	beq.n	8004060 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800403c:	4610      	mov	r0, r2
 800403e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004040:	e00e      	b.n	8004060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f993 	bl	800436e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	e00a      	b.n	8004060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f98f 	bl	800436e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e006      	b.n	8004060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f98b 	bl	800436e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800405e:	e175      	b.n	800434c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	bf00      	nop
    return;
 8004062:	e173      	b.n	800434c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	2b01      	cmp	r3, #1
 800406a:	f040 814f 	bne.w	800430c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800406e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8148 	beq.w	800430c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8141 	beq.w	800430c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80b6 	beq.w	800421c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8145 	beq.w	8004350 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ce:	429a      	cmp	r2, r3
 80040d0:	f080 813e 	bcs.w	8004350 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	f000 8088 	beq.w	80041f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004114:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004120:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800412c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1d9      	bne.n	80040e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3314      	adds	r3, #20
 800413a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004158:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800415c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004160:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800416a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e1      	bne.n	8004134 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004194:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004196:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800419a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e3      	bne.n	8004170 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c8:	f023 0310 	bic.w	r3, r3, #16
 80041cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041da:	65ba      	str	r2, [r7, #88]	; 0x58
 80041dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e3      	bne.n	80041b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd f9c7 	bl	8001586 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004206:	b29b      	uxth	r3, r3
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	b29b      	uxth	r3, r3
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8b6 	bl	8004380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004214:	e09c      	b.n	8004350 <HAL_UART_IRQHandler+0x518>
 8004216:	bf00      	nop
 8004218:	080044cd 	.word	0x080044cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004224:	b29b      	uxth	r3, r3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 808e 	beq.w	8004354 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8089 	beq.w	8004354 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004266:	647a      	str	r2, [r7, #68]	; 0x44
 8004268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800426c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e3      	bne.n	8004242 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3314      	adds	r3, #20
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	623b      	str	r3, [r7, #32]
   return(result);
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3314      	adds	r3, #20
 800429a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800429e:	633a      	str	r2, [r7, #48]	; 0x30
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e3      	bne.n	800427a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0310 	bic.w	r3, r3, #16
 80042d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042e4:	61fa      	str	r2, [r7, #28]
 80042e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	617b      	str	r3, [r7, #20]
   return(result);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e3      	bne.n	80042c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004302:	4619      	mov	r1, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f83b 	bl	8004380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800430a:	e023      	b.n	8004354 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <HAL_UART_IRQHandler+0x4f4>
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f8e5 	bl	80044f4 <UART_Transmit_IT>
    return;
 800432a:	e014      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <HAL_UART_IRQHandler+0x51e>
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f924 	bl	8004592 <UART_EndTransmit_IT>
    return;
 800434a:	e004      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
    return;
 800434c:	bf00      	nop
 800434e:	e002      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
      return;
 8004350:	bf00      	nop
 8004352:	e000      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
      return;
 8004354:	bf00      	nop
  }
}
 8004356:	37e8      	adds	r7, #232	; 0xe8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	4613      	mov	r3, r2
 80043a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2222      	movs	r2, #34	; 0x22
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0220 	orr.w	r2, r2, #32
 80043fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b095      	sub	sp, #84	; 0x54
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004430:	643a      	str	r2, [r7, #64]	; 0x40
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3314      	adds	r3, #20
 800444a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	61fb      	str	r3, [r7, #28]
   return(result);
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	64bb      	str	r3, [r7, #72]	; 0x48
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3314      	adds	r3, #20
 8004462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004464:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e5      	bne.n	8004444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	2b01      	cmp	r3, #1
 800447e:	d119      	bne.n	80044b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f023 0310 	bic.w	r3, r3, #16
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044a0:	61ba      	str	r2, [r7, #24]
 80044a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6979      	ldr	r1, [r7, #20]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	613b      	str	r3, [r7, #16]
   return(result);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044c2:	bf00      	nop
 80044c4:	3754      	adds	r7, #84	; 0x54
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff ff41 	bl	800436e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b21      	cmp	r3, #33	; 0x21
 8004506:	d13e      	bne.n	8004586 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004510:	d114      	bne.n	800453c <UART_Transmit_IT+0x48>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d110      	bne.n	800453c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800452e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	1c9a      	adds	r2, r3, #2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]
 800453a:	e008      	b.n	800454e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6211      	str	r1, [r2, #32]
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4619      	mov	r1, r3
 800455c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004570:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004580:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fed2 	bl	800435c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b08c      	sub	sp, #48	; 0x30
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b22      	cmp	r3, #34	; 0x22
 80045d4:	f040 80ae 	bne.w	8004734 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e0:	d117      	bne.n	8004612 <UART_Receive_IT+0x50>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d113      	bne.n	8004612 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004600:	b29a      	uxth	r2, r3
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	1c9a      	adds	r2, r3, #2
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28
 8004610:	e026      	b.n	8004660 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004624:	d007      	beq.n	8004636 <UART_Receive_IT+0x74>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <UART_Receive_IT+0x82>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e008      	b.n	8004656 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004650:	b2da      	uxtb	r2, r3
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29b      	uxth	r3, r3
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4619      	mov	r1, r3
 800466e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004670:	2b00      	cmp	r3, #0
 8004672:	d15d      	bne.n	8004730 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0220 	bic.w	r2, r2, #32
 8004682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004692:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d135      	bne.n	8004726 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	613b      	str	r3, [r7, #16]
   return(result);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f023 0310 	bic.w	r3, r3, #16
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e0:	623a      	str	r2, [r7, #32]
 80046e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	69f9      	ldr	r1, [r7, #28]
 80046e6:	6a3a      	ldr	r2, [r7, #32]
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e5      	bne.n	80046c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d10a      	bne.n	8004718 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fe2e 	bl	8004380 <HAL_UARTEx_RxEventCallback>
 8004724:	e002      	b.n	800472c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fc fa7c 	bl	8000c24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e002      	b.n	8004736 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3730      	adds	r7, #48	; 0x30
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800477a:	f023 030c 	bic.w	r3, r3, #12
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	430b      	orrs	r3, r1
 8004786:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <UART_SetConfig+0x114>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d103      	bne.n	80047b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047a8:	f7fd fd1a 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	e002      	b.n	80047b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7fd fd02 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80047b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009a      	lsls	r2, r3, #2
 80047c0:	441a      	add	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	4a22      	ldr	r2, [pc, #136]	; (8004858 <UART_SetConfig+0x118>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	0119      	lsls	r1, r3, #4
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009a      	lsls	r2, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <UART_SetConfig+0x118>)
 80047ee:	fba3 0302 	umull	r0, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	2064      	movs	r0, #100	; 0x64
 80047f6:	fb00 f303 	mul.w	r3, r0, r3
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	3332      	adds	r3, #50	; 0x32
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <UART_SetConfig+0x118>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480c:	4419      	add	r1, r3
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009a      	lsls	r2, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	fbb2 f2f3 	udiv	r2, r2, r3
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <UART_SetConfig+0x118>)
 8004826:	fba3 0302 	umull	r0, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	2064      	movs	r0, #100	; 0x64
 800482e:	fb00 f303 	mul.w	r3, r0, r3
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	3332      	adds	r3, #50	; 0x32
 8004838:	4a07      	ldr	r2, [pc, #28]	; (8004858 <UART_SetConfig+0x118>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	f003 020f 	and.w	r2, r3, #15
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	440a      	add	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40013800 	.word	0x40013800
 8004858:	51eb851f 	.word	0x51eb851f

0800485c <memset>:
 800485c:	4603      	mov	r3, r0
 800485e:	4402      	add	r2, r0
 8004860:	4293      	cmp	r3, r2
 8004862:	d100      	bne.n	8004866 <memset+0xa>
 8004864:	4770      	bx	lr
 8004866:	f803 1b01 	strb.w	r1, [r3], #1
 800486a:	e7f9      	b.n	8004860 <memset+0x4>

0800486c <__libc_init_array>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	2600      	movs	r6, #0
 8004870:	4d0c      	ldr	r5, [pc, #48]	; (80048a4 <__libc_init_array+0x38>)
 8004872:	4c0d      	ldr	r4, [pc, #52]	; (80048a8 <__libc_init_array+0x3c>)
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	42a6      	cmp	r6, r4
 800487a:	d109      	bne.n	8004890 <__libc_init_array+0x24>
 800487c:	f000 f81a 	bl	80048b4 <_init>
 8004880:	2600      	movs	r6, #0
 8004882:	4d0a      	ldr	r5, [pc, #40]	; (80048ac <__libc_init_array+0x40>)
 8004884:	4c0a      	ldr	r4, [pc, #40]	; (80048b0 <__libc_init_array+0x44>)
 8004886:	1b64      	subs	r4, r4, r5
 8004888:	10a4      	asrs	r4, r4, #2
 800488a:	42a6      	cmp	r6, r4
 800488c:	d105      	bne.n	800489a <__libc_init_array+0x2e>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	f855 3b04 	ldr.w	r3, [r5], #4
 8004894:	4798      	blx	r3
 8004896:	3601      	adds	r6, #1
 8004898:	e7ee      	b.n	8004878 <__libc_init_array+0xc>
 800489a:	f855 3b04 	ldr.w	r3, [r5], #4
 800489e:	4798      	blx	r3
 80048a0:	3601      	adds	r6, #1
 80048a2:	e7f2      	b.n	800488a <__libc_init_array+0x1e>
 80048a4:	08004908 	.word	0x08004908
 80048a8:	08004908 	.word	0x08004908
 80048ac:	08004908 	.word	0x08004908
 80048b0:	0800490c 	.word	0x0800490c

080048b4 <_init>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	bf00      	nop
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr

080048c0 <_fini>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr
