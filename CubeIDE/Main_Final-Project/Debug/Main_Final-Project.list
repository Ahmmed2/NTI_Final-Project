
Main_Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000251c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002664  08002664  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002664  08002664  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002664  08002664  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002664  08002664  00012664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002668  08002668  00012668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800266c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000001c  08002688  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002688  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a1d  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b2  00000000  00000000  00028aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  0002a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000685  00000000  00000000  0002aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001433  00000000  00000000  0002b15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b20  00000000  00000000  0002c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000805b4  00000000  00000000  000360b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021d0  00000000  00000000  000b6664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000b8834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002610 	.word	0x08002610

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002610 	.word	0x08002610

0800014c <NRF_ChipSelect>:

uint8_t Counter = 0 ;
extern UART_HandleTypeDef huart1;

void NRF_ChipSelect (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_RESET) ;
 8000150:	2200      	movs	r2, #0
 8000152:	2104      	movs	r1, #4
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <NRF_ChipSelect+0x14>)
 8000156:	f000 ff87 	bl	8001068 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <NRF_ChipUnSelect>:

void NRF_ChipUnSelect (void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_SET) ;
 8000168:	2201      	movs	r2, #1
 800016a:	2104      	movs	r1, #4
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <NRF_ChipUnSelect+0x14>)
 800016e:	f000 ff7b 	bl	8001068 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <NRF_ChipEnable>:


void NRF_ChipEnable (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET) ;
 8000180:	2201      	movs	r2, #1
 8000182:	2102      	movs	r1, #2
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <NRF_ChipEnable+0x14>)
 8000186:	f000 ff6f 	bl	8001068 <HAL_GPIO_WritePin>
}
 800018a:	bf00      	nop
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40010800 	.word	0x40010800

08000194 <NRF_ChipDisable>:

void NRF_ChipDisable (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET) ;
 8000198:	2200      	movs	r2, #0
 800019a:	2102      	movs	r1, #2
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <NRF_ChipDisable+0x14>)
 800019e:	f000 ff63 	bl	8001068 <HAL_GPIO_WritePin>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800

080001ac <NRF_voidWriteByteReg>:
 * Return : None
 * note :
 *
 */
void NRF_voidWriteByteReg(uint8_t Copy_u8Reg , uint8_t Copy_u8RegData)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	460a      	mov	r2, r1
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[2] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	733b      	strb	r3, [r7, #12]

	/* Data to be written */
	Local_Buffer[1] =  Copy_u8RegData ;
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	737b      	strb	r3, [r7, #13]

	/* Chip Select */
	NRF_ChipSelect() ;
 80001ca:	f7ff ffbf 	bl	800014c <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, Local_Buffer,2,1000) ;
 80001ce:	f107 010c 	add.w	r1, r7, #12
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	2202      	movs	r2, #2
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <NRF_voidWriteByteReg+0x40>)
 80001da:	f001 fc0b 	bl	80019f4 <HAL_SPI_Transmit>

	/* Release"Unselect"  device */
	NRF_ChipUnSelect () ;
 80001de:	f7ff ffc1 	bl	8000164 <NRF_ChipUnSelect>
}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000038 	.word	0x20000038

080001f0 <NRF_voidWriteMultiByteReg>:
 * note :
 *
 */

void NRF_voidWriteMultiByteReg(uint8_t Copy_u8Reg , uint8_t *Data , uint8_t Copy_u8Size)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	6039      	str	r1, [r7, #0]
 80001fa:	71fb      	strb	r3, [r7, #7]
 80001fc:	4613      	mov	r3, r2
 80001fe:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[1] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	f043 0320 	orr.w	r3, r3, #32
 8000206:	b2db      	uxtb	r3, r3
 8000208:	733b      	strb	r3, [r7, #12]

	/* Chip Select */
	NRF_ChipSelect() ;
 800020a:	f7ff ff9f 	bl	800014c <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1,Local_Buffer,1,100) ;
 800020e:	f107 010c 	add.w	r1, r7, #12
 8000212:	2364      	movs	r3, #100	; 0x64
 8000214:	2201      	movs	r2, #1
 8000216:	4808      	ldr	r0, [pc, #32]	; (8000238 <NRF_voidWriteMultiByteReg+0x48>)
 8000218:	f001 fbec 	bl	80019f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF_SPI1,Data,Copy_u8Size,1000) ;
 800021c:	79bb      	ldrb	r3, [r7, #6]
 800021e:	b29a      	uxth	r2, r3
 8000220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000224:	6839      	ldr	r1, [r7, #0]
 8000226:	4804      	ldr	r0, [pc, #16]	; (8000238 <NRF_voidWriteMultiByteReg+0x48>)
 8000228:	f001 fbe4 	bl	80019f4 <HAL_SPI_Transmit>

	/* Release"Unselect"device */
	NRF_ChipUnSelect () ;
 800022c:	f7ff ff9a 	bl	8000164 <NRF_ChipUnSelect>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000038 	.word	0x20000038

0800023c <NRF_u8ReadByteReg>:
 * Return : Register Value
 * note :
 *
 */
uint8_t NRF_u8ReadByteReg(uint8_t Copy_u8Reg)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_Data = 0 ;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]

	/* Chip Select */
	NRF_ChipSelect() ;
 800024a:	f7ff ff7f 	bl	800014c <NRF_ChipSelect>

	/* Receive Data */
	HAL_SPI_Transmit(NRF_SPI1,&Copy_u8Reg,1,100 ) ;
 800024e:	1df9      	adds	r1, r7, #7
 8000250:	2364      	movs	r3, #100	; 0x64
 8000252:	2201      	movs	r2, #1
 8000254:	480b      	ldr	r0, [pc, #44]	; (8000284 <NRF_u8ReadByteReg+0x48>)
 8000256:	f001 fbcd 	bl	80019f4 <HAL_SPI_Transmit>
	HAL_Delay(100) ;
 800025a:	2064      	movs	r0, #100	; 0x64
 800025c:	f000 fc78 	bl	8000b50 <HAL_Delay>
	HAL_SPI_Receive(NRF_SPI1,&Local_Data,1,1000) ;
 8000260:	f107 010f 	add.w	r1, r7, #15
 8000264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000268:	2201      	movs	r2, #1
 800026a:	4806      	ldr	r0, [pc, #24]	; (8000284 <NRF_u8ReadByteReg+0x48>)
 800026c:	f001 fd05 	bl	8001c7a <HAL_SPI_Receive>
	HAL_Delay(100) ;
 8000270:	2064      	movs	r0, #100	; 0x64
 8000272:	f000 fc6d 	bl	8000b50 <HAL_Delay>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 8000276:	f7ff ff75 	bl	8000164 <NRF_ChipUnSelect>

	return Local_Data ;
 800027a:	7bfb      	ldrb	r3, [r7, #15]
}
 800027c:	4618      	mov	r0, r3
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000038 	.word	0x20000038

08000288 <NRF_voidCommandSet>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidCommandSet (uint8_t Copy_u8Command )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
	/* Chip Select */
	NRF_ChipSelect() ;
 8000292:	f7ff ff5b 	bl	800014c <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, &Copy_u8Command, 1 ,100) ;
 8000296:	1df9      	adds	r1, r7, #7
 8000298:	2364      	movs	r3, #100	; 0x64
 800029a:	2201      	movs	r2, #1
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <NRF_voidCommandSet+0x28>)
 800029e:	f001 fba9 	bl	80019f4 <HAL_SPI_Transmit>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 80002a2:	f7ff ff5f 	bl	8000164 <NRF_ChipUnSelect>
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000038 	.word	0x20000038

080002b4 <NRF_voidInit>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidInit ()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	/* Disable Chip */
	NRF_ChipDisable () ;
 80002b8:	f7ff ff6c 	bl	8000194 <NRF_ChipDisable>

	/* Reset All Registers */
	//NRF_voidResetNRF(0X00) ;

	/* Config Init */
	NRF_voidWriteByteReg(CONFIG,0x00) ;
 80002bc:	2100      	movs	r1, #0
 80002be:	2000      	movs	r0, #0
 80002c0:	f7ff ff74 	bl	80001ac <NRF_voidWriteByteReg>

	/* EN_AA Init "NO ACK is Used" */
	NRF_voidWriteByteReg(EN_AA,0x00) ;
 80002c4:	2100      	movs	r1, #0
 80002c6:	2001      	movs	r0, #1
 80002c8:	f7ff ff70 	bl	80001ac <NRF_voidWriteByteReg>

	/* EN_RXADDR Init "Disable Data pipes for now"  */
	NRF_voidWriteByteReg(EN_RXADDR,0x00) ;
 80002cc:	2100      	movs	r1, #0
 80002ce:	2002      	movs	r0, #2
 80002d0:	f7ff ff6c 	bl	80001ac <NRF_voidWriteByteReg>

	/* SETUP_AW Init "Width of data pipe Addresses" */
	NRF_voidWriteByteReg(SETUP_AW,0x03) ;	  	  //5 Byte Address Width
 80002d4:	2103      	movs	r1, #3
 80002d6:	2003      	movs	r0, #3
 80002d8:	f7ff ff68 	bl	80001ac <NRF_voidWriteByteReg>

	/* SETUP_RETR Init "Auto Transmit time " */
	NRF_voidWriteByteReg(SETUP_RETR,0x00) ;	  //Disable Auto Transmit
 80002dc:	2100      	movs	r1, #0
 80002de:	2004      	movs	r0, #4
 80002e0:	f7ff ff64 	bl	80001ac <NRF_voidWriteByteReg>

	/* RF_CH Init "Channel Number" */
	NRF_voidWriteByteReg(RF_CH,0x00) ;	  	  //Disable for now will be configured later
 80002e4:	2100      	movs	r1, #0
 80002e6:	2005      	movs	r0, #5
 80002e8:	f7ff ff60 	bl	80001ac <NRF_voidWriteByteReg>

	/* RF_SETUP Init "BaudRate , Power" */
	NRF_voidWriteByteReg(RF_SETUP,0x0E) ;	   	   //0dBM, 2Mbps
 80002ec:	210e      	movs	r1, #14
 80002ee:	2006      	movs	r0, #6
 80002f0:	f7ff ff5c 	bl	80001ac <NRF_voidWriteByteReg>

	/* Enable Chip */
	NRF_ChipEnable () ;
 80002f4:	f7ff ff42 	bl	800017c <NRF_ChipEnable>


}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <NRF_voidTransmitterMode>:
 * note :
 *
 */

void NRF_voidTransmitterMode (uint8_t * Address ,uint8_t Copy_u8Channel_Number )
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
	/* Disable Chip */
	NRF_ChipDisable () ;
 8000308:	f7ff ff44 	bl	8000194 <NRF_ChipDisable>

	/* Select Channel */
	NRF_voidWriteByteReg(RF_CH,Copy_u8Channel_Number) ;
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	4619      	mov	r1, r3
 8000310:	2005      	movs	r0, #5
 8000312:	f7ff ff4b 	bl	80001ac <NRF_voidWriteByteReg>

	/* Transmit Address */
	NRF_voidWriteMultiByteReg(TX_ADDR,Address,5) ;
 8000316:	2205      	movs	r2, #5
 8000318:	6879      	ldr	r1, [r7, #4]
 800031a:	2010      	movs	r0, #16
 800031c:	f7ff ff68 	bl	80001f0 <NRF_voidWriteMultiByteReg>

	/* Power up Device and select the device as TX */
	uint8_t Temp ;
	Temp = NRF_u8ReadByteReg(CONFIG);
 8000320:	2000      	movs	r0, #0
 8000322:	f7ff ff8b 	bl	800023c <NRF_u8ReadByteReg>
 8000326:	4603      	mov	r3, r0
 8000328:	73fb      	strb	r3, [r7, #15]
	Temp = Temp | (1<<1) | (0<<0) ;   // 0b0000 0010
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	f043 0302 	orr.w	r3, r3, #2
 8000330:	73fb      	strb	r3, [r7, #15]
	NRF_voidWriteByteReg(CONFIG,0x02) ;
 8000332:	2102      	movs	r1, #2
 8000334:	2000      	movs	r0, #0
 8000336:	f7ff ff39 	bl	80001ac <NRF_voidWriteByteReg>
	HAL_Delay(100) ;
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f000 fc08 	bl	8000b50 <HAL_Delay>

	/* Enable Chip */
	NRF_ChipEnable () ;
 8000340:	f7ff ff1c 	bl	800017c <NRF_ChipEnable>


}
 8000344:	bf00      	nop
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <NRF_voidSendData>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidSendData (uint8_t * Data )
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	/* Chip Select  */
	NRF_ChipSelect() ;
 8000354:	f7ff fefa 	bl	800014c <NRF_ChipSelect>

   uint8_t Temp = W_TX_PAYLOAD ;
 8000358:	23a0      	movs	r3, #160	; 0xa0
 800035a:	73bb      	strb	r3, [r7, #14]

   /* Get the Receiver ready , Next Pay-Load is Data */
   HAL_SPI_Transmit(NRF_SPI1, &Temp, 1 , 100) ;
 800035c:	f107 010e 	add.w	r1, r7, #14
 8000360:	2364      	movs	r3, #100	; 0x64
 8000362:	2201      	movs	r2, #1
 8000364:	4817      	ldr	r0, [pc, #92]	; (80003c4 <NRF_voidSendData+0x78>)
 8000366:	f001 fb45 	bl	80019f4 <HAL_SPI_Transmit>

   /* Send Pay-Load "Data" */
   HAL_SPI_Transmit(NRF_SPI1, Data, 32 , 1000) ;
 800036a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036e:	2220      	movs	r2, #32
 8000370:	6879      	ldr	r1, [r7, #4]
 8000372:	4814      	ldr	r0, [pc, #80]	; (80003c4 <NRF_voidSendData+0x78>)
 8000374:	f001 fb3e 	bl	80019f4 <HAL_SPI_Transmit>

	/* Chip UnSelect  */
	NRF_ChipUnSelect() ;
 8000378:	f7ff fef4 	bl	8000164 <NRF_ChipUnSelect>

	/* Delay */
	HAL_Delay(1) ;
 800037c:	2001      	movs	r0, #1
 800037e:	f000 fbe7 	bl	8000b50 <HAL_Delay>

	/* Check if TX Buffer is empty or not */
	uint8_t Local_FIFOStatus ;
	Local_FIFOStatus = NRF_u8ReadByteReg(FIFO_STATUS) ;
 8000382:	2017      	movs	r0, #23
 8000384:	f7ff ff5a 	bl	800023c <NRF_u8ReadByteReg>
 8000388:	4603      	mov	r3, r0
 800038a:	73fb      	strb	r3, [r7, #15]



	// 4 --> TX_EMPTY(1)
	if ((Local_FIFOStatus & (1<<4)))
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	f003 0310 	and.w	r3, r3, #16
 8000392:	2b00      	cmp	r3, #0
 8000394:	d011      	beq.n	80003ba <NRF_voidSendData+0x6e>
	{
		/* Put Any-Condition To Check */

		Temp = FLUSH_TX ;
 8000396:	23e1      	movs	r3, #225	; 0xe1
 8000398:	73bb      	strb	r3, [r7, #14]
		/* Flush TX */
		NRF_voidCommandSet(Temp);
 800039a:	7bbb      	ldrb	r3, [r7, #14]
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff73 	bl	8000288 <NRF_voidCommandSet>

		// Reset FIFO_STATUS
		NRF_voidResetNRF(FIFO_STATUS) ;
 80003a2:	2017      	movs	r0, #23
 80003a4:	f000 f812 	bl	80003cc <NRF_voidResetNRF>

		/* For Debug */
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12) ;
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4806      	ldr	r0, [pc, #24]	; (80003c8 <NRF_voidSendData+0x7c>)
 80003ae:	f000 fe73 	bl	8001098 <HAL_GPIO_TogglePin>
		HAL_Delay(1000) ;
 80003b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b6:	f000 fbcb 	bl	8000b50 <HAL_Delay>


	}


}
 80003ba:	bf00      	nop
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000038 	.word	0x20000038
 80003c8:	40010c00 	.word	0x40010c00

080003cc <NRF_voidResetNRF>:
 *
 */


void NRF_voidResetNRF(uint8_t Copy_u8REG)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8REG == STATUS)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b07      	cmp	r3, #7
 80003da:	d104      	bne.n	80003e6 <NRF_voidResetNRF+0x1a>
	{
		NRF_voidWriteByteReg(STATUS, 0x00);
 80003dc:	2100      	movs	r1, #0
 80003de:	2007      	movs	r0, #7
 80003e0:	f7ff fee4 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
	NRF_voidWriteByteReg(DYNPD, 0);
	NRF_voidWriteByteReg(FEATURE, 0);
	}
}
 80003e4:	e090      	b.n	8000508 <NRF_voidResetNRF+0x13c>
	else if (Copy_u8REG == FIFO_STATUS)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	2b17      	cmp	r3, #23
 80003ea:	d104      	bne.n	80003f6 <NRF_voidResetNRF+0x2a>
		NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 80003ec:	2111      	movs	r1, #17
 80003ee:	2017      	movs	r0, #23
 80003f0:	f7ff fedc 	bl	80001ac <NRF_voidWriteByteReg>
}
 80003f4:	e088      	b.n	8000508 <NRF_voidResetNRF+0x13c>
	NRF_voidWriteByteReg(CONFIG, 0x08);
 80003f6:	2108      	movs	r1, #8
 80003f8:	2000      	movs	r0, #0
 80003fa:	f7ff fed7 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_AA, 0x3F);
 80003fe:	213f      	movs	r1, #63	; 0x3f
 8000400:	2001      	movs	r0, #1
 8000402:	f7ff fed3 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_RXADDR, 0x03);
 8000406:	2103      	movs	r1, #3
 8000408:	2002      	movs	r0, #2
 800040a:	f7ff fecf 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_AW, 0x03);
 800040e:	2103      	movs	r1, #3
 8000410:	2003      	movs	r0, #3
 8000412:	f7ff fecb 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_RETR, 0x03);
 8000416:	2103      	movs	r1, #3
 8000418:	2004      	movs	r0, #4
 800041a:	f7ff fec7 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_CH, 0x02);
 800041e:	2102      	movs	r1, #2
 8000420:	2005      	movs	r0, #5
 8000422:	f7ff fec3 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_SETUP, 0x0E);
 8000426:	210e      	movs	r1, #14
 8000428:	2006      	movs	r0, #6
 800042a:	f7ff febf 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(STATUS, 0x00);
 800042e:	2100      	movs	r1, #0
 8000430:	2007      	movs	r0, #7
 8000432:	f7ff febb 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(OBSERVE_TX, 0x00);
 8000436:	2100      	movs	r1, #0
 8000438:	2008      	movs	r0, #8
 800043a:	f7ff feb7 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(CD, 0x00);
 800043e:	2100      	movs	r1, #0
 8000440:	2009      	movs	r0, #9
 8000442:	f7ff feb3 	bl	80001ac <NRF_voidWriteByteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000446:	4a32      	ldr	r2, [pc, #200]	; (8000510 <NRF_voidResetNRF+0x144>)
 8000448:	f107 0318 	add.w	r3, r7, #24
 800044c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000450:	6018      	str	r0, [r3, #0]
 8000452:	3304      	adds	r3, #4
 8000454:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000456:	f107 0318 	add.w	r3, r7, #24
 800045a:	2205      	movs	r2, #5
 800045c:	4619      	mov	r1, r3
 800045e:	200a      	movs	r0, #10
 8000460:	f7ff fec6 	bl	80001f0 <NRF_voidWriteMultiByteReg>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000464:	4a2b      	ldr	r2, [pc, #172]	; (8000514 <NRF_voidResetNRF+0x148>)
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800046e:	6018      	str	r0, [r3, #0]
 8000470:	3304      	adds	r3, #4
 8000472:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	2205      	movs	r2, #5
 800047a:	4619      	mov	r1, r3
 800047c:	200b      	movs	r0, #11
 800047e:	f7ff feb7 	bl	80001f0 <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P2, 0xC3);
 8000482:	21c3      	movs	r1, #195	; 0xc3
 8000484:	200c      	movs	r0, #12
 8000486:	f7ff fe91 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P3, 0xC4);
 800048a:	21c4      	movs	r1, #196	; 0xc4
 800048c:	200d      	movs	r0, #13
 800048e:	f7ff fe8d 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P4, 0xC5);
 8000492:	21c5      	movs	r1, #197	; 0xc5
 8000494:	200e      	movs	r0, #14
 8000496:	f7ff fe89 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P5, 0xC6);
 800049a:	21c6      	movs	r1, #198	; 0xc6
 800049c:	200f      	movs	r0, #15
 800049e:	f7ff fe85 	bl	80001ac <NRF_voidWriteByteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80004a2:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <NRF_voidResetNRF+0x144>)
 80004a4:	f107 0308 	add.w	r3, r7, #8
 80004a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ac:	6018      	str	r0, [r3, #0]
 80004ae:	3304      	adds	r3, #4
 80004b0:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(TX_ADDR, tx_addr_def, 5);
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	2205      	movs	r2, #5
 80004b8:	4619      	mov	r1, r3
 80004ba:	2010      	movs	r0, #16
 80004bc:	f7ff fe98 	bl	80001f0 <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_PW_P0, 0);
 80004c0:	2100      	movs	r1, #0
 80004c2:	2011      	movs	r0, #17
 80004c4:	f7ff fe72 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P1, 0);
 80004c8:	2100      	movs	r1, #0
 80004ca:	2012      	movs	r0, #18
 80004cc:	f7ff fe6e 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P2, 0);
 80004d0:	2100      	movs	r1, #0
 80004d2:	2013      	movs	r0, #19
 80004d4:	f7ff fe6a 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P3, 0);
 80004d8:	2100      	movs	r1, #0
 80004da:	2014      	movs	r0, #20
 80004dc:	f7ff fe66 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P4, 0);
 80004e0:	2100      	movs	r1, #0
 80004e2:	2015      	movs	r0, #21
 80004e4:	f7ff fe62 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
 80004e8:	2100      	movs	r1, #0
 80004ea:	2016      	movs	r0, #22
 80004ec:	f7ff fe5e 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 80004f0:	2111      	movs	r1, #17
 80004f2:	2017      	movs	r0, #23
 80004f4:	f7ff fe5a 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(DYNPD, 0);
 80004f8:	2100      	movs	r1, #0
 80004fa:	201c      	movs	r0, #28
 80004fc:	f7ff fe56 	bl	80001ac <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FEATURE, 0);
 8000500:	2100      	movs	r1, #0
 8000502:	201d      	movs	r0, #29
 8000504:	f7ff fe52 	bl	80001ac <NRF_voidWriteByteReg>
}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	08002628 	.word	0x08002628
 8000514:	08002630 	.word	0x08002630

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fab5 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f81d 	bl	8000560 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8000526:	f000 f8fd 	bl	8000724 <MX_GPIO_Init>
  MX_SPI1_Init();
 800052a:	f000 f853 	bl	80005d4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800052e:	f000 f8cf 	bl	80006d0 <MX_USART1_UART_Init>
  NRF_voidInit();
 8000532:	f7ff febf 	bl	80002b4 <NRF_voidInit>
  NRF_voidTransmitterMode(TxAddress, 10 ) ;
 8000536:	210a      	movs	r1, #10
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x40>)
 800053a:	f7ff fedf 	bl	80002fc <NRF_voidTransmitterMode>

  /* USER CODE BEGIN 2 */
  DataTransfer_t Data_Tx ;
  Data_Tx.Speed = 25 ;
 800053e:	2319      	movs	r3, #25
 8000540:	713b      	strb	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_NRF_Send_Number(Data_Tx.Speed)  ;
 8000542:	793b      	ldrb	r3, [r7, #4]
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f87b 	bl	8000640 <HAL_NRF_Send_Number>
	  NRF_voidSendData(TxData2) ;
 800054a:	4804      	ldr	r0, [pc, #16]	; (800055c <main+0x44>)
 800054c:	f7ff fefe 	bl	800034c <NRF_voidSendData>
	  HAL_NRF_Send_Number(36)   ;
 8000550:	2024      	movs	r0, #36	; 0x24
 8000552:	f000 f875 	bl	8000640 <HAL_NRF_Send_Number>
	  HAL_NRF_Send_Number(Data_Tx.Speed)  ;
 8000556:	e7f4      	b.n	8000542 <main+0x2a>
 8000558:	20000000 	.word	0x20000000
 800055c:	20000008 	.word	0x20000008

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b090      	sub	sp, #64	; 0x40
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2228      	movs	r2, #40	; 0x28
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 f822 	bl	80025b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000582:	2301      	movs	r3, #1
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058c:	2300      	movs	r3, #0
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fd99 	bl	80010cc <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80005a0:	f000 f952 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f807 	bl	80015d0 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005c8:	f000 f93e 	bl	8000848 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3740      	adds	r7, #64	; 0x40
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_SPI1_Init+0x64>)
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_SPI1_Init+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_SPI1_Init+0x64>)
 80005e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_SPI1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_SPI1_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_SPI1_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_SPI1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_SPI1_Init+0x64>)
 8000600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000604:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_SPI1_Init+0x64>)
 8000608:	2208      	movs	r2, #8
 800060a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_SPI1_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_SPI1_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_SPI1_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_SPI1_Init+0x64>)
 8000620:	220a      	movs	r2, #10
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_SPI1_Init+0x64>)
 8000626:	f001 f961 	bl	80018ec <HAL_SPI_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000630:	f000 f90a 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000038 	.word	0x20000038
 800063c:	40013000 	.word	0x40013000

08000640 <HAL_NRF_Send_Number>:
void HAL_NRF_Send_Number(uint32_t Copy_u32Number)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	uint8_t Local_u8Number_Element = 0  ;
 8000648:	2300      	movs	r3, #0
 800064a:	75fb      	strb	r3, [r7, #23]
	uint8_t Main_Arr[3] ;
	uint8_t Reverted_Arr[3] ;

    /* Reversing the digits */
    while (Copy_u32Number > 0)
 800064c:	e01a      	b.n	8000684 <HAL_NRF_Send_Number+0x44>
    {
    	Main_Arr[Local_u8Number_Element] = (Copy_u32Number % 10) + 48 ;
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <HAL_NRF_Send_Number+0x8c>)
 8000652:	fba3 2301 	umull	r2, r3, r3, r1
 8000656:	08da      	lsrs	r2, r3, #3
 8000658:	4613      	mov	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4413      	add	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	1aca      	subs	r2, r1, r3
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	3230      	adds	r2, #48	; 0x30
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	3318      	adds	r3, #24
 800066c:	443b      	add	r3, r7
 800066e:	f803 2c08 	strb.w	r2, [r3, #-8]
    	Copy_u32Number = Copy_u32Number / 10 ;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a15      	ldr	r2, [pc, #84]	; (80006cc <HAL_NRF_Send_Number+0x8c>)
 8000676:	fba2 2303 	umull	r2, r3, r2, r3
 800067a:	08db      	lsrs	r3, r3, #3
 800067c:	607b      	str	r3, [r7, #4]
    	Local_u8Number_Element++ ;
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	3301      	adds	r3, #1
 8000682:	75fb      	strb	r3, [r7, #23]
    while (Copy_u32Number > 0)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e1      	bne.n	800064e <HAL_NRF_Send_Number+0xe>
    }


    /* Copy the elements of Main_Arr --> Reverted_Arr then send them to UART in correct order */

    for (uint8_t Revert_Index = 0 ; Revert_Index<Local_u8Number_Element ; Revert_Index++)
 800068a:	2300      	movs	r3, #0
 800068c:	75bb      	strb	r3, [r7, #22]
 800068e:	e00f      	b.n	80006b0 <HAL_NRF_Send_Number+0x70>
    {
    	Reverted_Arr[Revert_Index] = Main_Arr[Local_u8Number_Element-Revert_Index-1] ;
 8000690:	7dfa      	ldrb	r2, [r7, #23]
 8000692:	7dbb      	ldrb	r3, [r7, #22]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	1e5a      	subs	r2, r3, #1
 8000698:	7dbb      	ldrb	r3, [r7, #22]
 800069a:	3218      	adds	r2, #24
 800069c:	443a      	add	r2, r7
 800069e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80006a2:	3318      	adds	r3, #24
 80006a4:	443b      	add	r3, r7
 80006a6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t Revert_Index = 0 ; Revert_Index<Local_u8Number_Element ; Revert_Index++)
 80006aa:	7dbb      	ldrb	r3, [r7, #22]
 80006ac:	3301      	adds	r3, #1
 80006ae:	75bb      	strb	r3, [r7, #22]
 80006b0:	7dba      	ldrb	r2, [r7, #22]
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d3eb      	bcc.n	8000690 <HAL_NRF_Send_Number+0x50>
    }

    	NRF_voidSendData(Reverted_Arr) ;
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fe45 	bl	800034c <NRF_voidSendData>
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	cccccccd 	.word	0xcccccccd

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART1_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART1_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART1_UART_Init+0x4c>)
 8000708:	f001 fe78 	bl	80023fc <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f899 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000090 	.word	0x20000090
 8000720:	40013800 	.word	0x40013800

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000738:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <MX_GPIO_Init+0x114>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a3e      	ldr	r2, [pc, #248]	; (8000838 <MX_GPIO_Init+0x114>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <MX_GPIO_Init+0x114>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0310 	and.w	r3, r3, #16
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000750:	4b39      	ldr	r3, [pc, #228]	; (8000838 <MX_GPIO_Init+0x114>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a38      	ldr	r2, [pc, #224]	; (8000838 <MX_GPIO_Init+0x114>)
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <MX_GPIO_Init+0x114>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0320 	and.w	r3, r3, #32
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <MX_GPIO_Init+0x114>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a32      	ldr	r2, [pc, #200]	; (8000838 <MX_GPIO_Init+0x114>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <MX_GPIO_Init+0x114>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MX_GPIO_Init+0x114>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <MX_GPIO_Init+0x114>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_GPIO_Init+0x114>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	4827      	ldr	r0, [pc, #156]	; (800083c <MX_GPIO_Init+0x118>)
 80007a0:	f000 fc62 	bl	8001068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin|NRF_CSNE_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2106      	movs	r1, #6
 80007a8:	4825      	ldr	r0, [pc, #148]	; (8000840 <MX_GPIO_Init+0x11c>)
 80007aa:	f000 fc5d 	bl	8001068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|LCD_D4_Pin|LCD_D5_Pin
 80007ae:	2200      	movs	r2, #0
 80007b0:	f241 71f0 	movw	r1, #6128	; 0x17f0
 80007b4:	4823      	ldr	r0, [pc, #140]	; (8000844 <MX_GPIO_Init+0x120>)
 80007b6:	f000 fc57 	bl	8001068 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_EN_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Debug_LED_Pin */
  GPIO_InitStruct.Pin = Debug_LED_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Debug_LED_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	481a      	ldr	r0, [pc, #104]	; (800083c <MX_GPIO_Init+0x118>)
 80007d4:	f000 fac4 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSNE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSNE_Pin;
 80007d8:	2306      	movs	r3, #6
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4814      	ldr	r0, [pc, #80]	; (8000840 <MX_GPIO_Init+0x11c>)
 80007f0:	f000 fab6 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin LCD_EN_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 80007f4:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 80007f8:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin|LCD_EN_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2302      	movs	r3, #2
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4619      	mov	r1, r3
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_GPIO_Init+0x120>)
 800080e:	f000 faa7 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_GPIO_Init+0x120>)
 800082c:	f000 fa98 	bl	8000d60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	40011000 	.word	0x40011000
 8000840:	40010800 	.word	0x40010800
 8000844:	40010c00 	.word	0x40010c00

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_MspInit+0x5c>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <HAL_MspInit+0x5c>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6193      	str	r3, [r2, #24]
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_MspInit+0x5c>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_MspInit+0x5c>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_MspInit+0x5c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_MspInit+0x5c>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_MspInit+0x60>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_MspInit+0x60>)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010000 	.word	0x40010000

080008b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <HAL_SPI_MspInit+0x88>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d12f      	bne.n	8000938 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <HAL_SPI_MspInit+0x8c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <HAL_SPI_MspInit+0x8c>)
 80008de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_SPI_MspInit+0x8c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_SPI_MspInit+0x8c>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <HAL_SPI_MspInit+0x8c>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_SPI_MspInit+0x8c>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_NRF_SCK_Pin|SPI1_NRF_MOSI_Pin;
 8000908:	23a0      	movs	r3, #160	; 0xa0
 800090a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4619      	mov	r1, r3
 800091a:	480b      	ldr	r0, [pc, #44]	; (8000948 <HAL_SPI_MspInit+0x90>)
 800091c:	f000 fa20 	bl	8000d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_NRF_MISO_Pin;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <HAL_SPI_MspInit+0x90>)
 8000934:	f000 fa14 	bl	8000d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000938:	bf00      	nop
 800093a:	3720      	adds	r7, #32
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40013000 	.word	0x40013000
 8000944:	40021000 	.word	0x40021000
 8000948:	40010800 	.word	0x40010800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <HAL_UART_MspInit+0x8c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d131      	bne.n	80009d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <HAL_UART_MspInit+0x90>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <HAL_UART_MspInit+0x90>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_UART_MspInit+0x90>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_UART_MspInit+0x90>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <HAL_UART_MspInit+0x90>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_UART_MspInit+0x90>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800099c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <HAL_UART_MspInit+0x94>)
 80009b2:	f000 f9d5 	bl	8000d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <HAL_UART_MspInit+0x94>)
 80009cc:	f000 f9c8 	bl	8000d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40013800 	.word	0x40013800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010800 	.word	0x40010800

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2a:	f000 f875 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
	...

08000a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff fff7 	bl	8000a32 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a46:	490c      	ldr	r1, [pc, #48]	; (8000a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a5c:	4c09      	ldr	r4, [pc, #36]	; (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f001 fdad 	bl	80025c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fd53 	bl	8000518 <main>
  bx lr
 8000a72:	4770      	bx	lr
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a7c:	0800266c 	.word	0x0800266c
  ldr r2, =_sbss
 8000a80:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a84:	200000dc 	.word	0x200000dc

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f92b 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fed4 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f935 	bl	8000d46 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f90b 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000010 	.word	0x20000010
 8000b10:	20000018 	.word	0x20000018
 8000b14:	20000014 	.word	0x20000014

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000018 	.word	0x20000018
 8000b38:	200000d8 	.word	0x200000d8

08000b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	200000d8 	.word	0x200000d8

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff fff0 	bl	8000b3c <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffe0 	bl	8000b3c <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000018 	.word	0x20000018

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff90 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff49 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff5e 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff90 	bl	8000c50 <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5f 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffb0 	bl	8000cb4 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b08b      	sub	sp, #44	; 0x2c
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e169      	b.n	8001048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d74:	2201      	movs	r2, #1
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8158 	bne.w	8001042 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4a9a      	ldr	r2, [pc, #616]	; (8001000 <HAL_GPIO_Init+0x2a0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d05e      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000d9c:	4a98      	ldr	r2, [pc, #608]	; (8001000 <HAL_GPIO_Init+0x2a0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d875      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000da2:	4a98      	ldr	r2, [pc, #608]	; (8001004 <HAL_GPIO_Init+0x2a4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d058      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000da8:	4a96      	ldr	r2, [pc, #600]	; (8001004 <HAL_GPIO_Init+0x2a4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d86f      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dae:	4a96      	ldr	r2, [pc, #600]	; (8001008 <HAL_GPIO_Init+0x2a8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d052      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000db4:	4a94      	ldr	r2, [pc, #592]	; (8001008 <HAL_GPIO_Init+0x2a8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d869      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dba:	4a94      	ldr	r2, [pc, #592]	; (800100c <HAL_GPIO_Init+0x2ac>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d04c      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000dc0:	4a92      	ldr	r2, [pc, #584]	; (800100c <HAL_GPIO_Init+0x2ac>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d863      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dc6:	4a92      	ldr	r2, [pc, #584]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d046      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000dcc:	4a90      	ldr	r2, [pc, #576]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d85d      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dd2:	2b12      	cmp	r3, #18
 8000dd4:	d82a      	bhi.n	8000e2c <HAL_GPIO_Init+0xcc>
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d859      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <HAL_GPIO_Init+0x80>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000e5b 	.word	0x08000e5b
 8000de4:	08000e35 	.word	0x08000e35
 8000de8:	08000e47 	.word	0x08000e47
 8000dec:	08000e89 	.word	0x08000e89
 8000df0:	08000e8f 	.word	0x08000e8f
 8000df4:	08000e8f 	.word	0x08000e8f
 8000df8:	08000e8f 	.word	0x08000e8f
 8000dfc:	08000e8f 	.word	0x08000e8f
 8000e00:	08000e8f 	.word	0x08000e8f
 8000e04:	08000e8f 	.word	0x08000e8f
 8000e08:	08000e8f 	.word	0x08000e8f
 8000e0c:	08000e8f 	.word	0x08000e8f
 8000e10:	08000e8f 	.word	0x08000e8f
 8000e14:	08000e8f 	.word	0x08000e8f
 8000e18:	08000e8f 	.word	0x08000e8f
 8000e1c:	08000e8f 	.word	0x08000e8f
 8000e20:	08000e8f 	.word	0x08000e8f
 8000e24:	08000e3d 	.word	0x08000e3d
 8000e28:	08000e51 	.word	0x08000e51
 8000e2c:	4a79      	ldr	r2, [pc, #484]	; (8001014 <HAL_GPIO_Init+0x2b4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d013      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e32:	e02c      	b.n	8000e8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	623b      	str	r3, [r7, #32]
          break;
 8000e3a:	e029      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	3304      	adds	r3, #4
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e024      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	623b      	str	r3, [r7, #32]
          break;
 8000e4e:	e01f      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	330c      	adds	r3, #12
 8000e56:	623b      	str	r3, [r7, #32]
          break;
 8000e58:	e01a      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e62:	2304      	movs	r3, #4
 8000e64:	623b      	str	r3, [r7, #32]
          break;
 8000e66:	e013      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d105      	bne.n	8000e7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e70:	2308      	movs	r3, #8
 8000e72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	611a      	str	r2, [r3, #16]
          break;
 8000e7a:	e009      	b.n	8000e90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	615a      	str	r2, [r3, #20]
          break;
 8000e86:	e003      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
          break;
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          break;
 8000e8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2bff      	cmp	r3, #255	; 0xff
 8000e94:	d801      	bhi.n	8000e9a <HAL_GPIO_Init+0x13a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	e001      	b.n	8000e9e <HAL_GPIO_Init+0x13e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d802      	bhi.n	8000eac <HAL_GPIO_Init+0x14c>
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	e002      	b.n	8000eb2 <HAL_GPIO_Init+0x152>
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	3b08      	subs	r3, #8
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	210f      	movs	r1, #15
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	6a39      	ldr	r1, [r7, #32]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80b1 	beq.w	8001042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee0:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <HAL_GPIO_Init+0x2b8>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <HAL_GPIO_Init+0x2b8>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_GPIO_Init+0x2b8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ef8:	4a48      	ldr	r2, [pc, #288]	; (800101c <HAL_GPIO_Init+0x2bc>)
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a40      	ldr	r2, [pc, #256]	; (8001020 <HAL_GPIO_Init+0x2c0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d013      	beq.n	8000f4c <HAL_GPIO_Init+0x1ec>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a3f      	ldr	r2, [pc, #252]	; (8001024 <HAL_GPIO_Init+0x2c4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00d      	beq.n	8000f48 <HAL_GPIO_Init+0x1e8>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <HAL_GPIO_Init+0x2c8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x1e4>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a3d      	ldr	r2, [pc, #244]	; (800102c <HAL_GPIO_Init+0x2cc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_GPIO_Init+0x1e0>
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e006      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f40:	2304      	movs	r3, #4
 8000f42:	e004      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e002      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f50:	f002 0203 	and.w	r2, r2, #3
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	4093      	lsls	r3, r2
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f5e:	492f      	ldr	r1, [pc, #188]	; (800101c <HAL_GPIO_Init+0x2bc>)
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f78:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	492c      	ldr	r1, [pc, #176]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	608b      	str	r3, [r1, #8]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4928      	ldr	r1, [pc, #160]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	4922      	ldr	r1, [pc, #136]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	60cb      	str	r3, [r1, #12]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	491e      	ldr	r1, [pc, #120]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4918      	ldr	r1, [pc, #96]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	4914      	ldr	r1, [pc, #80]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d021      	beq.n	8001034 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	490e      	ldr	r1, [pc, #56]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
 8000ffc:	e021      	b.n	8001042 <HAL_GPIO_Init+0x2e2>
 8000ffe:	bf00      	nop
 8001000:	10320000 	.word	0x10320000
 8001004:	10310000 	.word	0x10310000
 8001008:	10220000 	.word	0x10220000
 800100c:	10210000 	.word	0x10210000
 8001010:	10120000 	.word	0x10120000
 8001014:	10110000 	.word	0x10110000
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00
 8001028:	40011000 	.word	0x40011000
 800102c:	40011400 	.word	0x40011400
 8001030:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_GPIO_Init+0x304>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	43db      	mvns	r3, r3
 800103c:	4909      	ldr	r1, [pc, #36]	; (8001064 <HAL_GPIO_Init+0x304>)
 800103e:	4013      	ands	r3, r2
 8001040:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3301      	adds	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	fa22 f303 	lsr.w	r3, r2, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	f47f ae8e 	bne.w	8000d74 <HAL_GPIO_Init+0x14>
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	372c      	adds	r7, #44	; 0x2c
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40010400 	.word	0x40010400

08001068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001084:	e003      	b.n	800108e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	041a      	lsls	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	611a      	str	r2, [r3, #16]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4013      	ands	r3, r2
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43d9      	mvns	r1, r3
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	400b      	ands	r3, r1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	611a      	str	r2, [r3, #16]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e272      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8087 	beq.w	80011fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ec:	4b92      	ldr	r3, [pc, #584]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d00c      	beq.n	8001112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f8:	4b8f      	ldr	r3, [pc, #572]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d112      	bne.n	800112a <HAL_RCC_OscConfig+0x5e>
 8001104:	4b8c      	ldr	r3, [pc, #560]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d10b      	bne.n	800112a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001112:	4b89      	ldr	r3, [pc, #548]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d06c      	beq.n	80011f8 <HAL_RCC_OscConfig+0x12c>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d168      	bne.n	80011f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e24c      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001132:	d106      	bne.n	8001142 <HAL_RCC_OscConfig+0x76>
 8001134:	4b80      	ldr	r3, [pc, #512]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a7f      	ldr	r2, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800113a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e02e      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x98>
 800114a:	4b7b      	ldr	r3, [pc, #492]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7a      	ldr	r2, [pc, #488]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b78      	ldr	r3, [pc, #480]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a77      	ldr	r2, [pc, #476]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0xbc>
 800116e:	4b72      	ldr	r3, [pc, #456]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a71      	ldr	r2, [pc, #452]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b6f      	ldr	r3, [pc, #444]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6e      	ldr	r2, [pc, #440]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001188:	4b6b      	ldr	r3, [pc, #428]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a6a      	ldr	r2, [pc, #424]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b68      	ldr	r3, [pc, #416]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a67      	ldr	r2, [pc, #412]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcc8 	bl	8000b3c <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcc4 	bl	8000b3c <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e200      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b5d      	ldr	r3, [pc, #372]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xe4>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcb4 	bl	8000b3c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fcb0 	bl	8000b3c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1ec      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x10c>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001212:	4b49      	ldr	r3, [pc, #292]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x18c>
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x176>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1c0      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4939      	ldr	r1, [pc, #228]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fc69 	bl	8000b3c <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc65 	bl	8000b3c <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e1a1      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4927      	ldr	r1, [pc, #156]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc48 	bl	8000b3c <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc44 	bl	8000b3c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e180      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d03a      	beq.n	8001350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d019      	beq.n	8001316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_RCC_OscConfig+0x274>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc28 	bl	8000b3c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc24 	bl	8000b3c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e160      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800130e:	2001      	movs	r0, #1
 8001310:	f000 face 	bl	80018b0 <RCC_Delay>
 8001314:	e01c      	b.n	8001350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_RCC_OscConfig+0x274>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff fc0e 	bl	8000b3c <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001322:	e00f      	b.n	8001344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fc0a 	bl	8000b3c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d908      	bls.n	8001344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e146      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	42420000 	.word	0x42420000
 8001340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	4b92      	ldr	r3, [pc, #584]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1e9      	bne.n	8001324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80a6 	beq.w	80014aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001362:	4b8b      	ldr	r3, [pc, #556]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10d      	bne.n	800138a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b88      	ldr	r3, [pc, #544]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a87      	ldr	r2, [pc, #540]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b85      	ldr	r3, [pc, #532]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001386:	2301      	movs	r3, #1
 8001388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b82      	ldr	r3, [pc, #520]	; (8001594 <HAL_RCC_OscConfig+0x4c8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d118      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001396:	4b7f      	ldr	r3, [pc, #508]	; (8001594 <HAL_RCC_OscConfig+0x4c8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a7e      	ldr	r2, [pc, #504]	; (8001594 <HAL_RCC_OscConfig+0x4c8>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fbcb 	bl	8000b3c <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013aa:	f7ff fbc7 	bl	8000b3c <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e103      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	4b75      	ldr	r3, [pc, #468]	; (8001594 <HAL_RCC_OscConfig+0x4c8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x312>
 80013d0:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6213      	str	r3, [r2, #32]
 80013dc:	e02d      	b.n	800143a <HAL_RCC_OscConfig+0x36e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x334>
 80013e6:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a69      	ldr	r2, [pc, #420]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6213      	str	r3, [r2, #32]
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a66      	ldr	r2, [pc, #408]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	e01c      	b.n	800143a <HAL_RCC_OscConfig+0x36e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x356>
 8001408:	4b61      	ldr	r3, [pc, #388]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4a60      	ldr	r2, [pc, #384]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6213      	str	r3, [r2, #32]
 8001414:	4b5e      	ldr	r3, [pc, #376]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a5d      	ldr	r2, [pc, #372]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x36e>
 8001422:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4a5a      	ldr	r2, [pc, #360]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6213      	str	r3, [r2, #32]
 800142e:	4b58      	ldr	r3, [pc, #352]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a57      	ldr	r2, [pc, #348]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d015      	beq.n	800146e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fb7b 	bl	8000b3c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff fb77 	bl	8000b3c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0b1      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ee      	beq.n	800144a <HAL_RCC_OscConfig+0x37e>
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fb65 	bl	8000b3c <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fb61 	bl	8000b3c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f241 3288 	movw	r2, #5000	; 0x1388
 8001484:	4293      	cmp	r3, r2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e09b      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	4b40      	ldr	r3, [pc, #256]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ee      	bne.n	8001476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a3b      	ldr	r2, [pc, #236]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8087 	beq.w	80015c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d061      	beq.n	8001584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d146      	bne.n	8001556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b33      	ldr	r3, [pc, #204]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb35 	bl	8000b3c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fb31 	bl	8000b3c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e06d      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fc:	d108      	bne.n	8001510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	4921      	ldr	r1, [pc, #132]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a19      	ldr	r1, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	430b      	orrs	r3, r1
 8001522:	491b      	ldr	r1, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fb05 	bl	8000b3c <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fb01 	bl	8000b3c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e03d      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x46a>
 8001554:	e035      	b.n	80015c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff faee 	bl	8000b3c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff faea 	bl	8000b3c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e026      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x498>
 8001582:	e01e      	b.n	80015c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e019      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
 8001590:	40021000 	.word	0x40021000
 8001594:	40007000 	.word	0x40007000
 8001598:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_OscConfig+0x500>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0d0      	b.n	8001786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e4:	4b6a      	ldr	r3, [pc, #424]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d910      	bls.n	8001614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b67      	ldr	r3, [pc, #412]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 0207 	bic.w	r2, r3, #7
 80015fa:	4965      	ldr	r1, [pc, #404]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0b8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4a58      	ldr	r2, [pc, #352]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800164e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	494d      	ldr	r1, [pc, #308]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d040      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d115      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e073      	b.n	8001786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06b      	b.n	8001786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f023 0203 	bic.w	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4936      	ldr	r1, [pc, #216]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c0:	f7ff fa3c 	bl	8000b3c <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	e00a      	b.n	80016de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c8:	f7ff fa38 	bl	8000b3c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e053      	b.n	8001786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 020c 	and.w	r2, r3, #12
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d1eb      	bne.n	80016c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d210      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 0207 	bic.w	r2, r3, #7
 8001706:	4922      	ldr	r1, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e032      	b.n	8001786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4916      	ldr	r1, [pc, #88]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800175e:	f000 f821 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001762:	4602      	mov	r2, r0
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	490a      	ldr	r1, [pc, #40]	; (8001798 <HAL_RCC_ClockConfig+0x1c8>)
 8001770:	5ccb      	ldrb	r3, [r1, r3]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1cc>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1d0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f99a 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40022000 	.word	0x40022000
 8001794:	40021000 	.word	0x40021000
 8001798:	08002638 	.word	0x08002638
 800179c:	20000010 	.word	0x20000010
 80017a0:	20000014 	.word	0x20000014

080017a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_RCC_GetSysClockFreq+0x94>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d002      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x30>
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d003      	beq.n	80017da <HAL_RCC_GetSysClockFreq+0x36>
 80017d2:	e027      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_RCC_GetSysClockFreq+0x98>)
 80017d6:	613b      	str	r3, [r7, #16]
      break;
 80017d8:	e027      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	0c9b      	lsrs	r3, r3, #18
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017e4:	5cd3      	ldrb	r3, [r2, r3]
 80017e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d010      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_RCC_GetSysClockFreq+0x94>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	0c5b      	lsrs	r3, r3, #17
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_RCC_GetSysClockFreq+0x98>)
 8001806:	fb03 f202 	mul.w	r2, r3, r2
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e004      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001818:	fb02 f303 	mul.w	r3, r2, r3
 800181c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	613b      	str	r3, [r7, #16]
      break;
 8001822:	e002      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_GetSysClockFreq+0x98>)
 8001826:	613b      	str	r3, [r7, #16]
      break;
 8001828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182a:	693b      	ldr	r3, [r7, #16]
}
 800182c:	4618      	mov	r0, r3
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	007a1200 	.word	0x007a1200
 8001840:	08002650 	.word	0x08002650
 8001844:	08002660 	.word	0x08002660
 8001848:	003d0900 	.word	0x003d0900

0800184c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_RCC_GetHCLKFreq+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000010 	.word	0x20000010

08001860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001864:	f7ff fff2 	bl	800184c <HAL_RCC_GetHCLKFreq>
 8001868:	4602      	mov	r2, r0
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	0a1b      	lsrs	r3, r3, #8
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	4903      	ldr	r1, [pc, #12]	; (8001884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001876:	5ccb      	ldrb	r3, [r1, r3]
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	08002648 	.word	0x08002648

08001888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800188c:	f7ff ffde 	bl	800184c <HAL_RCC_GetHCLKFreq>
 8001890:	4602      	mov	r2, r0
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	0adb      	lsrs	r3, r3, #11
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	4903      	ldr	r1, [pc, #12]	; (80018ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800189e:	5ccb      	ldrb	r3, [r1, r3]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	08002648 	.word	0x08002648

080018b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <RCC_Delay+0x34>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <RCC_Delay+0x38>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0a5b      	lsrs	r3, r3, #9
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018cc:	bf00      	nop
  }
  while (Delay --);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	60fa      	str	r2, [r7, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f9      	bne.n	80018cc <RCC_Delay+0x1c>
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000010 	.word	0x20000010
 80018e8:	10624dd3 	.word	0x10624dd3

080018ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e076      	b.n	80019ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d108      	bne.n	8001918 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800190e:	d009      	beq.n	8001924 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
 8001916:	e005      	b.n	8001924 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe ffba 	bl	80008b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800195a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a8:	ea42 0103 	orr.w	r1, r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	0c1a      	lsrs	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f002 0204 	and.w	r2, r2, #4
 80019ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_SPI_Transmit+0x22>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e12d      	b.n	8001c72 <HAL_SPI_Transmit+0x27e>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a1e:	f7ff f88d 	bl	8000b3c <HAL_GetTick>
 8001a22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d002      	beq.n	8001a3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a34:	2302      	movs	r3, #2
 8001a36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a38:	e116      	b.n	8001c68 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_SPI_Transmit+0x52>
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a4a:	e10d      	b.n	8001c68 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	88fa      	ldrh	r2, [r7, #6]
 8001a6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a92:	d10f      	bne.n	8001ab4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abe:	2b40      	cmp	r3, #64	; 0x40
 8001ac0:	d007      	beq.n	8001ad2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ada:	d14f      	bne.n	8001b7c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_SPI_Transmit+0xf6>
 8001ae4:	8afb      	ldrh	r3, [r7, #22]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d142      	bne.n	8001b70 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	881a      	ldrh	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	1c9a      	adds	r2, r3, #2
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b0e:	e02f      	b.n	8001b70 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d112      	bne.n	8001b44 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	881a      	ldrh	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	1c9a      	adds	r2, r3, #2
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b42:	e015      	b.n	8001b70 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b44:	f7fe fffa 	bl	8000b3c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d803      	bhi.n	8001b5c <HAL_SPI_Transmit+0x168>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5a:	d102      	bne.n	8001b62 <HAL_SPI_Transmit+0x16e>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001b6e:	e07b      	b.n	8001c68 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ca      	bne.n	8001b10 <HAL_SPI_Transmit+0x11c>
 8001b7a:	e050      	b.n	8001c1e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_SPI_Transmit+0x196>
 8001b84:	8afb      	ldrh	r3, [r7, #22]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d144      	bne.n	8001c14 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	330c      	adds	r3, #12
 8001b94:	7812      	ldrb	r2, [r2, #0]
 8001b96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bb0:	e030      	b.n	8001c14 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d113      	bne.n	8001be8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	7812      	ldrb	r2, [r2, #0]
 8001bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	86da      	strh	r2, [r3, #54]	; 0x36
 8001be6:	e015      	b.n	8001c14 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001be8:	f7fe ffa8 	bl	8000b3c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d803      	bhi.n	8001c00 <HAL_SPI_Transmit+0x20c>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfe:	d102      	bne.n	8001c06 <HAL_SPI_Transmit+0x212>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001c12:	e029      	b.n	8001c68 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1c9      	bne.n	8001bb2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fbcc 	bl	80023c0 <SPI_EndRxTxTransaction>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	77fb      	strb	r3, [r7, #31]
 8001c5e:	e003      	b.n	8001c68 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c70:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b088      	sub	sp, #32
 8001c7e:	af02      	add	r7, sp, #8
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4613      	mov	r3, r2
 8001c88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d002      	beq.n	8001ca0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c9e:	e0fb      	b.n	8001e98 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ca8:	d112      	bne.n	8001cd0 <HAL_SPI_Receive+0x56>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001cba:	88fa      	ldrh	r2, [r7, #6]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f8ef 	bl	8001eaa <HAL_SPI_TransmitReceive>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	e0e8      	b.n	8001ea2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_SPI_Receive+0x64>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e0e1      	b.n	8001ea2 <HAL_SPI_Receive+0x228>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ce6:	f7fe ff29 	bl	8000b3c <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_SPI_Receive+0x7e>
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cfc:	e0cc      	b.n	8001e98 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2204      	movs	r2, #4
 8001d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	88fa      	ldrh	r2, [r7, #6]
 8001d1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d44:	d10f      	bne.n	8001d66 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d70:	2b40      	cmp	r3, #64	; 0x40
 8001d72:	d007      	beq.n	8001d84 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d16a      	bne.n	8001e62 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d8c:	e032      	b.n	8001df4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d115      	bne.n	8001dc8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f103 020c 	add.w	r2, r3, #12
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001dc6:	e015      	b.n	8001df4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dc8:	f7fe feb8 	bl	8000b3c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d803      	bhi.n	8001de0 <HAL_SPI_Receive+0x166>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dde:	d102      	bne.n	8001de6 <HAL_SPI_Receive+0x16c>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001df2:	e051      	b.n	8001e98 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1c7      	bne.n	8001d8e <HAL_SPI_Receive+0x114>
 8001dfe:	e035      	b.n	8001e6c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d113      	bne.n	8001e36 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e20:	1c9a      	adds	r2, r3, #2
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e34:	e015      	b.n	8001e62 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e36:	f7fe fe81 	bl	8000b3c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d803      	bhi.n	8001e4e <HAL_SPI_Receive+0x1d4>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d102      	bne.n	8001e54 <HAL_SPI_Receive+0x1da>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d106      	bne.n	8001e62 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e60:	e01a      	b.n	8001e98 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1c9      	bne.n	8001e00 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	6839      	ldr	r1, [r7, #0]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 fa53 	bl	800231c <SPI_EndRxTransaction>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
 8001e8e:	e003      	b.n	8001e98 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b08c      	sub	sp, #48	; 0x30
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_SPI_TransmitReceive+0x26>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e198      	b.n	8002202 <HAL_SPI_TransmitReceive+0x358>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ed8:	f7fe fe30 	bl	8000b3c <HAL_GetTick>
 8001edc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d00f      	beq.n	8001f1a <HAL_SPI_TransmitReceive+0x70>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f00:	d107      	bne.n	8001f12 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <HAL_SPI_TransmitReceive+0x68>
 8001f0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d003      	beq.n	8001f1a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f18:	e16d      	b.n	80021f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_SPI_TransmitReceive+0x82>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_SPI_TransmitReceive+0x82>
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f32:	e160      	b.n	80021f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d003      	beq.n	8001f48 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2205      	movs	r2, #5
 8001f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	887a      	ldrh	r2, [r7, #2]
 8001f5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	887a      	ldrh	r2, [r7, #2]
 8001f6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f88:	2b40      	cmp	r3, #64	; 0x40
 8001f8a:	d007      	beq.n	8001f9c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fa4:	d17c      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_SPI_TransmitReceive+0x10a>
 8001fae:	8b7b      	ldrh	r3, [r7, #26]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d16a      	bne.n	800208a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	881a      	ldrh	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	1c9a      	adds	r2, r3, #2
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fd8:	e057      	b.n	800208a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d11b      	bne.n	8002020 <HAL_SPI_TransmitReceive+0x176>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d016      	beq.n	8002020 <HAL_SPI_TransmitReceive+0x176>
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d113      	bne.n	8002020 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	881a      	ldrh	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	1c9a      	adds	r2, r3, #2
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d119      	bne.n	8002062 <HAL_SPI_TransmitReceive+0x1b8>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d014      	beq.n	8002062 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	b292      	uxth	r2, r2
 8002044:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	1c9a      	adds	r2, r3, #2
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800205e:	2301      	movs	r3, #1
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002062:	f7fe fd6b 	bl	8000b3c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800206e:	429a      	cmp	r2, r3
 8002070:	d80b      	bhi.n	800208a <HAL_SPI_TransmitReceive+0x1e0>
 8002072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d007      	beq.n	800208a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002088:	e0b5      	b.n	80021f6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1a2      	bne.n	8001fda <HAL_SPI_TransmitReceive+0x130>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d19d      	bne.n	8001fda <HAL_SPI_TransmitReceive+0x130>
 800209e:	e080      	b.n	80021a2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_SPI_TransmitReceive+0x204>
 80020a8:	8b7b      	ldrh	r3, [r7, #26]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d16f      	bne.n	800218e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	330c      	adds	r3, #12
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d4:	e05b      	b.n	800218e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d11c      	bne.n	800211e <HAL_SPI_TransmitReceive+0x274>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d017      	beq.n	800211e <HAL_SPI_TransmitReceive+0x274>
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d114      	bne.n	800211e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	330c      	adds	r3, #12
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d119      	bne.n	8002160 <HAL_SPI_TransmitReceive+0x2b6>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d014      	beq.n	8002160 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800215c:	2301      	movs	r3, #1
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002160:	f7fe fcec 	bl	8000b3c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800216c:	429a      	cmp	r2, r3
 800216e:	d803      	bhi.n	8002178 <HAL_SPI_TransmitReceive+0x2ce>
 8002170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002176:	d102      	bne.n	800217e <HAL_SPI_TransmitReceive+0x2d4>
 8002178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800218c:	e033      	b.n	80021f6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d19e      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x22c>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d199      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f90a 	bl	80023c0 <SPI_EndRxTxTransaction>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80021be:	e01a      	b.n	80021f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021ec:	e003      	b.n	80021f6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002202:	4618      	mov	r0, r3
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800221c:	f7fe fc8e 	bl	8000b3c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800222c:	f7fe fc86 	bl	8000b3c <HAL_GetTick>
 8002230:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002232:	4b39      	ldr	r3, [pc, #228]	; (8002318 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	015b      	lsls	r3, r3, #5
 8002238:	0d1b      	lsrs	r3, r3, #20
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002242:	e054      	b.n	80022ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224a:	d050      	beq.n	80022ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800224c:	f7fe fc76 	bl	8000b3c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	429a      	cmp	r2, r3
 800225a:	d902      	bls.n	8002262 <SPI_WaitFlagStateUntilTimeout+0x56>
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d13d      	bne.n	80022de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800227a:	d111      	bne.n	80022a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002284:	d004      	beq.n	8002290 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d107      	bne.n	80022a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a8:	d10f      	bne.n	80022ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e017      	b.n	800230e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4013      	ands	r3, r2
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	429a      	cmp	r2, r3
 800230a:	d19b      	bne.n	8002244 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000010 	.word	0x20000010

0800231c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002330:	d111      	bne.n	8002356 <SPI_EndRxTransaction+0x3a>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800233a:	d004      	beq.n	8002346 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002344:	d107      	bne.n	8002356 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002354:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800235e:	d117      	bne.n	8002390 <SPI_EndRxTransaction+0x74>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002368:	d112      	bne.n	8002390 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2200      	movs	r2, #0
 8002372:	2101      	movs	r1, #1
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff ff49 	bl	800220c <SPI_WaitFlagStateUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01a      	beq.n	80023b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e013      	b.n	80023b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2200      	movs	r2, #0
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff ff36 	bl	800220c <SPI_WaitFlagStateUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e000      	b.n	80023b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2200      	movs	r2, #0
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff ff18 	bl	800220c <SPI_WaitFlagStateUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0220 	orr.w	r2, r3, #32
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e000      	b.n	80023f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e042      	b.n	8002494 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fa92 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800243e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f82b 	bl	800249c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024d6:	f023 030c 	bic.w	r3, r3, #12
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2c      	ldr	r2, [pc, #176]	; (80025b0 <UART_SetConfig+0x114>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d103      	bne.n	800250c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002504:	f7ff f9c0 	bl	8001888 <HAL_RCC_GetPCLK2Freq>
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	e002      	b.n	8002512 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800250c:	f7ff f9a8 	bl	8001860 <HAL_RCC_GetPCLK1Freq>
 8002510:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	441a      	add	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <UART_SetConfig+0x118>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	0119      	lsls	r1, r3, #4
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fbb2 f2f3 	udiv	r2, r2, r3
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <UART_SetConfig+0x118>)
 800254a:	fba3 0302 	umull	r0, r3, r3, r2
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2064      	movs	r0, #100	; 0x64
 8002552:	fb00 f303 	mul.w	r3, r0, r3
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	3332      	adds	r3, #50	; 0x32
 800255c:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <UART_SetConfig+0x118>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002568:	4419      	add	r1, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	009a      	lsls	r2, r3, #2
 8002574:	441a      	add	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <UART_SetConfig+0x118>)
 8002582:	fba3 0302 	umull	r0, r3, r3, r2
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2064      	movs	r0, #100	; 0x64
 800258a:	fb00 f303 	mul.w	r3, r0, r3
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	3332      	adds	r3, #50	; 0x32
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <UART_SetConfig+0x118>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	f003 020f 	and.w	r2, r3, #15
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	440a      	add	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40013800 	.word	0x40013800
 80025b4:	51eb851f 	.word	0x51eb851f

080025b8 <memset>:
 80025b8:	4603      	mov	r3, r0
 80025ba:	4402      	add	r2, r0
 80025bc:	4293      	cmp	r3, r2
 80025be:	d100      	bne.n	80025c2 <memset+0xa>
 80025c0:	4770      	bx	lr
 80025c2:	f803 1b01 	strb.w	r1, [r3], #1
 80025c6:	e7f9      	b.n	80025bc <memset+0x4>

080025c8 <__libc_init_array>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	2600      	movs	r6, #0
 80025cc:	4d0c      	ldr	r5, [pc, #48]	; (8002600 <__libc_init_array+0x38>)
 80025ce:	4c0d      	ldr	r4, [pc, #52]	; (8002604 <__libc_init_array+0x3c>)
 80025d0:	1b64      	subs	r4, r4, r5
 80025d2:	10a4      	asrs	r4, r4, #2
 80025d4:	42a6      	cmp	r6, r4
 80025d6:	d109      	bne.n	80025ec <__libc_init_array+0x24>
 80025d8:	f000 f81a 	bl	8002610 <_init>
 80025dc:	2600      	movs	r6, #0
 80025de:	4d0a      	ldr	r5, [pc, #40]	; (8002608 <__libc_init_array+0x40>)
 80025e0:	4c0a      	ldr	r4, [pc, #40]	; (800260c <__libc_init_array+0x44>)
 80025e2:	1b64      	subs	r4, r4, r5
 80025e4:	10a4      	asrs	r4, r4, #2
 80025e6:	42a6      	cmp	r6, r4
 80025e8:	d105      	bne.n	80025f6 <__libc_init_array+0x2e>
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
 80025ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f0:	4798      	blx	r3
 80025f2:	3601      	adds	r6, #1
 80025f4:	e7ee      	b.n	80025d4 <__libc_init_array+0xc>
 80025f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fa:	4798      	blx	r3
 80025fc:	3601      	adds	r6, #1
 80025fe:	e7f2      	b.n	80025e6 <__libc_init_array+0x1e>
 8002600:	08002664 	.word	0x08002664
 8002604:	08002664 	.word	0x08002664
 8002608:	08002664 	.word	0x08002664
 800260c:	08002668 	.word	0x08002668

08002610 <_init>:
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002612:	bf00      	nop
 8002614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002616:	bc08      	pop	{r3}
 8002618:	469e      	mov	lr, r3
 800261a:	4770      	bx	lr

0800261c <_fini>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr
