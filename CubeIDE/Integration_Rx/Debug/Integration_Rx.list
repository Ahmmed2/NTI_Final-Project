
Integration_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003af8  08003af8  00013af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b60  08003b60  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003b60  08003b60  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b60  08003b60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003b68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000078  08003be0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08003be0  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005464  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000147d  00000000  00000000  00025548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000660  00000000  00000000  000269c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b5  00000000  00000000  00027028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b35  00000000  00000000  000274dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000074d8  00000000  00000000  0003e012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008183b  00000000  00000000  000454ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e10  00000000  00000000  000c6d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000c8b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003adc 	.word	0x08003adc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003adc 	.word	0x08003adc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <NRF_ChipSelect>:
uint8_t Send_Data[10] ;



void NRF_ChipSelect (void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_RESET) ;
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2104      	movs	r1, #4
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <NRF_ChipSelect+0x14>)
 8000a72:	f000 ff79 	bl	8001968 <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010800 	.word	0x40010800

08000a80 <NRF_ChipUnSelect>:

void NRF_ChipUnSelect (void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSNE_PORT, NRF_CSNE_PIN, GPIO_PIN_SET) ;
 8000a84:	2201      	movs	r2, #1
 8000a86:	2104      	movs	r1, #4
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <NRF_ChipUnSelect+0x14>)
 8000a8a:	f000 ff6d 	bl	8001968 <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40010800 	.word	0x40010800

08000a98 <NRF_ChipEnable>:


void NRF_ChipEnable (void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET) ;
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <NRF_ChipEnable+0x14>)
 8000aa2:	f000 ff61 	bl	8001968 <HAL_GPIO_WritePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010800 	.word	0x40010800

08000ab0 <NRF_ChipDisable>:

void NRF_ChipDisable (void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET) ;
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <NRF_ChipDisable+0x14>)
 8000aba:	f000 ff55 	bl	8001968 <HAL_GPIO_WritePin>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <NRF_voidWriteByteReg>:
 * Return : None
 * note :
 *
 */
void NRF_voidWriteByteReg(uint8_t Copy_u8Reg , uint8_t Copy_u8RegData)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[2] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	733b      	strb	r3, [r7, #12]

	/* Data to be written */
	Local_Buffer[1] =  Copy_u8RegData ;
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	737b      	strb	r3, [r7, #13]

	/* Chip Select */
	NRF_ChipSelect() ;
 8000ae6:	f7ff ffbf 	bl	8000a68 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, Local_Buffer,2,1000) ;
 8000aea:	f107 010c 	add.w	r1, r7, #12
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	2202      	movs	r2, #2
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <NRF_voidWriteByteReg+0x40>)
 8000af6:	f001 fbb1 	bl	800225c <HAL_SPI_Transmit>

	/* Release"Unselect"  device */
	NRF_ChipUnSelect () ;
 8000afa:	f7ff ffc1 	bl	8000a80 <NRF_ChipUnSelect>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000094 	.word	0x20000094

08000b0c <NRF_voidWriteMultiByteReg>:
 * note :
 *
 */

void NRF_voidWriteMultiByteReg(uint8_t Copy_u8Reg , uint8_t *Data , uint8_t Copy_u8Size)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_Buffer[1] ;

	/* Fifth Bit in write Register is always 1 */
	Local_Buffer[0] = (Copy_u8Reg | (1<<5)) ;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f043 0320 	orr.w	r3, r3, #32
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	733b      	strb	r3, [r7, #12]

	/* Chip Select */
	NRF_ChipSelect() ;
 8000b26:	f7ff ff9f 	bl	8000a68 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1,Local_Buffer,1,100) ;
 8000b2a:	f107 010c 	add.w	r1, r7, #12
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	2201      	movs	r2, #1
 8000b32:	4808      	ldr	r0, [pc, #32]	; (8000b54 <NRF_voidWriteMultiByteReg+0x48>)
 8000b34:	f001 fb92 	bl	800225c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF_SPI1,Data,Copy_u8Size,1000) ;
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	6839      	ldr	r1, [r7, #0]
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <NRF_voidWriteMultiByteReg+0x48>)
 8000b44:	f001 fb8a 	bl	800225c <HAL_SPI_Transmit>

	/* Release"Unselect"device */
	NRF_ChipUnSelect () ;
 8000b48:	f7ff ff9a 	bl	8000a80 <NRF_ChipUnSelect>
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000094 	.word	0x20000094

08000b58 <NRF_u8ReadByteReg>:
 * Return : Register Value
 * note :
 *
 */
uint8_t NRF_u8ReadByteReg(uint8_t Copy_u8Reg)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_Data = 0 ;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]

	/* Chip Select */
	NRF_ChipSelect() ;
 8000b66:	f7ff ff7f 	bl	8000a68 <NRF_ChipSelect>

	/* Receive Data */
	HAL_SPI_Transmit(NRF_SPI1,&Copy_u8Reg,1,100 ) ;
 8000b6a:	1df9      	adds	r1, r7, #7
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <NRF_u8ReadByteReg+0x3c>)
 8000b72:	f001 fb73 	bl	800225c <HAL_SPI_Transmit>
	//HAL_Delay(100) ;
	HAL_SPI_Receive(NRF_SPI1,&Local_Data,1,1000) ;
 8000b76:	f107 010f 	add.w	r1, r7, #15
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <NRF_u8ReadByteReg+0x3c>)
 8000b82:	f001 fcae 	bl	80024e2 <HAL_SPI_Receive>
	//HAL_Delay(100) ;

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 8000b86:	f7ff ff7b 	bl	8000a80 <NRF_ChipUnSelect>

	return Local_Data ;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000094 	.word	0x20000094

08000b98 <NRF_voidCommandSet>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidCommandSet (uint8_t Copy_u8Command )
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	/* Chip Select */
	NRF_ChipSelect() ;
 8000ba2:	f7ff ff61 	bl	8000a68 <NRF_ChipSelect>

	/* Send Data */
	HAL_SPI_Transmit(NRF_SPI1, &Copy_u8Command, 1 ,100) ;
 8000ba6:	1df9      	adds	r1, r7, #7
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	2201      	movs	r2, #1
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <NRF_voidCommandSet+0x28>)
 8000bae:	f001 fb55 	bl	800225c <HAL_SPI_Transmit>

	/* Release"Unselect" device */
	NRF_ChipUnSelect () ;
 8000bb2:	f7ff ff65 	bl	8000a80 <NRF_ChipUnSelect>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000094 	.word	0x20000094

08000bc4 <NRF_voidInit>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidInit ()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	/* Disable Chip */
	NRF_ChipDisable () ;
 8000bc8:	f7ff ff72 	bl	8000ab0 <NRF_ChipDisable>

	/* Reset All Registers */
	//NRF_voidResetNRF(0X00) ;

	/* Config Init */
	NRF_voidWriteByteReg(CONFIG,0x00) ;
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff ff7a 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* EN_AA Init "NO ACK is Used" */
	NRF_voidWriteByteReg(EN_AA,0x00) ;
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff76 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* EN_RXADDR Init "Disable Data pipes for now"  */
	NRF_voidWriteByteReg(EN_RXADDR,0x00) ;
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff ff72 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* SETUP_AW Init "Width of data pipe Addresses" */
	NRF_voidWriteByteReg(SETUP_AW,0x03) ;	  	  //5 Byte Address Width
 8000be4:	2103      	movs	r1, #3
 8000be6:	2003      	movs	r0, #3
 8000be8:	f7ff ff6e 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* SETUP_RETR Init "Auto Transmit time " */
	NRF_voidWriteByteReg(SETUP_RETR,0x00) ;	  //Disable Auto Transmit
 8000bec:	2100      	movs	r1, #0
 8000bee:	2004      	movs	r0, #4
 8000bf0:	f7ff ff6a 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* RF_CH Init "Channel Number" */
	NRF_voidWriteByteReg(RF_CH,0x00) ;	  	  //Disable for now will be configured later
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2005      	movs	r0, #5
 8000bf8:	f7ff ff66 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* RF_SETUP Init "BaudRate , Power" */
	NRF_voidWriteByteReg(RF_SETUP,0x0E) ;	   	   //0dBM, 2Mbps
 8000bfc:	210e      	movs	r1, #14
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f7ff ff62 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* Enable Chip */
	NRF_ChipEnable () ;
 8000c04:	f7ff ff48 	bl	8000a98 <NRF_ChipEnable>


}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <NRF_voidReceiverMode>:
 * note :
 *
 */

void NRF_voidReceiverMode (uint8_t * Address ,uint8_t Copy_u8Channel_Number )
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]

	/* Disable Chip */
	NRF_ChipDisable () ;
 8000c18:	f7ff ff4a 	bl	8000ab0 <NRF_ChipDisable>

	// Reset STATUS
	NRF_voidResetNRF(STATUS) ;
 8000c1c:	2007      	movs	r0, #7
 8000c1e:	f000 f879 	bl	8000d14 <NRF_voidResetNRF>


	/* Select Channel */
	NRF_voidWriteByteReg(RF_CH,Copy_u8Channel_Number) ;
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	4619      	mov	r1, r3
 8000c26:	2005      	movs	r0, #5
 8000c28:	f7ff ff4e 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* Activate PIPE1 To receive */
	uint8_t Local_Temp =  NRF_u8ReadByteReg (EN_RXADDR) ;
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff ff93 	bl	8000b58 <NRF_u8ReadByteReg>
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
	Local_Temp = Local_Temp | (1<<1) ; // In Case there is channels already Activated not to change it
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	73fb      	strb	r3, [r7, #15]
	NRF_voidWriteByteReg(EN_RXADDR,Local_Temp) ;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	4619      	mov	r1, r3
 8000c42:	2002      	movs	r0, #2
 8000c44:	f7ff ff40 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* PIPE1 Address Width  */
	NRF_voidWriteMultiByteReg(RX_ADDR_P1,Address,5) ;
 8000c48:	2205      	movs	r2, #5
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	200b      	movs	r0, #11
 8000c4e:	f7ff ff5d 	bl	8000b0c <NRF_voidWriteMultiByteReg>

	/* Data received is 32 Byte "For PIPE1" */
	NRF_voidWriteByteReg(RX_PW_P1,32) ;
 8000c52:	2120      	movs	r1, #32
 8000c54:	2012      	movs	r0, #18
 8000c56:	f7ff ff37 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* Power up Device and select the device as RX */
	uint8_t Temp ;
	Temp = NRF_u8ReadByteReg(CONFIG);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff ff7c 	bl	8000b58 <NRF_u8ReadByteReg>
 8000c60:	4603      	mov	r3, r0
 8000c62:	73bb      	strb	r3, [r7, #14]
	Temp = Temp | (1<<1) | (1<<0) ;
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	f043 0303 	orr.w	r3, r3, #3
 8000c6a:	73bb      	strb	r3, [r7, #14]
	NRF_voidWriteByteReg(CONFIG,Temp) ;
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff ff29 	bl	8000ac8 <NRF_voidWriteByteReg>

	/* Enable Chip */
	NRF_ChipEnable () ;
 8000c76:	f7ff ff0f 	bl	8000a98 <NRF_ChipEnable>

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <NRF_u8IsDataAvailable>:
 * note :
 *
 */

uint8_t NRF_u8IsDataAvailable (uint8_t Copy_u8PipeNum)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_Temp = 0 ;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73bb      	strb	r3, [r7, #14]
	uint8_t Return_Value ;
	Local_Temp = NRF_u8ReadByteReg(STATUS) ;
 8000c90:	2007      	movs	r0, #7
 8000c92:	f7ff ff61 	bl	8000b58 <NRF_u8ReadByteReg>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73bb      	strb	r3, [r7, #14]

	/* Check if Certain PIPE is Empty or Not + Data Ready or Not  */
	if (((Local_Temp)&(1<<6)) && ((Local_Temp)&(Copy_u8PipeNum<<1)) )
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00c      	beq.n	8000cbe <NRF_u8IsDataAvailable+0x3c>
 8000ca4:	7bba      	ldrb	r2, [r7, #14]
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <NRF_u8IsDataAvailable+0x3c>
	{
		/* To Clear Data Ready Bit */
		NRF_voidWriteByteReg(STATUS,1<<6) ;
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	2007      	movs	r0, #7
 8000cb4:	f7ff ff08 	bl	8000ac8 <NRF_voidWriteByteReg>

		Return_Value = 1 ;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e001      	b.n	8000cc2 <NRF_u8IsDataAvailable+0x40>

	}
	else Return_Value = 0 ;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]

	return Return_Value ;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]

}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <NRF_voidReceiveData>:
 * Return : NONE
 * note :
 *
 */
void NRF_voidReceiveData (uint8_t * Data )
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	/* Chip Select  */
	NRF_ChipSelect() ;
 8000cd4:	f7ff fec8 	bl	8000a68 <NRF_ChipSelect>

   uint8_t Local_Temp = R_RX_PAYLOAD ;
 8000cd8:	2361      	movs	r3, #97	; 0x61
 8000cda:	73fb      	strb	r3, [r7, #15]

   /* Get the Receiver ready To Read From it  */
   HAL_SPI_Transmit(NRF_SPI1, &Local_Temp, 1 , 100) ;
 8000cdc:	f107 010f 	add.w	r1, r7, #15
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <NRF_voidReceiveData+0x44>)
 8000ce6:	f001 fab9 	bl	800225c <HAL_SPI_Transmit>

   /* Receive Pay-Load "Data" */
   HAL_SPI_Receive(NRF_SPI1, Data, 32 , 1000) ;
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	2220      	movs	r2, #32
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4807      	ldr	r0, [pc, #28]	; (8000d10 <NRF_voidReceiveData+0x44>)
 8000cf4:	f001 fbf5 	bl	80024e2 <HAL_SPI_Receive>

	/* Chip UnSelect  */
	NRF_ChipUnSelect() ;
 8000cf8:	f7ff fec2 	bl	8000a80 <NRF_ChipUnSelect>

	/* Delay */
	//HAL_Delay(1) ;

	/* Flush RX FIFO */
	Local_Temp = FLUSH_RX ;
 8000cfc:	23e2      	movs	r3, #226	; 0xe2
 8000cfe:	73fb      	strb	r3, [r7, #15]
	NRF_voidCommandSet(Local_Temp) ;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff48 	bl	8000b98 <NRF_voidCommandSet>


}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000094 	.word	0x20000094

08000d14 <NRF_voidResetNRF>:
 *
 */


void NRF_voidResetNRF(uint8_t Copy_u8REG)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8REG == STATUS)
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b07      	cmp	r3, #7
 8000d22:	d104      	bne.n	8000d2e <NRF_voidResetNRF+0x1a>
	{
		NRF_voidWriteByteReg(STATUS, 0x00);
 8000d24:	2100      	movs	r1, #0
 8000d26:	2007      	movs	r0, #7
 8000d28:	f7ff fece 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
	NRF_voidWriteByteReg(DYNPD, 0);
	NRF_voidWriteByteReg(FEATURE, 0);
	}
}
 8000d2c:	e090      	b.n	8000e50 <NRF_voidResetNRF+0x13c>
	else if (Copy_u8REG == FIFO_STATUS)
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b17      	cmp	r3, #23
 8000d32:	d104      	bne.n	8000d3e <NRF_voidResetNRF+0x2a>
		NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 8000d34:	2111      	movs	r1, #17
 8000d36:	2017      	movs	r0, #23
 8000d38:	f7ff fec6 	bl	8000ac8 <NRF_voidWriteByteReg>
}
 8000d3c:	e088      	b.n	8000e50 <NRF_voidResetNRF+0x13c>
	NRF_voidWriteByteReg(CONFIG, 0x08);
 8000d3e:	2108      	movs	r1, #8
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fec1 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_AA, 0x3F);
 8000d46:	213f      	movs	r1, #63	; 0x3f
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff febd 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(EN_RXADDR, 0x03);
 8000d4e:	2103      	movs	r1, #3
 8000d50:	2002      	movs	r0, #2
 8000d52:	f7ff feb9 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_AW, 0x03);
 8000d56:	2103      	movs	r1, #3
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f7ff feb5 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(SETUP_RETR, 0x03);
 8000d5e:	2103      	movs	r1, #3
 8000d60:	2004      	movs	r0, #4
 8000d62:	f7ff feb1 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_CH, 0x02);
 8000d66:	2102      	movs	r1, #2
 8000d68:	2005      	movs	r0, #5
 8000d6a:	f7ff fead 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RF_SETUP, 0x0E);
 8000d6e:	210e      	movs	r1, #14
 8000d70:	2006      	movs	r0, #6
 8000d72:	f7ff fea9 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(STATUS, 0x00);
 8000d76:	2100      	movs	r1, #0
 8000d78:	2007      	movs	r0, #7
 8000d7a:	f7ff fea5 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(OBSERVE_TX, 0x00);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2008      	movs	r0, #8
 8000d82:	f7ff fea1 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(CD, 0x00);
 8000d86:	2100      	movs	r1, #0
 8000d88:	2009      	movs	r0, #9
 8000d8a:	f7ff fe9d 	bl	8000ac8 <NRF_voidWriteByteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000d8e:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <NRF_voidResetNRF+0x144>)
 8000d90:	f107 0318 	add.w	r3, r7, #24
 8000d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d98:	6018      	str	r0, [r3, #0]
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	2205      	movs	r2, #5
 8000da4:	4619      	mov	r1, r3
 8000da6:	200a      	movs	r0, #10
 8000da8:	f7ff feb0 	bl	8000b0c <NRF_voidWriteMultiByteReg>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000dac:	4a2b      	ldr	r2, [pc, #172]	; (8000e5c <NRF_voidResetNRF+0x148>)
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db6:	6018      	str	r0, [r3, #0]
 8000db8:	3304      	adds	r3, #4
 8000dba:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	200b      	movs	r0, #11
 8000dc6:	f7ff fea1 	bl	8000b0c <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P2, 0xC3);
 8000dca:	21c3      	movs	r1, #195	; 0xc3
 8000dcc:	200c      	movs	r0, #12
 8000dce:	f7ff fe7b 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P3, 0xC4);
 8000dd2:	21c4      	movs	r1, #196	; 0xc4
 8000dd4:	200d      	movs	r0, #13
 8000dd6:	f7ff fe77 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P4, 0xC5);
 8000dda:	21c5      	movs	r1, #197	; 0xc5
 8000ddc:	200e      	movs	r0, #14
 8000dde:	f7ff fe73 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_ADDR_P5, 0xC6);
 8000de2:	21c6      	movs	r1, #198	; 0xc6
 8000de4:	200f      	movs	r0, #15
 8000de6:	f7ff fe6f 	bl	8000ac8 <NRF_voidWriteByteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <NRF_voidResetNRF+0x144>)
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df4:	6018      	str	r0, [r3, #0]
 8000df6:	3304      	adds	r3, #4
 8000df8:	7019      	strb	r1, [r3, #0]
	NRF_voidWriteMultiByteReg(TX_ADDR, tx_addr_def, 5);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2205      	movs	r2, #5
 8000e00:	4619      	mov	r1, r3
 8000e02:	2010      	movs	r0, #16
 8000e04:	f7ff fe82 	bl	8000b0c <NRF_voidWriteMultiByteReg>
	NRF_voidWriteByteReg(RX_PW_P0, 0);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2011      	movs	r0, #17
 8000e0c:	f7ff fe5c 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P1, 0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	2012      	movs	r0, #18
 8000e14:	f7ff fe58 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P2, 0);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2013      	movs	r0, #19
 8000e1c:	f7ff fe54 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P3, 0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	2014      	movs	r0, #20
 8000e24:	f7ff fe50 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P4, 0);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2015      	movs	r0, #21
 8000e2c:	f7ff fe4c 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(RX_PW_P5, 0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2016      	movs	r0, #22
 8000e34:	f7ff fe48 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FIFO_STATUS, 0x11);
 8000e38:	2111      	movs	r1, #17
 8000e3a:	2017      	movs	r0, #23
 8000e3c:	f7ff fe44 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(DYNPD, 0);
 8000e40:	2100      	movs	r1, #0
 8000e42:	201c      	movs	r0, #28
 8000e44:	f7ff fe40 	bl	8000ac8 <NRF_voidWriteByteReg>
	NRF_voidWriteByteReg(FEATURE, 0);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	201d      	movs	r0, #29
 8000e4c:	f7ff fe3c 	bl	8000ac8 <NRF_voidWriteByteReg>
}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	08003af8 	.word	0x08003af8
 8000e5c:	08003b00 	.word	0x08003b00

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e64:	f000 fab6 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e68:	f000 f810 	bl	8000e8c <SystemClock_Config>


  /* USER CODE BEGIN 2 */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6c:	f000 f880 	bl	8000f70 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e70:	f000 f848 	bl	8000f04 <MX_SPI1_Init>
  NRF_voidInit();
 8000e74:	f7ff fea6 	bl	8000bc4 <NRF_voidInit>
  NRF_voidReceiverMode(RxAddress, 10 ) ;
 8000e78:	210a      	movs	r1, #10
 8000e7a:	4803      	ldr	r0, [pc, #12]	; (8000e88 <main+0x28>)
 8000e7c:	f7ff fec6 	bl	8000c0c <NRF_voidReceiverMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  APP_voidNRF_OrganizedData() ;
 8000e80:	f000 f8a8 	bl	8000fd4 <APP_voidNRF_OrganizedData>
 8000e84:	e7fc      	b.n	8000e80 <main+0x20>
 8000e86:	bf00      	nop
 8000e88:	20000000 	.word	0x20000000

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b090      	sub	sp, #64	; 0x40
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0318 	add.w	r3, r7, #24
 8000e96:	2228      	movs	r2, #40	; 0x28
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fee2 	bl	8002c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fd68 	bl	8001998 <HAL_RCC_OscConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ece:	f000 f9bb 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 ffd6 	bl	8001e9c <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 f9a7 	bl	8001248 <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3740      	adds	r7, #64	; 0x40
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2208      	movs	r2, #8
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f001 f8fd 	bl	8002154 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f000 f972 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000094 	.word	0x20000094
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_GPIO_Init+0x5c>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <MX_GPIO_Init+0x5c>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_GPIO_Init+0x5c>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2106      	movs	r1, #6
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <MX_GPIO_Init+0x60>)
 8000fa2:	f000 fce1 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_GPIO_Init+0x60>)
 8000fbe:	f000 fb4f 	bl	8001660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010800 	.word	0x40010800

08000fd4 <APP_voidNRF_OrganizedData>:

/* USER CODE BEGIN 4 */
void APP_voidNRF_OrganizedData (void)
{
 8000fd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
	  uint8_t Local_Counter = 0 ;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	71fb      	strb	r3, [r7, #7]
	  uint8_t Index_Counter = 0 ;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	71bb      	strb	r3, [r7, #6]
	  uint8_t Shift_Index = 0 ;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	70bb      	strb	r3, [r7, #2]
	  uint8_t Number = 0 ;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	717b      	strb	r3, [r7, #5]

	  /* Data is Available */
	  if (NRF_u8IsDataAvailable(1) == 1 )
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff fe48 	bl	8000c82 <NRF_u8IsDataAvailable>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	f040 8117 	bne.w	8001228 <APP_voidNRF_OrganizedData+0x254>
	  {
		  NRF_voidReceiveData(Rx_Data) ;
 8000ffa:	488e      	ldr	r0, [pc, #568]	; (8001234 <APP_voidNRF_OrganizedData+0x260>)
 8000ffc:	f7ff fe66 	bl	8000ccc <NRF_voidReceiveData>

		  while (Rx_Data[Size_In_Bytes] != '+' )
 8001000:	e005      	b.n	800100e <APP_voidNRF_OrganizedData+0x3a>
		  {
			  Size_In_Bytes ++ ;
 8001002:	4b8d      	ldr	r3, [pc, #564]	; (8001238 <APP_voidNRF_OrganizedData+0x264>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b8b      	ldr	r3, [pc, #556]	; (8001238 <APP_voidNRF_OrganizedData+0x264>)
 800100c:	701a      	strb	r2, [r3, #0]
		  while (Rx_Data[Size_In_Bytes] != '+' )
 800100e:	4b8a      	ldr	r3, [pc, #552]	; (8001238 <APP_voidNRF_OrganizedData+0x264>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b87      	ldr	r3, [pc, #540]	; (8001234 <APP_voidNRF_OrganizedData+0x260>)
 8001016:	5c9b      	ldrb	r3, [r3, r2]
 8001018:	2b2b      	cmp	r3, #43	; 0x2b
 800101a:	d1f2      	bne.n	8001002 <APP_voidNRF_OrganizedData+0x2e>
		  }

	/* Determine the Index of Character */
for (Local_Counter = 0 ; Local_Counter < Size_In_Bytes ; Local_Counter++ )
 800101c:	2300      	movs	r3, #0
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	e013      	b.n	800104a <APP_voidNRF_OrganizedData+0x76>
{
	  if ( (Rx_Data[Local_Counter] >=65) && (Rx_Data[Local_Counter] <=122) )
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a83      	ldr	r2, [pc, #524]	; (8001234 <APP_voidNRF_OrganizedData+0x260>)
 8001026:	5cd3      	ldrb	r3, [r2, r3]
 8001028:	2b40      	cmp	r3, #64	; 0x40
 800102a:	d90b      	bls.n	8001044 <APP_voidNRF_OrganizedData+0x70>
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4a81      	ldr	r2, [pc, #516]	; (8001234 <APP_voidNRF_OrganizedData+0x260>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	2b7a      	cmp	r3, #122	; 0x7a
 8001034:	d806      	bhi.n	8001044 <APP_voidNRF_OrganizedData+0x70>
	  {
		  Char_Index[Index_Counter] = Local_Counter ;
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	4980      	ldr	r1, [pc, #512]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	54ca      	strb	r2, [r1, r3]
		  Index_Counter ++ ;
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	3301      	adds	r3, #1
 8001042:	71bb      	strb	r3, [r7, #6]
for (Local_Counter = 0 ; Local_Counter < Size_In_Bytes ; Local_Counter++ )
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	3301      	adds	r3, #1
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	4b7b      	ldr	r3, [pc, #492]	; (8001238 <APP_voidNRF_OrganizedData+0x264>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3e6      	bcc.n	8001022 <APP_voidNRF_OrganizedData+0x4e>
	  }

}

	  for (Local_Counter = 0 ; Local_Counter < 4 ; Local_Counter++ )
 8001054:	2300      	movs	r3, #0
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	e0df      	b.n	800121a <APP_voidNRF_OrganizedData+0x246>
	{

		  switch (Rx_Data[Char_Index[Local_Counter]])
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4a77      	ldr	r2, [pc, #476]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	461a      	mov	r2, r3
 8001062:	4b74      	ldr	r3, [pc, #464]	; (8001234 <APP_voidNRF_OrganizedData+0x260>)
 8001064:	5c9b      	ldrb	r3, [r3, r2]
 8001066:	3b44      	subs	r3, #68	; 0x44
 8001068:	2b0f      	cmp	r3, #15
 800106a:	f200 80d3 	bhi.w	8001214 <APP_voidNRF_OrganizedData+0x240>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <APP_voidNRF_OrganizedData+0xa0>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	0800114d 	.word	0x0800114d
 8001078:	08001215 	.word	0x08001215
 800107c:	08001215 	.word	0x08001215
 8001080:	08001215 	.word	0x08001215
 8001084:	08001215 	.word	0x08001215
 8001088:	080011ff 	.word	0x080011ff
 800108c:	08001215 	.word	0x08001215
 8001090:	08001215 	.word	0x08001215
 8001094:	08001215 	.word	0x08001215
 8001098:	08001163 	.word	0x08001163
 800109c:	08001215 	.word	0x08001215
 80010a0:	08001215 	.word	0x08001215
 80010a4:	08001215 	.word	0x08001215
 80010a8:	08001215 	.word	0x08001215
 80010ac:	08001215 	.word	0x08001215
 80010b0:	080010b5 	.word	0x080010b5
		  {
		  case 'S' :

			  Shift_Index = Char_Index[1] - Char_Index[0] -1 ;
 80010b4:	4b61      	ldr	r3, [pc, #388]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 80010b6:	785a      	ldrb	r2, [r3, #1]
 80010b8:	4b60      	ldr	r3, [pc, #384]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	3b01      	subs	r3, #1
 80010c2:	70bb      	strb	r3, [r7, #2]
			  for (uint8_t i = Shift_Index ; i>0 ; i--)
 80010c4:	78bb      	ldrb	r3, [r7, #2]
 80010c6:	713b      	strb	r3, [r7, #4]
 80010c8:	e037      	b.n	800113a <APP_voidNRF_OrganizedData+0x166>
			  {
				  Number = Number +((Rx_Data[Char_Index[Local_Counter]+i]-48) * pow(10,(Shift_Index-i))) ;
 80010ca:	797b      	ldrb	r3, [r7, #5]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f991 	bl	80003f4 <__aeabi_i2d>
 80010d2:	4604      	mov	r4, r0
 80010d4:	460d      	mov	r5, r1
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4a58      	ldr	r2, [pc, #352]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	461a      	mov	r2, r3
 80010de:	793b      	ldrb	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a54      	ldr	r2, [pc, #336]	; (8001234 <APP_voidNRF_OrganizedData+0x260>)
 80010e4:	5cd3      	ldrb	r3, [r2, r3]
 80010e6:	3b30      	subs	r3, #48	; 0x30
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f983 	bl	80003f4 <__aeabi_i2d>
 80010ee:	4680      	mov	r8, r0
 80010f0:	4689      	mov	r9, r1
 80010f2:	78ba      	ldrb	r2, [r7, #2]
 80010f4:	793b      	ldrb	r3, [r7, #4]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f97b 	bl	80003f4 <__aeabi_i2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	494e      	ldr	r1, [pc, #312]	; (8001240 <APP_voidNRF_OrganizedData+0x26c>)
 8001108:	f001 fdde 	bl	8002cc8 <pow>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4640      	mov	r0, r8
 8001112:	4649      	mov	r1, r9
 8001114:	f7ff f9d8 	bl	80004c8 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4620      	mov	r0, r4
 800111e:	4629      	mov	r1, r5
 8001120:	f7ff f81c 	bl	800015c <__adddf3>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fc7c 	bl	8000a28 <__aeabi_d2uiz>
 8001130:	4603      	mov	r3, r0
 8001132:	717b      	strb	r3, [r7, #5]
			  for (uint8_t i = Shift_Index ; i>0 ; i--)
 8001134:	793b      	ldrb	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	713b      	strb	r3, [r7, #4]
 800113a:	793b      	ldrb	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1c4      	bne.n	80010ca <APP_voidNRF_OrganizedData+0xf6>
			  }
			  Data_Organized[0] = Number ;
 8001140:	4a40      	ldr	r2, [pc, #256]	; (8001244 <APP_voidNRF_OrganizedData+0x270>)
 8001142:	797b      	ldrb	r3, [r7, #5]
 8001144:	7013      	strb	r3, [r2, #0]
			  Number = 0 ;
 8001146:	2300      	movs	r3, #0
 8001148:	717b      	strb	r3, [r7, #5]
			  break ;
 800114a:	e063      	b.n	8001214 <APP_voidNRF_OrganizedData+0x240>


		  case 'D' :

			  Data_Organized[1] = Rx_Data[Char_Index[Local_Counter]+1]-48 ;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4a3b      	ldr	r2, [pc, #236]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	3301      	adds	r3, #1
 8001154:	4a37      	ldr	r2, [pc, #220]	; (8001234 <APP_voidNRF_OrganizedData+0x260>)
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	3b30      	subs	r3, #48	; 0x30
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b39      	ldr	r3, [pc, #228]	; (8001244 <APP_voidNRF_OrganizedData+0x270>)
 800115e:	705a      	strb	r2, [r3, #1]
			  break ;
 8001160:	e058      	b.n	8001214 <APP_voidNRF_OrganizedData+0x240>

		  case 'M' :

			  Shift_Index = Char_Index[3] - Char_Index[2] -1 ;
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 8001164:	78da      	ldrb	r2, [r3, #3]
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 8001168:	789b      	ldrb	r3, [r3, #2]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	70bb      	strb	r3, [r7, #2]
			  for (uint8_t i = Shift_Index ; i>0 ; i--)
 8001172:	78bb      	ldrb	r3, [r7, #2]
 8001174:	70fb      	strb	r3, [r7, #3]
 8001176:	e039      	b.n	80011ec <APP_voidNRF_OrganizedData+0x218>
			  {
				  Number += (Rx_Data[Char_Index[Local_Counter]+i]-48) * pow(10,(Shift_Index-i)) ;
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4a30      	ldr	r2, [pc, #192]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	461a      	mov	r2, r3
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	4413      	add	r3, r2
 8001184:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <APP_voidNRF_OrganizedData+0x260>)
 8001186:	5cd3      	ldrb	r3, [r2, r3]
 8001188:	3b30      	subs	r3, #48	; 0x30
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f932 	bl	80003f4 <__aeabi_i2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	78ba      	ldrb	r2, [r7, #2]
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f92a 	bl	80003f4 <__aeabi_i2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	f04f 0000 	mov.w	r0, #0
 80011a8:	4925      	ldr	r1, [pc, #148]	; (8001240 <APP_voidNRF_OrganizedData+0x26c>)
 80011aa:	f001 fd8d 	bl	8002cc8 <pow>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f987 	bl	80004c8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4614      	mov	r4, r2
 80011c0:	461d      	mov	r5, r3
 80011c2:	797b      	ldrb	r3, [r7, #5]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f915 	bl	80003f4 <__aeabi_i2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7fe ffc3 	bl	800015c <__adddf3>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fc23 	bl	8000a28 <__aeabi_d2uiz>
 80011e2:	4603      	mov	r3, r0
 80011e4:	717b      	strb	r3, [r7, #5]
			  for (uint8_t i = Shift_Index ; i>0 ; i--)
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	70fb      	strb	r3, [r7, #3]
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1c2      	bne.n	8001178 <APP_voidNRF_OrganizedData+0x1a4>
			  }
			  Data_Organized[2] = Number ;
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <APP_voidNRF_OrganizedData+0x270>)
 80011f4:	797b      	ldrb	r3, [r7, #5]
 80011f6:	7093      	strb	r3, [r2, #2]
			  Number = 0 ;
 80011f8:	2300      	movs	r3, #0
 80011fa:	717b      	strb	r3, [r7, #5]
			  break ;
 80011fc:	e00a      	b.n	8001214 <APP_voidNRF_OrganizedData+0x240>

		  case 'I' :

			  Data_Organized[3] = Rx_Data[Char_Index[Local_Counter]+1]-48 ;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <APP_voidNRF_OrganizedData+0x268>)
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	3301      	adds	r3, #1
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <APP_voidNRF_OrganizedData+0x260>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	3b30      	subs	r3, #48	; 0x30
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <APP_voidNRF_OrganizedData+0x270>)
 8001210:	70da      	strb	r2, [r3, #3]
			  break ;
 8001212:	bf00      	nop
	  for (Local_Counter = 0 ; Local_Counter < 4 ; Local_Counter++ )
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3301      	adds	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b03      	cmp	r3, #3
 800121e:	f67f af1c 	bls.w	800105a <APP_voidNRF_OrganizedData+0x86>

		  }
	}
		  Size_In_Bytes = 0 ;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <APP_voidNRF_OrganizedData+0x264>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]



	  }
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001232:	bf00      	nop
 8001234:	200000ec 	.word	0x200000ec
 8001238:	20000104 	.word	0x20000104
 800123c:	200000fc 	.word	0x200000fc
 8001240:	40240000 	.word	0x40240000
 8001244:	20000100 	.word	0x20000100

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_MspInit+0x40>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_MspInit+0x40>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_MspInit+0x40>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_MspInit+0x40>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_MspInit+0x40>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_MspInit+0x40>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_SPI_MspInit+0x88>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d12f      	bne.n	8001318 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_SPI_MspInit+0x8c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <HAL_SPI_MspInit+0x8c>)
 80012be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_SPI_MspInit+0x8c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_SPI_MspInit+0x8c>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <HAL_SPI_MspInit+0x8c>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_SPI_MspInit+0x8c>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012e8:	23a0      	movs	r3, #160	; 0xa0
 80012ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <HAL_SPI_MspInit+0x90>)
 80012fc:	f000 f9b0 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001300:	2340      	movs	r3, #64	; 0x40
 8001302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_SPI_MspInit+0x90>)
 8001314:	f000 f9a4 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40013000 	.word	0x40013000
 8001324:	40021000 	.word	0x40021000
 8001328:	40010800 	.word	0x40010800

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001372:	f000 f875 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}

0800137a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
	...

08001388 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001388:	f7ff fff7 	bl	800137a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800138e:	490c      	ldr	r1, [pc, #48]	; (80013c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013a4:	4c09      	ldr	r4, [pc, #36]	; (80013cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b2:	f001 fc65 	bl	8002c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b6:	f7ff fd53 	bl	8000e60 <main>
  bx lr
 80013ba:	4770      	bx	lr
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013c4:	08003b68 	.word	0x08003b68
  ldr r2, =_sbss
 80013c8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013cc:	20000244 	.word	0x20000244

080013d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_Init+0x28>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_Init+0x28>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f907 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	200f      	movs	r0, #15
 80013ec:	f000 f808 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff ff30 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40022000 	.word	0x40022000

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f911 	bl	8001646 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f8e7 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000008 	.word	0x20000008
 8001458:	20000010 	.word	0x20000010
 800145c:	2000000c 	.word	0x2000000c

08001460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x1c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x20>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_IncTick+0x20>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000010 	.word	0x20000010
 8001480:	20000108 	.word	0x20000108

08001484 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <HAL_GetTick+0x10>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	20000108 	.word	0x20000108

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff90 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff49 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff5e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffb0 	bl	80015b4 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e169      	b.n	8001948 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001674:	2201      	movs	r2, #1
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 8158 	bne.w	8001942 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a9a      	ldr	r2, [pc, #616]	; (8001900 <HAL_GPIO_Init+0x2a0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d05e      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 800169c:	4a98      	ldr	r2, [pc, #608]	; (8001900 <HAL_GPIO_Init+0x2a0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d875      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016a2:	4a98      	ldr	r2, [pc, #608]	; (8001904 <HAL_GPIO_Init+0x2a4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d058      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016a8:	4a96      	ldr	r2, [pc, #600]	; (8001904 <HAL_GPIO_Init+0x2a4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d86f      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ae:	4a96      	ldr	r2, [pc, #600]	; (8001908 <HAL_GPIO_Init+0x2a8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d052      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016b4:	4a94      	ldr	r2, [pc, #592]	; (8001908 <HAL_GPIO_Init+0x2a8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d869      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ba:	4a94      	ldr	r2, [pc, #592]	; (800190c <HAL_GPIO_Init+0x2ac>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d04c      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016c0:	4a92      	ldr	r2, [pc, #584]	; (800190c <HAL_GPIO_Init+0x2ac>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d863      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016c6:	4a92      	ldr	r2, [pc, #584]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d046      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016cc:	4a90      	ldr	r2, [pc, #576]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d85d      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d82a      	bhi.n	800172c <HAL_GPIO_Init+0xcc>
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d859      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016da:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <HAL_GPIO_Init+0x80>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	08001735 	.word	0x08001735
 80016e8:	08001747 	.word	0x08001747
 80016ec:	08001789 	.word	0x08001789
 80016f0:	0800178f 	.word	0x0800178f
 80016f4:	0800178f 	.word	0x0800178f
 80016f8:	0800178f 	.word	0x0800178f
 80016fc:	0800178f 	.word	0x0800178f
 8001700:	0800178f 	.word	0x0800178f
 8001704:	0800178f 	.word	0x0800178f
 8001708:	0800178f 	.word	0x0800178f
 800170c:	0800178f 	.word	0x0800178f
 8001710:	0800178f 	.word	0x0800178f
 8001714:	0800178f 	.word	0x0800178f
 8001718:	0800178f 	.word	0x0800178f
 800171c:	0800178f 	.word	0x0800178f
 8001720:	0800178f 	.word	0x0800178f
 8001724:	0800173d 	.word	0x0800173d
 8001728:	08001751 	.word	0x08001751
 800172c:	4a79      	ldr	r2, [pc, #484]	; (8001914 <HAL_GPIO_Init+0x2b4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001732:	e02c      	b.n	800178e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	623b      	str	r3, [r7, #32]
          break;
 800173a:	e029      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	3304      	adds	r3, #4
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e024      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	3308      	adds	r3, #8
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e01f      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	330c      	adds	r3, #12
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e01a      	b.n	8001790 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001762:	2304      	movs	r3, #4
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e013      	b.n	8001790 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	611a      	str	r2, [r3, #16]
          break;
 800177a:	e009      	b.n	8001790 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	615a      	str	r2, [r3, #20]
          break;
 8001786:	e003      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x130>
          break;
 800178e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2bff      	cmp	r3, #255	; 0xff
 8001794:	d801      	bhi.n	800179a <HAL_GPIO_Init+0x13a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	e001      	b.n	800179e <HAL_GPIO_Init+0x13e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3304      	adds	r3, #4
 800179e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	; 0xff
 80017a4:	d802      	bhi.n	80017ac <HAL_GPIO_Init+0x14c>
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x152>
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	3b08      	subs	r3, #8
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	210f      	movs	r1, #15
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	6a39      	ldr	r1, [r7, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80b1 	beq.w	8001942 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <HAL_GPIO_Init+0x2b8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_GPIO_Init+0x2b8>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <HAL_GPIO_Init+0x2b8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017f8:	4a48      	ldr	r2, [pc, #288]	; (800191c <HAL_GPIO_Init+0x2bc>)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a40      	ldr	r2, [pc, #256]	; (8001920 <HAL_GPIO_Init+0x2c0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <HAL_GPIO_Init+0x1ec>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <HAL_GPIO_Init+0x2c4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00d      	beq.n	8001848 <HAL_GPIO_Init+0x1e8>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3e      	ldr	r2, [pc, #248]	; (8001928 <HAL_GPIO_Init+0x2c8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_Init+0x1e4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3d      	ldr	r2, [pc, #244]	; (800192c <HAL_GPIO_Init+0x2cc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_GPIO_Init+0x1e0>
 800183c:	2303      	movs	r3, #3
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001840:	2304      	movs	r3, #4
 8001842:	e004      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001844:	2302      	movs	r3, #2
 8001846:	e002      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 800184c:	2300      	movs	r3, #0
 800184e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001850:	f002 0203 	and.w	r2, r2, #3
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	4093      	lsls	r3, r2
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800185e:	492f      	ldr	r1, [pc, #188]	; (800191c <HAL_GPIO_Init+0x2bc>)
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	492c      	ldr	r1, [pc, #176]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	43db      	mvns	r3, r3
 800188e:	4928      	ldr	r1, [pc, #160]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 8001890:	4013      	ands	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	4922      	ldr	r1, [pc, #136]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	491e      	ldr	r1, [pc, #120]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4918      	ldr	r1, [pc, #96]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4914      	ldr	r1, [pc, #80]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d021      	beq.n	8001934 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e021      	b.n	8001942 <HAL_GPIO_Init+0x2e2>
 80018fe:	bf00      	nop
 8001900:	10320000 	.word	0x10320000
 8001904:	10310000 	.word	0x10310000
 8001908:	10220000 	.word	0x10220000
 800190c:	10210000 	.word	0x10210000
 8001910:	10120000 	.word	0x10120000
 8001914:	10110000 	.word	0x10110000
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	40010800 	.word	0x40010800
 8001924:	40010c00 	.word	0x40010c00
 8001928:	40011000 	.word	0x40011000
 800192c:	40011400 	.word	0x40011400
 8001930:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_GPIO_Init+0x304>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	43db      	mvns	r3, r3
 800193c:	4909      	ldr	r1, [pc, #36]	; (8001964 <HAL_GPIO_Init+0x304>)
 800193e:	4013      	ands	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	3301      	adds	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	f47f ae8e 	bne.w	8001674 <HAL_GPIO_Init+0x14>
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	372c      	adds	r7, #44	; 0x2c
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40010400 	.word	0x40010400

08001968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
 8001974:	4613      	mov	r3, r2
 8001976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001978:	787b      	ldrb	r3, [r7, #1]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001984:	e003      	b.n	800198e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001986:	887b      	ldrh	r3, [r7, #2]
 8001988:	041a      	lsls	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	611a      	str	r2, [r3, #16]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e272      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8087 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b8:	4b92      	ldr	r3, [pc, #584]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d00c      	beq.n	80019de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c4:	4b8f      	ldr	r3, [pc, #572]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d112      	bne.n	80019f6 <HAL_RCC_OscConfig+0x5e>
 80019d0:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d10b      	bne.n	80019f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d06c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x12c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d168      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e24c      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x76>
 8001a00:	4b80      	ldr	r3, [pc, #512]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a7f      	ldr	r2, [pc, #508]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e02e      	b.n	8001a6c <HAL_RCC_OscConfig+0xd4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x98>
 8001a16:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7a      	ldr	r2, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a77      	ldr	r2, [pc, #476]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01d      	b.n	8001a6c <HAL_RCC_OscConfig+0xd4>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0xbc>
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a71      	ldr	r2, [pc, #452]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6e      	ldr	r2, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xd4>
 8001a54:	4b6b      	ldr	r3, [pc, #428]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6a      	ldr	r2, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a67      	ldr	r2, [pc, #412]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fd06 	bl	8001484 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fd02 	bl	8001484 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e200      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0xe4>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fcf2 	bl	8001484 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fcee 	bl	8001484 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e1ec      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x10c>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d063      	beq.n	8001b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad2:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ade:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d11c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x18c>
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x176>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1c0      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4939      	ldr	r1, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e03a      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fca7 	bl	8001484 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fca3 	bl	8001484 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1a1      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4927      	ldr	r1, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
 8001b6c:	e015      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc86 	bl	8001484 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff fc82 	bl	8001484 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e180      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03a      	beq.n	8001c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d019      	beq.n	8001be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fc66 	bl	8001484 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fc62 	bl	8001484 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e160      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f000 fa9c 	bl	8002118 <RCC_Delay>
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fc4c 	bl	8001484 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bee:	e00f      	b.n	8001c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fc48 	bl	8001484 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d908      	bls.n	8001c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e146      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	42420000 	.word	0x42420000
 8001c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	4b92      	ldr	r3, [pc, #584]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e9      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a6 	beq.w	8001d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b8b      	ldr	r3, [pc, #556]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10d      	bne.n	8001c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a87      	ldr	r2, [pc, #540]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	61d3      	str	r3, [r2, #28]
 8001c46:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <HAL_RCC_OscConfig+0x4c8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c62:	4b7f      	ldr	r3, [pc, #508]	; (8001e60 <HAL_RCC_OscConfig+0x4c8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7e      	ldr	r2, [pc, #504]	; (8001e60 <HAL_RCC_OscConfig+0x4c8>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fc09 	bl	8001484 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff fc05 	bl	8001484 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e103      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <HAL_RCC_OscConfig+0x4c8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x312>
 8001c9c:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	e02d      	b.n	8001d06 <HAL_RCC_OscConfig+0x36e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x334>
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a69      	ldr	r2, [pc, #420]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a66      	ldr	r2, [pc, #408]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	e01c      	b.n	8001d06 <HAL_RCC_OscConfig+0x36e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x356>
 8001cd4:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a60      	ldr	r2, [pc, #384]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0x36e>
 8001cee:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a5a      	ldr	r2, [pc, #360]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a57      	ldr	r2, [pc, #348]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d015      	beq.n	8001d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fbb9 	bl	8001484 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff fbb5 	bl	8001484 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0b1      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ee      	beq.n	8001d16 <HAL_RCC_OscConfig+0x37e>
 8001d38:	e014      	b.n	8001d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fba3 	bl	8001484 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff fb9f 	bl	8001484 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e09b      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a3b      	ldr	r2, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8087 	beq.w	8001e8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d061      	beq.n	8001e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d146      	bne.n	8001e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fb73 	bl	8001484 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff fb6f 	bl	8001484 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e06d      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc8:	d108      	bne.n	8001ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dca:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4921      	ldr	r1, [pc, #132]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a19      	ldr	r1, [r3, #32]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	430b      	orrs	r3, r1
 8001dee:	491b      	ldr	r1, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb43 	bl	8001484 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fb3f 	bl	8001484 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e03d      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x46a>
 8001e20:	e035      	b.n	8001e8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fb2c 	bl	8001484 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff fb28 	bl	8001484 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e026      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x498>
 8001e4e:	e01e      	b.n	8001e8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e019      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40007000 	.word	0x40007000
 8001e64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x500>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000

08001e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0d0      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d910      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b67      	ldr	r3, [pc, #412]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4965      	ldr	r1, [pc, #404]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b8      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef8:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	494d      	ldr	r1, [pc, #308]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d040      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e07f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e073      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e06b      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4936      	ldr	r1, [pc, #216]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff fa7a 	bl	8001484 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7ff fa76 	bl	8001484 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e053      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d210      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0207 	bic.w	r2, r3, #7
 8001fd2:	4922      	ldr	r1, [pc, #136]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e032      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4916      	ldr	r1, [pc, #88]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800202a:	f000 f821 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	490a      	ldr	r1, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1cc>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1d0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f9d8 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40022000 	.word	0x40022000
 8002060:	40021000 	.word	0x40021000
 8002064:	08003b08 	.word	0x08003b08
 8002068:	20000008 	.word	0x20000008
 800206c:	2000000c 	.word	0x2000000c

08002070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCC_GetSysClockFreq+0x94>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b04      	cmp	r3, #4
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x30>
 800209a:	2b08      	cmp	r3, #8
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x36>
 800209e:	e027      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_GetSysClockFreq+0x98>)
 80020a2:	613b      	str	r3, [r7, #16]
      break;
 80020a4:	e027      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	0c9b      	lsrs	r3, r3, #18
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d010      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_RCC_GetSysClockFreq+0x94>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	0c5b      	lsrs	r3, r3, #17
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	4a11      	ldr	r2, [pc, #68]	; (8002110 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d2:	fb03 f202 	mul.w	r2, r3, r2
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e004      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	613b      	str	r3, [r7, #16]
      break;
 80020ee:	e002      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetSysClockFreq+0x98>)
 80020f2:	613b      	str	r3, [r7, #16]
      break;
 80020f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f6:	693b      	ldr	r3, [r7, #16]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	007a1200 	.word	0x007a1200
 800210c:	08003b18 	.word	0x08003b18
 8002110:	08003b28 	.word	0x08003b28
 8002114:	003d0900 	.word	0x003d0900

08002118 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <RCC_Delay+0x34>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <RCC_Delay+0x38>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0a5b      	lsrs	r3, r3, #9
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002134:	bf00      	nop
  }
  while (Delay --);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e5a      	subs	r2, r3, #1
 800213a:	60fa      	str	r2, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <RCC_Delay+0x1c>
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	20000008 	.word	0x20000008
 8002150:	10624dd3 	.word	0x10624dd3

08002154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e076      	b.n	8002254 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	2b00      	cmp	r3, #0
 800216c:	d108      	bne.n	8002180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002176:	d009      	beq.n	800218c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
 800217e:	e005      	b.n	800218c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff f876 	bl	8001298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	ea42 0103 	orr.w	r1, r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	0c1a      	lsrs	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f002 0204 	and.w	r2, r2, #4
 8002232:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002242:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_SPI_Transmit+0x22>
 800227a:	2302      	movs	r3, #2
 800227c:	e12d      	b.n	80024da <HAL_SPI_Transmit+0x27e>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002286:	f7ff f8fd 	bl	8001484 <HAL_GetTick>
 800228a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d002      	beq.n	80022a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800229c:	2302      	movs	r3, #2
 800229e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022a0:	e116      	b.n	80024d0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_SPI_Transmit+0x52>
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022b2:	e10d      	b.n	80024d0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2203      	movs	r2, #3
 80022b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022fa:	d10f      	bne.n	800231c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800230a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800231a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d007      	beq.n	800233a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002342:	d14f      	bne.n	80023e4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_SPI_Transmit+0xf6>
 800234c:	8afb      	ldrh	r3, [r7, #22]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d142      	bne.n	80023d8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	1c9a      	adds	r2, r3, #2
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002376:	e02f      	b.n	80023d8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d112      	bne.n	80023ac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	881a      	ldrh	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	1c9a      	adds	r2, r3, #2
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80023aa:	e015      	b.n	80023d8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ac:	f7ff f86a 	bl	8001484 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d803      	bhi.n	80023c4 <HAL_SPI_Transmit+0x168>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c2:	d102      	bne.n	80023ca <HAL_SPI_Transmit+0x16e>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80023d6:	e07b      	b.n	80024d0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ca      	bne.n	8002378 <HAL_SPI_Transmit+0x11c>
 80023e2:	e050      	b.n	8002486 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_SPI_Transmit+0x196>
 80023ec:	8afb      	ldrh	r3, [r7, #22]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d144      	bne.n	800247c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002418:	e030      	b.n	800247c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b02      	cmp	r3, #2
 8002426:	d113      	bne.n	8002450 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	86da      	strh	r2, [r3, #54]	; 0x36
 800244e:	e015      	b.n	800247c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002450:	f7ff f818 	bl	8001484 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d803      	bhi.n	8002468 <HAL_SPI_Transmit+0x20c>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002466:	d102      	bne.n	800246e <HAL_SPI_Transmit+0x212>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800247a:	e029      	b.n	80024d0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1c9      	bne.n	800241a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fbcc 	bl	8002c28 <SPI_EndRxTxTransaction>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	77fb      	strb	r3, [r7, #31]
 80024c6:	e003      	b.n	80024d0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b088      	sub	sp, #32
 80024e6:	af02      	add	r7, sp, #8
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d002      	beq.n	8002508 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002506:	e0fb      	b.n	8002700 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002510:	d112      	bne.n	8002538 <HAL_SPI_Receive+0x56>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10e      	bne.n	8002538 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2204      	movs	r2, #4
 800251e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002522:	88fa      	ldrh	r2, [r7, #6]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f8ef 	bl	8002712 <HAL_SPI_TransmitReceive>
 8002534:	4603      	mov	r3, r0
 8002536:	e0e8      	b.n	800270a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_SPI_Receive+0x64>
 8002542:	2302      	movs	r3, #2
 8002544:	e0e1      	b.n	800270a <HAL_SPI_Receive+0x228>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800254e:	f7fe ff99 	bl	8001484 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_SPI_Receive+0x7e>
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002564:	e0cc      	b.n	8002700 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2204      	movs	r2, #4
 800256a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	88fa      	ldrh	r2, [r7, #6]
 8002584:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ac:	d10f      	bne.n	80025ce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d007      	beq.n	80025ec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d16a      	bne.n	80026ca <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80025f4:	e032      	b.n	800265c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d115      	bne.n	8002630 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f103 020c 	add.w	r2, r3, #12
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800262e:	e015      	b.n	800265c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002630:	f7fe ff28 	bl	8001484 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d803      	bhi.n	8002648 <HAL_SPI_Receive+0x166>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d102      	bne.n	800264e <HAL_SPI_Receive+0x16c>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800265a:	e051      	b.n	8002700 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1c7      	bne.n	80025f6 <HAL_SPI_Receive+0x114>
 8002666:	e035      	b.n	80026d4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d113      	bne.n	800269e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	b292      	uxth	r2, r2
 8002682:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	1c9a      	adds	r2, r3, #2
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800269c:	e015      	b.n	80026ca <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800269e:	f7fe fef1 	bl	8001484 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d803      	bhi.n	80026b6 <HAL_SPI_Receive+0x1d4>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d102      	bne.n	80026bc <HAL_SPI_Receive+0x1da>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80026c8:	e01a      	b.n	8002700 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1c9      	bne.n	8002668 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	6839      	ldr	r1, [r7, #0]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fa53 	bl	8002b84 <SPI_EndRxTransaction>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
 80026f6:	e003      	b.n	8002700 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002708:	7dfb      	ldrb	r3, [r7, #23]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b08c      	sub	sp, #48	; 0x30
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002720:	2301      	movs	r3, #1
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x26>
 8002734:	2302      	movs	r3, #2
 8002736:	e198      	b.n	8002a6a <HAL_SPI_TransmitReceive+0x358>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002740:	f7fe fea0 	bl	8001484 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800274c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800275a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800275e:	2b01      	cmp	r3, #1
 8002760:	d00f      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x70>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002768:	d107      	bne.n	800277a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <HAL_SPI_TransmitReceive+0x68>
 8002772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002776:	2b04      	cmp	r3, #4
 8002778:	d003      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002780:	e16d      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x82>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x82>
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800279a:	e160      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d003      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2205      	movs	r2, #5
 80027ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	887a      	ldrh	r2, [r7, #2]
 80027c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	887a      	ldrh	r2, [r7, #2]
 80027d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d007      	beq.n	8002804 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800280c:	d17c      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_SPI_TransmitReceive+0x10a>
 8002816:	8b7b      	ldrh	r3, [r7, #26]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d16a      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	1c9a      	adds	r2, r3, #2
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002840:	e057      	b.n	80028f2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b02      	cmp	r3, #2
 800284e:	d11b      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x176>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <HAL_SPI_TransmitReceive+0x176>
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d113      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	881a      	ldrh	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	1c9a      	adds	r2, r3, #2
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d119      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x1b8>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d014      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	b292      	uxth	r2, r2
 80028ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	1c9a      	adds	r2, r3, #2
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028c6:	2301      	movs	r3, #1
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028ca:	f7fe fddb 	bl	8001484 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d80b      	bhi.n	80028f2 <HAL_SPI_TransmitReceive+0x1e0>
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d007      	beq.n	80028f2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80028f0:	e0b5      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1a2      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x130>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d19d      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x130>
 8002906:	e080      	b.n	8002a0a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_SPI_TransmitReceive+0x204>
 8002910:	8b7b      	ldrh	r3, [r7, #26]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d16f      	bne.n	80029f6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800293c:	e05b      	b.n	80029f6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d11c      	bne.n	8002986 <HAL_SPI_TransmitReceive+0x274>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d017      	beq.n	8002986 <HAL_SPI_TransmitReceive+0x274>
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	2b01      	cmp	r3, #1
 800295a:	d114      	bne.n	8002986 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	7812      	ldrb	r2, [r2, #0]
 8002968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d119      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x2b6>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d014      	beq.n	80029c8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029c4:	2301      	movs	r3, #1
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029c8:	f7fe fd5c 	bl	8001484 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d803      	bhi.n	80029e0 <HAL_SPI_TransmitReceive+0x2ce>
 80029d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029de:	d102      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x2d4>
 80029e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d107      	bne.n	80029f6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80029f4:	e033      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d19e      	bne.n	800293e <HAL_SPI_TransmitReceive+0x22c>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d199      	bne.n	800293e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f90a 	bl	8002c28 <SPI_EndRxTxTransaction>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a26:	e01a      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a54:	e003      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3730      	adds	r7, #48	; 0x30
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a84:	f7fe fcfe 	bl	8001484 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a94:	f7fe fcf6 	bl	8001484 <HAL_GetTick>
 8002a98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a9a:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	015b      	lsls	r3, r3, #5
 8002aa0:	0d1b      	lsrs	r3, r3, #20
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aaa:	e054      	b.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab2:	d050      	beq.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ab4:	f7fe fce6 	bl	8001484 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d902      	bls.n	8002aca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d13d      	bne.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ad8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae2:	d111      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aec:	d004      	beq.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af6:	d107      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b10:	d10f      	bne.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e017      	b.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d19b      	bne.n	8002aac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000008 	.word	0x20000008

08002b84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b98:	d111      	bne.n	8002bbe <SPI_EndRxTransaction+0x3a>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba2:	d004      	beq.n	8002bae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d107      	bne.n	8002bbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc6:	d117      	bne.n	8002bf8 <SPI_EndRxTransaction+0x74>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd0:	d112      	bne.n	8002bf8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2101      	movs	r1, #1
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f7ff ff49 	bl	8002a74 <SPI_WaitFlagStateUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01a      	beq.n	8002c1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e013      	b.n	8002c20 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff ff36 	bl	8002a74 <SPI_WaitFlagStateUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e000      	b.n	8002c20 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2180      	movs	r1, #128	; 0x80
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7ff ff18 	bl	8002a74 <SPI_WaitFlagStateUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e000      	b.n	8002c5c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <memset>:
 8002c64:	4603      	mov	r3, r0
 8002c66:	4402      	add	r2, r0
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d100      	bne.n	8002c6e <memset+0xa>
 8002c6c:	4770      	bx	lr
 8002c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c72:	e7f9      	b.n	8002c68 <memset+0x4>

08002c74 <__errno>:
 8002c74:	4b01      	ldr	r3, [pc, #4]	; (8002c7c <__errno+0x8>)
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000060 	.word	0x20000060

08002c80 <__libc_init_array>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	2600      	movs	r6, #0
 8002c84:	4d0c      	ldr	r5, [pc, #48]	; (8002cb8 <__libc_init_array+0x38>)
 8002c86:	4c0d      	ldr	r4, [pc, #52]	; (8002cbc <__libc_init_array+0x3c>)
 8002c88:	1b64      	subs	r4, r4, r5
 8002c8a:	10a4      	asrs	r4, r4, #2
 8002c8c:	42a6      	cmp	r6, r4
 8002c8e:	d109      	bne.n	8002ca4 <__libc_init_array+0x24>
 8002c90:	f000 ff24 	bl	8003adc <_init>
 8002c94:	2600      	movs	r6, #0
 8002c96:	4d0a      	ldr	r5, [pc, #40]	; (8002cc0 <__libc_init_array+0x40>)
 8002c98:	4c0a      	ldr	r4, [pc, #40]	; (8002cc4 <__libc_init_array+0x44>)
 8002c9a:	1b64      	subs	r4, r4, r5
 8002c9c:	10a4      	asrs	r4, r4, #2
 8002c9e:	42a6      	cmp	r6, r4
 8002ca0:	d105      	bne.n	8002cae <__libc_init_array+0x2e>
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
 8002ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca8:	4798      	blx	r3
 8002caa:	3601      	adds	r6, #1
 8002cac:	e7ee      	b.n	8002c8c <__libc_init_array+0xc>
 8002cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb2:	4798      	blx	r3
 8002cb4:	3601      	adds	r6, #1
 8002cb6:	e7f2      	b.n	8002c9e <__libc_init_array+0x1e>
 8002cb8:	08003b60 	.word	0x08003b60
 8002cbc:	08003b60 	.word	0x08003b60
 8002cc0:	08003b60 	.word	0x08003b60
 8002cc4:	08003b64 	.word	0x08003b64

08002cc8 <pow>:
 8002cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ccc:	4614      	mov	r4, r2
 8002cce:	461d      	mov	r5, r3
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	4689      	mov	r9, r1
 8002cd4:	f000 f868 	bl	8002da8 <__ieee754_pow>
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4606      	mov	r6, r0
 8002cdc:	460f      	mov	r7, r1
 8002cde:	462b      	mov	r3, r5
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	f7fd fe8a 	bl	80009fc <__aeabi_dcmpun>
 8002ce8:	bbc8      	cbnz	r0, 8002d5e <pow+0x96>
 8002cea:	2200      	movs	r2, #0
 8002cec:	2300      	movs	r3, #0
 8002cee:	4640      	mov	r0, r8
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	f7fd fe51 	bl	8000998 <__aeabi_dcmpeq>
 8002cf6:	b1b8      	cbz	r0, 8002d28 <pow+0x60>
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	4629      	mov	r1, r5
 8002d00:	f7fd fe4a 	bl	8000998 <__aeabi_dcmpeq>
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d141      	bne.n	8002d8c <pow+0xc4>
 8002d08:	4620      	mov	r0, r4
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	f000 f844 	bl	8002d98 <finite>
 8002d10:	b328      	cbz	r0, 8002d5e <pow+0x96>
 8002d12:	2200      	movs	r2, #0
 8002d14:	2300      	movs	r3, #0
 8002d16:	4620      	mov	r0, r4
 8002d18:	4629      	mov	r1, r5
 8002d1a:	f7fd fe47 	bl	80009ac <__aeabi_dcmplt>
 8002d1e:	b1f0      	cbz	r0, 8002d5e <pow+0x96>
 8002d20:	f7ff ffa8 	bl	8002c74 <__errno>
 8002d24:	2322      	movs	r3, #34	; 0x22
 8002d26:	e019      	b.n	8002d5c <pow+0x94>
 8002d28:	4630      	mov	r0, r6
 8002d2a:	4639      	mov	r1, r7
 8002d2c:	f000 f834 	bl	8002d98 <finite>
 8002d30:	b9c8      	cbnz	r0, 8002d66 <pow+0x9e>
 8002d32:	4640      	mov	r0, r8
 8002d34:	4649      	mov	r1, r9
 8002d36:	f000 f82f 	bl	8002d98 <finite>
 8002d3a:	b1a0      	cbz	r0, 8002d66 <pow+0x9e>
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	4629      	mov	r1, r5
 8002d40:	f000 f82a 	bl	8002d98 <finite>
 8002d44:	b178      	cbz	r0, 8002d66 <pow+0x9e>
 8002d46:	4632      	mov	r2, r6
 8002d48:	463b      	mov	r3, r7
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	4639      	mov	r1, r7
 8002d4e:	f7fd fe55 	bl	80009fc <__aeabi_dcmpun>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d0e4      	beq.n	8002d20 <pow+0x58>
 8002d56:	f7ff ff8d 	bl	8002c74 <__errno>
 8002d5a:	2321      	movs	r3, #33	; 0x21
 8002d5c:	6003      	str	r3, [r0, #0]
 8002d5e:	4630      	mov	r0, r6
 8002d60:	4639      	mov	r1, r7
 8002d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d66:	2200      	movs	r2, #0
 8002d68:	2300      	movs	r3, #0
 8002d6a:	4630      	mov	r0, r6
 8002d6c:	4639      	mov	r1, r7
 8002d6e:	f7fd fe13 	bl	8000998 <__aeabi_dcmpeq>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d0f3      	beq.n	8002d5e <pow+0x96>
 8002d76:	4640      	mov	r0, r8
 8002d78:	4649      	mov	r1, r9
 8002d7a:	f000 f80d 	bl	8002d98 <finite>
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d0ed      	beq.n	8002d5e <pow+0x96>
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f000 f807 	bl	8002d98 <finite>
 8002d8a:	e7c8      	b.n	8002d1e <pow+0x56>
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	4f01      	ldr	r7, [pc, #4]	; (8002d94 <pow+0xcc>)
 8002d90:	e7e5      	b.n	8002d5e <pow+0x96>
 8002d92:	bf00      	nop
 8002d94:	3ff00000 	.word	0x3ff00000

08002d98 <finite>:
 8002d98:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8002d9c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002da0:	0fc0      	lsrs	r0, r0, #31
 8002da2:	4770      	bx	lr
 8002da4:	0000      	movs	r0, r0
	...

08002da8 <__ieee754_pow>:
 8002da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dac:	b093      	sub	sp, #76	; 0x4c
 8002dae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002db2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8002db6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8002dba:	4689      	mov	r9, r1
 8002dbc:	ea56 0102 	orrs.w	r1, r6, r2
 8002dc0:	4680      	mov	r8, r0
 8002dc2:	d111      	bne.n	8002de8 <__ieee754_pow+0x40>
 8002dc4:	1803      	adds	r3, r0, r0
 8002dc6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8002dca:	4152      	adcs	r2, r2
 8002dcc:	4299      	cmp	r1, r3
 8002dce:	4b82      	ldr	r3, [pc, #520]	; (8002fd8 <__ieee754_pow+0x230>)
 8002dd0:	4193      	sbcs	r3, r2
 8002dd2:	f080 84ba 	bcs.w	800374a <__ieee754_pow+0x9a2>
 8002dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002dda:	4640      	mov	r0, r8
 8002ddc:	4649      	mov	r1, r9
 8002dde:	f7fd f9bd 	bl	800015c <__adddf3>
 8002de2:	4683      	mov	fp, r0
 8002de4:	468c      	mov	ip, r1
 8002de6:	e06f      	b.n	8002ec8 <__ieee754_pow+0x120>
 8002de8:	4b7c      	ldr	r3, [pc, #496]	; (8002fdc <__ieee754_pow+0x234>)
 8002dea:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8002dee:	429c      	cmp	r4, r3
 8002df0:	464d      	mov	r5, r9
 8002df2:	4682      	mov	sl, r0
 8002df4:	dc06      	bgt.n	8002e04 <__ieee754_pow+0x5c>
 8002df6:	d101      	bne.n	8002dfc <__ieee754_pow+0x54>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d1ec      	bne.n	8002dd6 <__ieee754_pow+0x2e>
 8002dfc:	429e      	cmp	r6, r3
 8002dfe:	dc01      	bgt.n	8002e04 <__ieee754_pow+0x5c>
 8002e00:	d10f      	bne.n	8002e22 <__ieee754_pow+0x7a>
 8002e02:	b172      	cbz	r2, 8002e22 <__ieee754_pow+0x7a>
 8002e04:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002e08:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002e0c:	ea55 050a 	orrs.w	r5, r5, sl
 8002e10:	d1e1      	bne.n	8002dd6 <__ieee754_pow+0x2e>
 8002e12:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8002e16:	18db      	adds	r3, r3, r3
 8002e18:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002e1c:	4152      	adcs	r2, r2
 8002e1e:	429d      	cmp	r5, r3
 8002e20:	e7d5      	b.n	8002dce <__ieee754_pow+0x26>
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	da39      	bge.n	8002e9a <__ieee754_pow+0xf2>
 8002e26:	4b6e      	ldr	r3, [pc, #440]	; (8002fe0 <__ieee754_pow+0x238>)
 8002e28:	429e      	cmp	r6, r3
 8002e2a:	dc52      	bgt.n	8002ed2 <__ieee754_pow+0x12a>
 8002e2c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002e30:	429e      	cmp	r6, r3
 8002e32:	f340 849d 	ble.w	8003770 <__ieee754_pow+0x9c8>
 8002e36:	1533      	asrs	r3, r6, #20
 8002e38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002e3c:	2b14      	cmp	r3, #20
 8002e3e:	dd0f      	ble.n	8002e60 <__ieee754_pow+0xb8>
 8002e40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002e44:	fa22 f103 	lsr.w	r1, r2, r3
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	f040 848f 	bne.w	8003770 <__ieee754_pow+0x9c8>
 8002e52:	f001 0101 	and.w	r1, r1, #1
 8002e56:	f1c1 0302 	rsb	r3, r1, #2
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	b182      	cbz	r2, 8002e80 <__ieee754_pow+0xd8>
 8002e5e:	e05d      	b.n	8002f1c <__ieee754_pow+0x174>
 8002e60:	2a00      	cmp	r2, #0
 8002e62:	d159      	bne.n	8002f18 <__ieee754_pow+0x170>
 8002e64:	f1c3 0314 	rsb	r3, r3, #20
 8002e68:	fa46 f103 	asr.w	r1, r6, r3
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	42b3      	cmp	r3, r6
 8002e72:	f040 847a 	bne.w	800376a <__ieee754_pow+0x9c2>
 8002e76:	f001 0101 	and.w	r1, r1, #1
 8002e7a:	f1c1 0302 	rsb	r3, r1, #2
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <__ieee754_pow+0x23c>)
 8002e82:	429e      	cmp	r6, r3
 8002e84:	d132      	bne.n	8002eec <__ieee754_pow+0x144>
 8002e86:	2f00      	cmp	r7, #0
 8002e88:	f280 846b 	bge.w	8003762 <__ieee754_pow+0x9ba>
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	2000      	movs	r0, #0
 8002e92:	4954      	ldr	r1, [pc, #336]	; (8002fe4 <__ieee754_pow+0x23c>)
 8002e94:	f7fd fc42 	bl	800071c <__aeabi_ddiv>
 8002e98:	e7a3      	b.n	8002de2 <__ieee754_pow+0x3a>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	d13c      	bne.n	8002f1c <__ieee754_pow+0x174>
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <__ieee754_pow+0x234>)
 8002ea4:	429e      	cmp	r6, r3
 8002ea6:	d1eb      	bne.n	8002e80 <__ieee754_pow+0xd8>
 8002ea8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002eac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002eb0:	ea53 030a 	orrs.w	r3, r3, sl
 8002eb4:	f000 8449 	beq.w	800374a <__ieee754_pow+0x9a2>
 8002eb8:	4b4b      	ldr	r3, [pc, #300]	; (8002fe8 <__ieee754_pow+0x240>)
 8002eba:	429c      	cmp	r4, r3
 8002ebc:	dd0b      	ble.n	8002ed6 <__ieee754_pow+0x12e>
 8002ebe:	2f00      	cmp	r7, #0
 8002ec0:	f2c0 8449 	blt.w	8003756 <__ieee754_pow+0x9ae>
 8002ec4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002ec8:	4658      	mov	r0, fp
 8002eca:	4661      	mov	r1, ip
 8002ecc:	b013      	add	sp, #76	; 0x4c
 8002ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e7e2      	b.n	8002e9c <__ieee754_pow+0xf4>
 8002ed6:	2f00      	cmp	r7, #0
 8002ed8:	f04f 0b00 	mov.w	fp, #0
 8002edc:	f04f 0c00 	mov.w	ip, #0
 8002ee0:	daf2      	bge.n	8002ec8 <__ieee754_pow+0x120>
 8002ee2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8002ee6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002eea:	e7ed      	b.n	8002ec8 <__ieee754_pow+0x120>
 8002eec:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002ef0:	d106      	bne.n	8002f00 <__ieee754_pow+0x158>
 8002ef2:	4642      	mov	r2, r8
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	4649      	mov	r1, r9
 8002efa:	f7fd fae5 	bl	80004c8 <__aeabi_dmul>
 8002efe:	e770      	b.n	8002de2 <__ieee754_pow+0x3a>
 8002f00:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <__ieee754_pow+0x244>)
 8002f02:	429f      	cmp	r7, r3
 8002f04:	d10a      	bne.n	8002f1c <__ieee754_pow+0x174>
 8002f06:	2d00      	cmp	r5, #0
 8002f08:	db08      	blt.n	8002f1c <__ieee754_pow+0x174>
 8002f0a:	4640      	mov	r0, r8
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	b013      	add	sp, #76	; 0x4c
 8002f10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f14:	f000 bd0a 	b.w	800392c <__ieee754_sqrt>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4640      	mov	r0, r8
 8002f1e:	4649      	mov	r1, r9
 8002f20:	f000 fc58 	bl	80037d4 <fabs>
 8002f24:	4683      	mov	fp, r0
 8002f26:	468c      	mov	ip, r1
 8002f28:	f1ba 0f00 	cmp.w	sl, #0
 8002f2c:	d128      	bne.n	8002f80 <__ieee754_pow+0x1d8>
 8002f2e:	b124      	cbz	r4, 8002f3a <__ieee754_pow+0x192>
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <__ieee754_pow+0x23c>)
 8002f32:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d122      	bne.n	8002f80 <__ieee754_pow+0x1d8>
 8002f3a:	2f00      	cmp	r7, #0
 8002f3c:	da07      	bge.n	8002f4e <__ieee754_pow+0x1a6>
 8002f3e:	465a      	mov	r2, fp
 8002f40:	4663      	mov	r3, ip
 8002f42:	2000      	movs	r0, #0
 8002f44:	4927      	ldr	r1, [pc, #156]	; (8002fe4 <__ieee754_pow+0x23c>)
 8002f46:	f7fd fbe9 	bl	800071c <__aeabi_ddiv>
 8002f4a:	4683      	mov	fp, r0
 8002f4c:	468c      	mov	ip, r1
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	daba      	bge.n	8002ec8 <__ieee754_pow+0x120>
 8002f52:	9b00      	ldr	r3, [sp, #0]
 8002f54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002f58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002f5c:	431c      	orrs	r4, r3
 8002f5e:	d108      	bne.n	8002f72 <__ieee754_pow+0x1ca>
 8002f60:	465a      	mov	r2, fp
 8002f62:	4663      	mov	r3, ip
 8002f64:	4658      	mov	r0, fp
 8002f66:	4661      	mov	r1, ip
 8002f68:	f7fd f8f6 	bl	8000158 <__aeabi_dsub>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	e790      	b.n	8002e94 <__ieee754_pow+0xec>
 8002f72:	9b00      	ldr	r3, [sp, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d1a7      	bne.n	8002ec8 <__ieee754_pow+0x120>
 8002f78:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8002f7c:	469c      	mov	ip, r3
 8002f7e:	e7a3      	b.n	8002ec8 <__ieee754_pow+0x120>
 8002f80:	0feb      	lsrs	r3, r5, #31
 8002f82:	3b01      	subs	r3, #1
 8002f84:	930c      	str	r3, [sp, #48]	; 0x30
 8002f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f88:	9b00      	ldr	r3, [sp, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	d104      	bne.n	8002f98 <__ieee754_pow+0x1f0>
 8002f8e:	4642      	mov	r2, r8
 8002f90:	464b      	mov	r3, r9
 8002f92:	4640      	mov	r0, r8
 8002f94:	4649      	mov	r1, r9
 8002f96:	e7e7      	b.n	8002f68 <__ieee754_pow+0x1c0>
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <__ieee754_pow+0x248>)
 8002f9a:	429e      	cmp	r6, r3
 8002f9c:	f340 80f6 	ble.w	800318c <__ieee754_pow+0x3e4>
 8002fa0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002fa4:	429e      	cmp	r6, r3
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <__ieee754_pow+0x240>)
 8002fa8:	dd09      	ble.n	8002fbe <__ieee754_pow+0x216>
 8002faa:	429c      	cmp	r4, r3
 8002fac:	dc0c      	bgt.n	8002fc8 <__ieee754_pow+0x220>
 8002fae:	2f00      	cmp	r7, #0
 8002fb0:	da0c      	bge.n	8002fcc <__ieee754_pow+0x224>
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	b013      	add	sp, #76	; 0x4c
 8002fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fba:	f000 bcb2 	b.w	8003922 <__math_oflow>
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	dbf5      	blt.n	8002fae <__ieee754_pow+0x206>
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <__ieee754_pow+0x23c>)
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	dd15      	ble.n	8002ff4 <__ieee754_pow+0x24c>
 8002fc8:	2f00      	cmp	r7, #0
 8002fca:	dcf2      	bgt.n	8002fb2 <__ieee754_pow+0x20a>
 8002fcc:	2000      	movs	r0, #0
 8002fce:	b013      	add	sp, #76	; 0x4c
 8002fd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd4:	f000 bca0 	b.w	8003918 <__math_uflow>
 8002fd8:	fff00000 	.word	0xfff00000
 8002fdc:	7ff00000 	.word	0x7ff00000
 8002fe0:	433fffff 	.word	0x433fffff
 8002fe4:	3ff00000 	.word	0x3ff00000
 8002fe8:	3fefffff 	.word	0x3fefffff
 8002fec:	3fe00000 	.word	0x3fe00000
 8002ff0:	41e00000 	.word	0x41e00000
 8002ff4:	4661      	mov	r1, ip
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4658      	mov	r0, fp
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <__ieee754_pow+0x3d0>)
 8002ffc:	f7fd f8ac 	bl	8000158 <__aeabi_dsub>
 8003000:	a355      	add	r3, pc, #340	; (adr r3, 8003158 <__ieee754_pow+0x3b0>)
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	4604      	mov	r4, r0
 8003008:	460d      	mov	r5, r1
 800300a:	f7fd fa5d 	bl	80004c8 <__aeabi_dmul>
 800300e:	a354      	add	r3, pc, #336	; (adr r3, 8003160 <__ieee754_pow+0x3b8>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	4606      	mov	r6, r0
 8003016:	460f      	mov	r7, r1
 8003018:	4620      	mov	r0, r4
 800301a:	4629      	mov	r1, r5
 800301c:	f7fd fa54 	bl	80004c8 <__aeabi_dmul>
 8003020:	2200      	movs	r2, #0
 8003022:	4682      	mov	sl, r0
 8003024:	468b      	mov	fp, r1
 8003026:	4620      	mov	r0, r4
 8003028:	4629      	mov	r1, r5
 800302a:	4b54      	ldr	r3, [pc, #336]	; (800317c <__ieee754_pow+0x3d4>)
 800302c:	f7fd fa4c 	bl	80004c8 <__aeabi_dmul>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	a14c      	add	r1, pc, #304	; (adr r1, 8003168 <__ieee754_pow+0x3c0>)
 8003036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800303a:	f7fd f88d 	bl	8000158 <__aeabi_dsub>
 800303e:	4622      	mov	r2, r4
 8003040:	462b      	mov	r3, r5
 8003042:	f7fd fa41 	bl	80004c8 <__aeabi_dmul>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	2000      	movs	r0, #0
 800304c:	494c      	ldr	r1, [pc, #304]	; (8003180 <__ieee754_pow+0x3d8>)
 800304e:	f7fd f883 	bl	8000158 <__aeabi_dsub>
 8003052:	4622      	mov	r2, r4
 8003054:	462b      	mov	r3, r5
 8003056:	4680      	mov	r8, r0
 8003058:	4689      	mov	r9, r1
 800305a:	4620      	mov	r0, r4
 800305c:	4629      	mov	r1, r5
 800305e:	f7fd fa33 	bl	80004c8 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4640      	mov	r0, r8
 8003068:	4649      	mov	r1, r9
 800306a:	f7fd fa2d 	bl	80004c8 <__aeabi_dmul>
 800306e:	a340      	add	r3, pc, #256	; (adr r3, 8003170 <__ieee754_pow+0x3c8>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd fa28 	bl	80004c8 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4650      	mov	r0, sl
 800307e:	4659      	mov	r1, fp
 8003080:	f7fd f86a 	bl	8000158 <__aeabi_dsub>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4604      	mov	r4, r0
 800308a:	460d      	mov	r5, r1
 800308c:	4630      	mov	r0, r6
 800308e:	4639      	mov	r1, r7
 8003090:	f7fd f864 	bl	800015c <__adddf3>
 8003094:	2000      	movs	r0, #0
 8003096:	4632      	mov	r2, r6
 8003098:	463b      	mov	r3, r7
 800309a:	4682      	mov	sl, r0
 800309c:	468b      	mov	fp, r1
 800309e:	f7fd f85b 	bl	8000158 <__aeabi_dsub>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd f855 	bl	8000158 <__aeabi_dsub>
 80030ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80030b2:	9b00      	ldr	r3, [sp, #0]
 80030b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030b6:	3b01      	subs	r3, #1
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f04f 0600 	mov.w	r6, #0
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	4b2f      	ldreq	r3, [pc, #188]	; (8003184 <__ieee754_pow+0x3dc>)
 80030c6:	4b2c      	ldrne	r3, [pc, #176]	; (8003178 <__ieee754_pow+0x3d0>)
 80030c8:	4604      	mov	r4, r0
 80030ca:	460d      	mov	r5, r1
 80030cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030d0:	e9cd 2300 	strd	r2, r3, [sp]
 80030d4:	4632      	mov	r2, r6
 80030d6:	463b      	mov	r3, r7
 80030d8:	f7fd f83e 	bl	8000158 <__aeabi_dsub>
 80030dc:	4652      	mov	r2, sl
 80030de:	465b      	mov	r3, fp
 80030e0:	f7fd f9f2 	bl	80004c8 <__aeabi_dmul>
 80030e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80030e8:	4680      	mov	r8, r0
 80030ea:	4689      	mov	r9, r1
 80030ec:	4620      	mov	r0, r4
 80030ee:	4629      	mov	r1, r5
 80030f0:	f7fd f9ea 	bl	80004c8 <__aeabi_dmul>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4640      	mov	r0, r8
 80030fa:	4649      	mov	r1, r9
 80030fc:	f7fd f82e 	bl	800015c <__adddf3>
 8003100:	4632      	mov	r2, r6
 8003102:	463b      	mov	r3, r7
 8003104:	4680      	mov	r8, r0
 8003106:	4689      	mov	r9, r1
 8003108:	4650      	mov	r0, sl
 800310a:	4659      	mov	r1, fp
 800310c:	f7fd f9dc 	bl	80004c8 <__aeabi_dmul>
 8003110:	4604      	mov	r4, r0
 8003112:	460d      	mov	r5, r1
 8003114:	460b      	mov	r3, r1
 8003116:	4602      	mov	r2, r0
 8003118:	4649      	mov	r1, r9
 800311a:	4640      	mov	r0, r8
 800311c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003120:	f7fd f81c 	bl	800015c <__adddf3>
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <__ieee754_pow+0x3e0>)
 8003126:	4682      	mov	sl, r0
 8003128:	4299      	cmp	r1, r3
 800312a:	460f      	mov	r7, r1
 800312c:	460e      	mov	r6, r1
 800312e:	f340 82e7 	ble.w	8003700 <__ieee754_pow+0x958>
 8003132:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003136:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800313a:	4303      	orrs	r3, r0
 800313c:	f000 81e2 	beq.w	8003504 <__ieee754_pow+0x75c>
 8003140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003144:	2200      	movs	r2, #0
 8003146:	2300      	movs	r3, #0
 8003148:	f7fd fc30 	bl	80009ac <__aeabi_dcmplt>
 800314c:	3800      	subs	r0, #0
 800314e:	bf18      	it	ne
 8003150:	2001      	movne	r0, #1
 8003152:	e72f      	b.n	8002fb4 <__ieee754_pow+0x20c>
 8003154:	f3af 8000 	nop.w
 8003158:	60000000 	.word	0x60000000
 800315c:	3ff71547 	.word	0x3ff71547
 8003160:	f85ddf44 	.word	0xf85ddf44
 8003164:	3e54ae0b 	.word	0x3e54ae0b
 8003168:	55555555 	.word	0x55555555
 800316c:	3fd55555 	.word	0x3fd55555
 8003170:	652b82fe 	.word	0x652b82fe
 8003174:	3ff71547 	.word	0x3ff71547
 8003178:	3ff00000 	.word	0x3ff00000
 800317c:	3fd00000 	.word	0x3fd00000
 8003180:	3fe00000 	.word	0x3fe00000
 8003184:	bff00000 	.word	0xbff00000
 8003188:	408fffff 	.word	0x408fffff
 800318c:	4bd4      	ldr	r3, [pc, #848]	; (80034e0 <__ieee754_pow+0x738>)
 800318e:	2200      	movs	r2, #0
 8003190:	402b      	ands	r3, r5
 8003192:	b943      	cbnz	r3, 80031a6 <__ieee754_pow+0x3fe>
 8003194:	4658      	mov	r0, fp
 8003196:	4661      	mov	r1, ip
 8003198:	4bd2      	ldr	r3, [pc, #840]	; (80034e4 <__ieee754_pow+0x73c>)
 800319a:	f7fd f995 	bl	80004c8 <__aeabi_dmul>
 800319e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80031a2:	4683      	mov	fp, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	1523      	asrs	r3, r4, #20
 80031a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80031ac:	4413      	add	r3, r2
 80031ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80031b0:	4bcd      	ldr	r3, [pc, #820]	; (80034e8 <__ieee754_pow+0x740>)
 80031b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80031b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80031ba:	429c      	cmp	r4, r3
 80031bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80031c0:	dd08      	ble.n	80031d4 <__ieee754_pow+0x42c>
 80031c2:	4bca      	ldr	r3, [pc, #808]	; (80034ec <__ieee754_pow+0x744>)
 80031c4:	429c      	cmp	r4, r3
 80031c6:	f340 8164 	ble.w	8003492 <__ieee754_pow+0x6ea>
 80031ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031cc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80031d0:	3301      	adds	r3, #1
 80031d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80031d4:	2600      	movs	r6, #0
 80031d6:	00f3      	lsls	r3, r6, #3
 80031d8:	930d      	str	r3, [sp, #52]	; 0x34
 80031da:	4bc5      	ldr	r3, [pc, #788]	; (80034f0 <__ieee754_pow+0x748>)
 80031dc:	4658      	mov	r0, fp
 80031de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80031e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031e6:	4629      	mov	r1, r5
 80031e8:	461a      	mov	r2, r3
 80031ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80031ee:	4623      	mov	r3, r4
 80031f0:	f7fc ffb2 	bl	8000158 <__aeabi_dsub>
 80031f4:	46da      	mov	sl, fp
 80031f6:	462b      	mov	r3, r5
 80031f8:	4652      	mov	r2, sl
 80031fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80031fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003202:	f7fc ffab 	bl	800015c <__adddf3>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	2000      	movs	r0, #0
 800320c:	49b9      	ldr	r1, [pc, #740]	; (80034f4 <__ieee754_pow+0x74c>)
 800320e:	f7fd fa85 	bl	800071c <__aeabi_ddiv>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800321a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800321e:	f7fd f953 	bl	80004c8 <__aeabi_dmul>
 8003222:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003226:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800322a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800322e:	2300      	movs	r3, #0
 8003230:	2200      	movs	r2, #0
 8003232:	46ab      	mov	fp, r5
 8003234:	106d      	asrs	r5, r5, #1
 8003236:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800323a:	9304      	str	r3, [sp, #16]
 800323c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003240:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003244:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003248:	4640      	mov	r0, r8
 800324a:	4649      	mov	r1, r9
 800324c:	4614      	mov	r4, r2
 800324e:	461d      	mov	r5, r3
 8003250:	f7fd f93a 	bl	80004c8 <__aeabi_dmul>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800325c:	f7fc ff7c 	bl	8000158 <__aeabi_dsub>
 8003260:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003264:	4606      	mov	r6, r0
 8003266:	460f      	mov	r7, r1
 8003268:	4620      	mov	r0, r4
 800326a:	4629      	mov	r1, r5
 800326c:	f7fc ff74 	bl	8000158 <__aeabi_dsub>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4650      	mov	r0, sl
 8003276:	4659      	mov	r1, fp
 8003278:	f7fc ff6e 	bl	8000158 <__aeabi_dsub>
 800327c:	4642      	mov	r2, r8
 800327e:	464b      	mov	r3, r9
 8003280:	f7fd f922 	bl	80004c8 <__aeabi_dmul>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4630      	mov	r0, r6
 800328a:	4639      	mov	r1, r7
 800328c:	f7fc ff64 	bl	8000158 <__aeabi_dsub>
 8003290:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003294:	f7fd f918 	bl	80004c8 <__aeabi_dmul>
 8003298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800329c:	4682      	mov	sl, r0
 800329e:	468b      	mov	fp, r1
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	f7fd f910 	bl	80004c8 <__aeabi_dmul>
 80032a8:	a37b      	add	r3, pc, #492	; (adr r3, 8003498 <__ieee754_pow+0x6f0>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	4604      	mov	r4, r0
 80032b0:	460d      	mov	r5, r1
 80032b2:	f7fd f909 	bl	80004c8 <__aeabi_dmul>
 80032b6:	a37a      	add	r3, pc, #488	; (adr r3, 80034a0 <__ieee754_pow+0x6f8>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f7fc ff4e 	bl	800015c <__adddf3>
 80032c0:	4622      	mov	r2, r4
 80032c2:	462b      	mov	r3, r5
 80032c4:	f7fd f900 	bl	80004c8 <__aeabi_dmul>
 80032c8:	a377      	add	r3, pc, #476	; (adr r3, 80034a8 <__ieee754_pow+0x700>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fc ff45 	bl	800015c <__adddf3>
 80032d2:	4622      	mov	r2, r4
 80032d4:	462b      	mov	r3, r5
 80032d6:	f7fd f8f7 	bl	80004c8 <__aeabi_dmul>
 80032da:	a375      	add	r3, pc, #468	; (adr r3, 80034b0 <__ieee754_pow+0x708>)
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f7fc ff3c 	bl	800015c <__adddf3>
 80032e4:	4622      	mov	r2, r4
 80032e6:	462b      	mov	r3, r5
 80032e8:	f7fd f8ee 	bl	80004c8 <__aeabi_dmul>
 80032ec:	a372      	add	r3, pc, #456	; (adr r3, 80034b8 <__ieee754_pow+0x710>)
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	f7fc ff33 	bl	800015c <__adddf3>
 80032f6:	4622      	mov	r2, r4
 80032f8:	462b      	mov	r3, r5
 80032fa:	f7fd f8e5 	bl	80004c8 <__aeabi_dmul>
 80032fe:	a370      	add	r3, pc, #448	; (adr r3, 80034c0 <__ieee754_pow+0x718>)
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	f7fc ff2a 	bl	800015c <__adddf3>
 8003308:	4622      	mov	r2, r4
 800330a:	4606      	mov	r6, r0
 800330c:	460f      	mov	r7, r1
 800330e:	462b      	mov	r3, r5
 8003310:	4620      	mov	r0, r4
 8003312:	4629      	mov	r1, r5
 8003314:	f7fd f8d8 	bl	80004c8 <__aeabi_dmul>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4630      	mov	r0, r6
 800331e:	4639      	mov	r1, r7
 8003320:	f7fd f8d2 	bl	80004c8 <__aeabi_dmul>
 8003324:	4604      	mov	r4, r0
 8003326:	460d      	mov	r5, r1
 8003328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800332c:	4642      	mov	r2, r8
 800332e:	464b      	mov	r3, r9
 8003330:	f7fc ff14 	bl	800015c <__adddf3>
 8003334:	4652      	mov	r2, sl
 8003336:	465b      	mov	r3, fp
 8003338:	f7fd f8c6 	bl	80004c8 <__aeabi_dmul>
 800333c:	4622      	mov	r2, r4
 800333e:	462b      	mov	r3, r5
 8003340:	f7fc ff0c 	bl	800015c <__adddf3>
 8003344:	4642      	mov	r2, r8
 8003346:	4606      	mov	r6, r0
 8003348:	460f      	mov	r7, r1
 800334a:	464b      	mov	r3, r9
 800334c:	4640      	mov	r0, r8
 800334e:	4649      	mov	r1, r9
 8003350:	f7fd f8ba 	bl	80004c8 <__aeabi_dmul>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800335c:	2200      	movs	r2, #0
 800335e:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <__ieee754_pow+0x750>)
 8003360:	f7fc fefc 	bl	800015c <__adddf3>
 8003364:	4632      	mov	r2, r6
 8003366:	463b      	mov	r3, r7
 8003368:	f7fc fef8 	bl	800015c <__adddf3>
 800336c:	2400      	movs	r4, #0
 800336e:	460d      	mov	r5, r1
 8003370:	4622      	mov	r2, r4
 8003372:	460b      	mov	r3, r1
 8003374:	4640      	mov	r0, r8
 8003376:	4649      	mov	r1, r9
 8003378:	f7fd f8a6 	bl	80004c8 <__aeabi_dmul>
 800337c:	2200      	movs	r2, #0
 800337e:	4680      	mov	r8, r0
 8003380:	4689      	mov	r9, r1
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <__ieee754_pow+0x750>)
 8003388:	f7fc fee6 	bl	8000158 <__aeabi_dsub>
 800338c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003390:	f7fc fee2 	bl	8000158 <__aeabi_dsub>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4630      	mov	r0, r6
 800339a:	4639      	mov	r1, r7
 800339c:	f7fc fedc 	bl	8000158 <__aeabi_dsub>
 80033a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80033a4:	f7fd f890 	bl	80004c8 <__aeabi_dmul>
 80033a8:	4622      	mov	r2, r4
 80033aa:	4606      	mov	r6, r0
 80033ac:	460f      	mov	r7, r1
 80033ae:	462b      	mov	r3, r5
 80033b0:	4650      	mov	r0, sl
 80033b2:	4659      	mov	r1, fp
 80033b4:	f7fd f888 	bl	80004c8 <__aeabi_dmul>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4630      	mov	r0, r6
 80033be:	4639      	mov	r1, r7
 80033c0:	f7fc fecc 	bl	800015c <__adddf3>
 80033c4:	2400      	movs	r4, #0
 80033c6:	4606      	mov	r6, r0
 80033c8:	460f      	mov	r7, r1
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4640      	mov	r0, r8
 80033d0:	4649      	mov	r1, r9
 80033d2:	f7fc fec3 	bl	800015c <__adddf3>
 80033d6:	a33c      	add	r3, pc, #240	; (adr r3, 80034c8 <__ieee754_pow+0x720>)
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	4620      	mov	r0, r4
 80033de:	460d      	mov	r5, r1
 80033e0:	f7fd f872 	bl	80004c8 <__aeabi_dmul>
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80033ec:	4620      	mov	r0, r4
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7fc feb2 	bl	8000158 <__aeabi_dsub>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4630      	mov	r0, r6
 80033fa:	4639      	mov	r1, r7
 80033fc:	f7fc feac 	bl	8000158 <__aeabi_dsub>
 8003400:	a333      	add	r3, pc, #204	; (adr r3, 80034d0 <__ieee754_pow+0x728>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd f85f 	bl	80004c8 <__aeabi_dmul>
 800340a:	a333      	add	r3, pc, #204	; (adr r3, 80034d8 <__ieee754_pow+0x730>)
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	4606      	mov	r6, r0
 8003412:	460f      	mov	r7, r1
 8003414:	4620      	mov	r0, r4
 8003416:	4629      	mov	r1, r5
 8003418:	f7fd f856 	bl	80004c8 <__aeabi_dmul>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4630      	mov	r0, r6
 8003422:	4639      	mov	r1, r7
 8003424:	f7fc fe9a 	bl	800015c <__adddf3>
 8003428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800342a:	4b34      	ldr	r3, [pc, #208]	; (80034fc <__ieee754_pow+0x754>)
 800342c:	4413      	add	r3, r2
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fc fe93 	bl	800015c <__adddf3>
 8003436:	4680      	mov	r8, r0
 8003438:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800343a:	4689      	mov	r9, r1
 800343c:	f7fc ffda 	bl	80003f4 <__aeabi_i2d>
 8003440:	4604      	mov	r4, r0
 8003442:	460d      	mov	r5, r1
 8003444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <__ieee754_pow+0x758>)
 800344c:	4413      	add	r3, r2
 800344e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003452:	4642      	mov	r2, r8
 8003454:	464b      	mov	r3, r9
 8003456:	f7fc fe81 	bl	800015c <__adddf3>
 800345a:	4632      	mov	r2, r6
 800345c:	463b      	mov	r3, r7
 800345e:	f7fc fe7d 	bl	800015c <__adddf3>
 8003462:	4622      	mov	r2, r4
 8003464:	462b      	mov	r3, r5
 8003466:	f7fc fe79 	bl	800015c <__adddf3>
 800346a:	2000      	movs	r0, #0
 800346c:	4622      	mov	r2, r4
 800346e:	462b      	mov	r3, r5
 8003470:	4682      	mov	sl, r0
 8003472:	468b      	mov	fp, r1
 8003474:	f7fc fe70 	bl	8000158 <__aeabi_dsub>
 8003478:	4632      	mov	r2, r6
 800347a:	463b      	mov	r3, r7
 800347c:	f7fc fe6c 	bl	8000158 <__aeabi_dsub>
 8003480:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003484:	f7fc fe68 	bl	8000158 <__aeabi_dsub>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4640      	mov	r0, r8
 800348e:	4649      	mov	r1, r9
 8003490:	e60b      	b.n	80030aa <__ieee754_pow+0x302>
 8003492:	2601      	movs	r6, #1
 8003494:	e69f      	b.n	80031d6 <__ieee754_pow+0x42e>
 8003496:	bf00      	nop
 8003498:	4a454eef 	.word	0x4a454eef
 800349c:	3fca7e28 	.word	0x3fca7e28
 80034a0:	93c9db65 	.word	0x93c9db65
 80034a4:	3fcd864a 	.word	0x3fcd864a
 80034a8:	a91d4101 	.word	0xa91d4101
 80034ac:	3fd17460 	.word	0x3fd17460
 80034b0:	518f264d 	.word	0x518f264d
 80034b4:	3fd55555 	.word	0x3fd55555
 80034b8:	db6fabff 	.word	0xdb6fabff
 80034bc:	3fdb6db6 	.word	0x3fdb6db6
 80034c0:	33333303 	.word	0x33333303
 80034c4:	3fe33333 	.word	0x3fe33333
 80034c8:	e0000000 	.word	0xe0000000
 80034cc:	3feec709 	.word	0x3feec709
 80034d0:	dc3a03fd 	.word	0xdc3a03fd
 80034d4:	3feec709 	.word	0x3feec709
 80034d8:	145b01f5 	.word	0x145b01f5
 80034dc:	be3e2fe0 	.word	0xbe3e2fe0
 80034e0:	7ff00000 	.word	0x7ff00000
 80034e4:	43400000 	.word	0x43400000
 80034e8:	0003988e 	.word	0x0003988e
 80034ec:	000bb679 	.word	0x000bb679
 80034f0:	08003b30 	.word	0x08003b30
 80034f4:	3ff00000 	.word	0x3ff00000
 80034f8:	40080000 	.word	0x40080000
 80034fc:	08003b50 	.word	0x08003b50
 8003500:	08003b40 	.word	0x08003b40
 8003504:	a39c      	add	r3, pc, #624	; (adr r3, 8003778 <__ieee754_pow+0x9d0>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	4640      	mov	r0, r8
 800350c:	4649      	mov	r1, r9
 800350e:	f7fc fe25 	bl	800015c <__adddf3>
 8003512:	4622      	mov	r2, r4
 8003514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003518:	462b      	mov	r3, r5
 800351a:	4650      	mov	r0, sl
 800351c:	4639      	mov	r1, r7
 800351e:	f7fc fe1b 	bl	8000158 <__aeabi_dsub>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800352a:	f7fd fa5d 	bl	80009e8 <__aeabi_dcmpgt>
 800352e:	2800      	cmp	r0, #0
 8003530:	f47f ae06 	bne.w	8003140 <__ieee754_pow+0x398>
 8003534:	4aa2      	ldr	r2, [pc, #648]	; (80037c0 <__ieee754_pow+0xa18>)
 8003536:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800353a:	4293      	cmp	r3, r2
 800353c:	f340 8100 	ble.w	8003740 <__ieee754_pow+0x998>
 8003540:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003544:	151b      	asrs	r3, r3, #20
 8003546:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800354a:	fa4a fa03 	asr.w	sl, sl, r3
 800354e:	44b2      	add	sl, r6
 8003550:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8003554:	489b      	ldr	r0, [pc, #620]	; (80037c4 <__ieee754_pow+0xa1c>)
 8003556:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800355a:	4108      	asrs	r0, r1
 800355c:	ea00 030a 	and.w	r3, r0, sl
 8003560:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8003564:	f1c1 0114 	rsb	r1, r1, #20
 8003568:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800356c:	fa4a fa01 	asr.w	sl, sl, r1
 8003570:	2e00      	cmp	r6, #0
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	4620      	mov	r0, r4
 8003578:	4629      	mov	r1, r5
 800357a:	bfb8      	it	lt
 800357c:	f1ca 0a00 	rsblt	sl, sl, #0
 8003580:	f7fc fdea 	bl	8000158 <__aeabi_dsub>
 8003584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800358c:	2400      	movs	r4, #0
 800358e:	4642      	mov	r2, r8
 8003590:	464b      	mov	r3, r9
 8003592:	f7fc fde3 	bl	800015c <__adddf3>
 8003596:	a37a      	add	r3, pc, #488	; (adr r3, 8003780 <__ieee754_pow+0x9d8>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	4620      	mov	r0, r4
 800359e:	460d      	mov	r5, r1
 80035a0:	f7fc ff92 	bl	80004c8 <__aeabi_dmul>
 80035a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035a8:	4606      	mov	r6, r0
 80035aa:	460f      	mov	r7, r1
 80035ac:	4620      	mov	r0, r4
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7fc fdd2 	bl	8000158 <__aeabi_dsub>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4640      	mov	r0, r8
 80035ba:	4649      	mov	r1, r9
 80035bc:	f7fc fdcc 	bl	8000158 <__aeabi_dsub>
 80035c0:	a371      	add	r3, pc, #452	; (adr r3, 8003788 <__ieee754_pow+0x9e0>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fc ff7f 	bl	80004c8 <__aeabi_dmul>
 80035ca:	a371      	add	r3, pc, #452	; (adr r3, 8003790 <__ieee754_pow+0x9e8>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	4680      	mov	r8, r0
 80035d2:	4689      	mov	r9, r1
 80035d4:	4620      	mov	r0, r4
 80035d6:	4629      	mov	r1, r5
 80035d8:	f7fc ff76 	bl	80004c8 <__aeabi_dmul>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	f7fc fdba 	bl	800015c <__adddf3>
 80035e8:	4604      	mov	r4, r0
 80035ea:	460d      	mov	r5, r1
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4630      	mov	r0, r6
 80035f2:	4639      	mov	r1, r7
 80035f4:	f7fc fdb2 	bl	800015c <__adddf3>
 80035f8:	4632      	mov	r2, r6
 80035fa:	463b      	mov	r3, r7
 80035fc:	4680      	mov	r8, r0
 80035fe:	4689      	mov	r9, r1
 8003600:	f7fc fdaa 	bl	8000158 <__aeabi_dsub>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4620      	mov	r0, r4
 800360a:	4629      	mov	r1, r5
 800360c:	f7fc fda4 	bl	8000158 <__aeabi_dsub>
 8003610:	4642      	mov	r2, r8
 8003612:	4606      	mov	r6, r0
 8003614:	460f      	mov	r7, r1
 8003616:	464b      	mov	r3, r9
 8003618:	4640      	mov	r0, r8
 800361a:	4649      	mov	r1, r9
 800361c:	f7fc ff54 	bl	80004c8 <__aeabi_dmul>
 8003620:	a35d      	add	r3, pc, #372	; (adr r3, 8003798 <__ieee754_pow+0x9f0>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	4604      	mov	r4, r0
 8003628:	460d      	mov	r5, r1
 800362a:	f7fc ff4d 	bl	80004c8 <__aeabi_dmul>
 800362e:	a35c      	add	r3, pc, #368	; (adr r3, 80037a0 <__ieee754_pow+0x9f8>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f7fc fd90 	bl	8000158 <__aeabi_dsub>
 8003638:	4622      	mov	r2, r4
 800363a:	462b      	mov	r3, r5
 800363c:	f7fc ff44 	bl	80004c8 <__aeabi_dmul>
 8003640:	a359      	add	r3, pc, #356	; (adr r3, 80037a8 <__ieee754_pow+0xa00>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f7fc fd89 	bl	800015c <__adddf3>
 800364a:	4622      	mov	r2, r4
 800364c:	462b      	mov	r3, r5
 800364e:	f7fc ff3b 	bl	80004c8 <__aeabi_dmul>
 8003652:	a357      	add	r3, pc, #348	; (adr r3, 80037b0 <__ieee754_pow+0xa08>)
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f7fc fd7e 	bl	8000158 <__aeabi_dsub>
 800365c:	4622      	mov	r2, r4
 800365e:	462b      	mov	r3, r5
 8003660:	f7fc ff32 	bl	80004c8 <__aeabi_dmul>
 8003664:	a354      	add	r3, pc, #336	; (adr r3, 80037b8 <__ieee754_pow+0xa10>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f7fc fd77 	bl	800015c <__adddf3>
 800366e:	4622      	mov	r2, r4
 8003670:	462b      	mov	r3, r5
 8003672:	f7fc ff29 	bl	80004c8 <__aeabi_dmul>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4640      	mov	r0, r8
 800367c:	4649      	mov	r1, r9
 800367e:	f7fc fd6b 	bl	8000158 <__aeabi_dsub>
 8003682:	4604      	mov	r4, r0
 8003684:	460d      	mov	r5, r1
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4640      	mov	r0, r8
 800368c:	4649      	mov	r1, r9
 800368e:	f7fc ff1b 	bl	80004c8 <__aeabi_dmul>
 8003692:	2200      	movs	r2, #0
 8003694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800369c:	4620      	mov	r0, r4
 800369e:	4629      	mov	r1, r5
 80036a0:	f7fc fd5a 	bl	8000158 <__aeabi_dsub>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036ac:	f7fd f836 	bl	800071c <__aeabi_ddiv>
 80036b0:	4632      	mov	r2, r6
 80036b2:	4604      	mov	r4, r0
 80036b4:	460d      	mov	r5, r1
 80036b6:	463b      	mov	r3, r7
 80036b8:	4640      	mov	r0, r8
 80036ba:	4649      	mov	r1, r9
 80036bc:	f7fc ff04 	bl	80004c8 <__aeabi_dmul>
 80036c0:	4632      	mov	r2, r6
 80036c2:	463b      	mov	r3, r7
 80036c4:	f7fc fd4a 	bl	800015c <__adddf3>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4620      	mov	r0, r4
 80036ce:	4629      	mov	r1, r5
 80036d0:	f7fc fd42 	bl	8000158 <__aeabi_dsub>
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	f7fc fd3e 	bl	8000158 <__aeabi_dsub>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	2000      	movs	r0, #0
 80036e2:	4939      	ldr	r1, [pc, #228]	; (80037c8 <__ieee754_pow+0xa20>)
 80036e4:	f7fc fd38 	bl	8000158 <__aeabi_dsub>
 80036e8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80036ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80036f0:	da29      	bge.n	8003746 <__ieee754_pow+0x99e>
 80036f2:	4652      	mov	r2, sl
 80036f4:	f000 f874 	bl	80037e0 <scalbn>
 80036f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036fc:	f7ff bbfd 	b.w	8002efa <__ieee754_pow+0x152>
 8003700:	4b32      	ldr	r3, [pc, #200]	; (80037cc <__ieee754_pow+0xa24>)
 8003702:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003706:	429f      	cmp	r7, r3
 8003708:	f77f af14 	ble.w	8003534 <__ieee754_pow+0x78c>
 800370c:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <__ieee754_pow+0xa28>)
 800370e:	440b      	add	r3, r1
 8003710:	4303      	orrs	r3, r0
 8003712:	d009      	beq.n	8003728 <__ieee754_pow+0x980>
 8003714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003718:	2200      	movs	r2, #0
 800371a:	2300      	movs	r3, #0
 800371c:	f7fd f946 	bl	80009ac <__aeabi_dcmplt>
 8003720:	3800      	subs	r0, #0
 8003722:	bf18      	it	ne
 8003724:	2001      	movne	r0, #1
 8003726:	e452      	b.n	8002fce <__ieee754_pow+0x226>
 8003728:	4622      	mov	r2, r4
 800372a:	462b      	mov	r3, r5
 800372c:	f7fc fd14 	bl	8000158 <__aeabi_dsub>
 8003730:	4642      	mov	r2, r8
 8003732:	464b      	mov	r3, r9
 8003734:	f7fd f94e 	bl	80009d4 <__aeabi_dcmpge>
 8003738:	2800      	cmp	r0, #0
 800373a:	f43f aefb 	beq.w	8003534 <__ieee754_pow+0x78c>
 800373e:	e7e9      	b.n	8003714 <__ieee754_pow+0x96c>
 8003740:	f04f 0a00 	mov.w	sl, #0
 8003744:	e720      	b.n	8003588 <__ieee754_pow+0x7e0>
 8003746:	4621      	mov	r1, r4
 8003748:	e7d6      	b.n	80036f8 <__ieee754_pow+0x950>
 800374a:	f04f 0b00 	mov.w	fp, #0
 800374e:	f8df c078 	ldr.w	ip, [pc, #120]	; 80037c8 <__ieee754_pow+0xa20>
 8003752:	f7ff bbb9 	b.w	8002ec8 <__ieee754_pow+0x120>
 8003756:	f04f 0b00 	mov.w	fp, #0
 800375a:	f04f 0c00 	mov.w	ip, #0
 800375e:	f7ff bbb3 	b.w	8002ec8 <__ieee754_pow+0x120>
 8003762:	4640      	mov	r0, r8
 8003764:	4649      	mov	r1, r9
 8003766:	f7ff bb3c 	b.w	8002de2 <__ieee754_pow+0x3a>
 800376a:	9200      	str	r2, [sp, #0]
 800376c:	f7ff bb88 	b.w	8002e80 <__ieee754_pow+0xd8>
 8003770:	2300      	movs	r3, #0
 8003772:	f7ff bb72 	b.w	8002e5a <__ieee754_pow+0xb2>
 8003776:	bf00      	nop
 8003778:	652b82fe 	.word	0x652b82fe
 800377c:	3c971547 	.word	0x3c971547
 8003780:	00000000 	.word	0x00000000
 8003784:	3fe62e43 	.word	0x3fe62e43
 8003788:	fefa39ef 	.word	0xfefa39ef
 800378c:	3fe62e42 	.word	0x3fe62e42
 8003790:	0ca86c39 	.word	0x0ca86c39
 8003794:	be205c61 	.word	0xbe205c61
 8003798:	72bea4d0 	.word	0x72bea4d0
 800379c:	3e663769 	.word	0x3e663769
 80037a0:	c5d26bf1 	.word	0xc5d26bf1
 80037a4:	3ebbbd41 	.word	0x3ebbbd41
 80037a8:	af25de2c 	.word	0xaf25de2c
 80037ac:	3f11566a 	.word	0x3f11566a
 80037b0:	16bebd93 	.word	0x16bebd93
 80037b4:	3f66c16c 	.word	0x3f66c16c
 80037b8:	5555553e 	.word	0x5555553e
 80037bc:	3fc55555 	.word	0x3fc55555
 80037c0:	3fe00000 	.word	0x3fe00000
 80037c4:	fff00000 	.word	0xfff00000
 80037c8:	3ff00000 	.word	0x3ff00000
 80037cc:	4090cbff 	.word	0x4090cbff
 80037d0:	3f6f3400 	.word	0x3f6f3400

080037d4 <fabs>:
 80037d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80037d8:	4619      	mov	r1, r3
 80037da:	4770      	bx	lr
 80037dc:	0000      	movs	r0, r0
	...

080037e0 <scalbn>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	4616      	mov	r6, r2
 80037e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80037e8:	4604      	mov	r4, r0
 80037ea:	460d      	mov	r5, r1
 80037ec:	460b      	mov	r3, r1
 80037ee:	b992      	cbnz	r2, 8003816 <scalbn+0x36>
 80037f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80037f4:	4303      	orrs	r3, r0
 80037f6:	d03c      	beq.n	8003872 <scalbn+0x92>
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <scalbn+0xe0>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	f7fc fe64 	bl	80004c8 <__aeabi_dmul>
 8003800:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <scalbn+0xe4>)
 8003802:	4604      	mov	r4, r0
 8003804:	429e      	cmp	r6, r3
 8003806:	460d      	mov	r5, r1
 8003808:	da0f      	bge.n	800382a <scalbn+0x4a>
 800380a:	a329      	add	r3, pc, #164	; (adr r3, 80038b0 <scalbn+0xd0>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc fe5a 	bl	80004c8 <__aeabi_dmul>
 8003814:	e006      	b.n	8003824 <scalbn+0x44>
 8003816:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800381a:	42ba      	cmp	r2, r7
 800381c:	d109      	bne.n	8003832 <scalbn+0x52>
 800381e:	4602      	mov	r2, r0
 8003820:	f7fc fc9c 	bl	800015c <__adddf3>
 8003824:	4604      	mov	r4, r0
 8003826:	460d      	mov	r5, r1
 8003828:	e023      	b.n	8003872 <scalbn+0x92>
 800382a:	460b      	mov	r3, r1
 800382c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003830:	3a36      	subs	r2, #54	; 0x36
 8003832:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003836:	428e      	cmp	r6, r1
 8003838:	dd0e      	ble.n	8003858 <scalbn+0x78>
 800383a:	a31f      	add	r3, pc, #124	; (adr r3, 80038b8 <scalbn+0xd8>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003844:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003848:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800384c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003850:	481d      	ldr	r0, [pc, #116]	; (80038c8 <scalbn+0xe8>)
 8003852:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003856:	e7db      	b.n	8003810 <scalbn+0x30>
 8003858:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800385c:	4432      	add	r2, r6
 800385e:	428a      	cmp	r2, r1
 8003860:	dceb      	bgt.n	800383a <scalbn+0x5a>
 8003862:	2a00      	cmp	r2, #0
 8003864:	dd08      	ble.n	8003878 <scalbn+0x98>
 8003866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800386a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800386e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003872:	4620      	mov	r0, r4
 8003874:	4629      	mov	r1, r5
 8003876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003878:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800387c:	da0c      	bge.n	8003898 <scalbn+0xb8>
 800387e:	a30c      	add	r3, pc, #48	; (adr r3, 80038b0 <scalbn+0xd0>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003888:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800388c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8003890:	480e      	ldr	r0, [pc, #56]	; (80038cc <scalbn+0xec>)
 8003892:	f041 011f 	orr.w	r1, r1, #31
 8003896:	e7bb      	b.n	8003810 <scalbn+0x30>
 8003898:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800389c:	3236      	adds	r2, #54	; 0x36
 800389e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80038a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	2200      	movs	r2, #0
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <scalbn+0xf0>)
 80038ae:	e7af      	b.n	8003810 <scalbn+0x30>
 80038b0:	c2f8f359 	.word	0xc2f8f359
 80038b4:	01a56e1f 	.word	0x01a56e1f
 80038b8:	8800759c 	.word	0x8800759c
 80038bc:	7e37e43c 	.word	0x7e37e43c
 80038c0:	43500000 	.word	0x43500000
 80038c4:	ffff3cb0 	.word	0xffff3cb0
 80038c8:	8800759c 	.word	0x8800759c
 80038cc:	c2f8f359 	.word	0xc2f8f359
 80038d0:	3c900000 	.word	0x3c900000

080038d4 <with_errno>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	4604      	mov	r4, r0
 80038d8:	460d      	mov	r5, r1
 80038da:	4616      	mov	r6, r2
 80038dc:	f7ff f9ca 	bl	8002c74 <__errno>
 80038e0:	4629      	mov	r1, r5
 80038e2:	6006      	str	r6, [r0, #0]
 80038e4:	4620      	mov	r0, r4
 80038e6:	bd70      	pop	{r4, r5, r6, pc}

080038e8 <xflow>:
 80038e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ea:	4615      	mov	r5, r2
 80038ec:	461c      	mov	r4, r3
 80038ee:	b180      	cbz	r0, 8003912 <xflow+0x2a>
 80038f0:	4610      	mov	r0, r2
 80038f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80038f6:	e9cd 0100 	strd	r0, r1, [sp]
 80038fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038fe:	4628      	mov	r0, r5
 8003900:	4621      	mov	r1, r4
 8003902:	f7fc fde1 	bl	80004c8 <__aeabi_dmul>
 8003906:	2222      	movs	r2, #34	; 0x22
 8003908:	b003      	add	sp, #12
 800390a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800390e:	f7ff bfe1 	b.w	80038d4 <with_errno>
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	e7ee      	b.n	80038f6 <xflow+0xe>

08003918 <__math_uflow>:
 8003918:	2200      	movs	r2, #0
 800391a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800391e:	f7ff bfe3 	b.w	80038e8 <xflow>

08003922 <__math_oflow>:
 8003922:	2200      	movs	r2, #0
 8003924:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003928:	f7ff bfde 	b.w	80038e8 <xflow>

0800392c <__ieee754_sqrt>:
 800392c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8003ad0 <__ieee754_sqrt+0x1a4>
 8003930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	ea3c 0c01 	bics.w	ip, ip, r1
 8003938:	460b      	mov	r3, r1
 800393a:	4606      	mov	r6, r0
 800393c:	460d      	mov	r5, r1
 800393e:	460a      	mov	r2, r1
 8003940:	4604      	mov	r4, r0
 8003942:	d10e      	bne.n	8003962 <__ieee754_sqrt+0x36>
 8003944:	4602      	mov	r2, r0
 8003946:	f7fc fdbf 	bl	80004c8 <__aeabi_dmul>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4630      	mov	r0, r6
 8003950:	4629      	mov	r1, r5
 8003952:	f7fc fc03 	bl	800015c <__adddf3>
 8003956:	4606      	mov	r6, r0
 8003958:	460d      	mov	r5, r1
 800395a:	4630      	mov	r0, r6
 800395c:	4629      	mov	r1, r5
 800395e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003962:	2900      	cmp	r1, #0
 8003964:	dc0d      	bgt.n	8003982 <__ieee754_sqrt+0x56>
 8003966:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800396a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800396e:	d0f4      	beq.n	800395a <__ieee754_sqrt+0x2e>
 8003970:	b139      	cbz	r1, 8003982 <__ieee754_sqrt+0x56>
 8003972:	4602      	mov	r2, r0
 8003974:	f7fc fbf0 	bl	8000158 <__aeabi_dsub>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	f7fc fece 	bl	800071c <__aeabi_ddiv>
 8003980:	e7e9      	b.n	8003956 <__ieee754_sqrt+0x2a>
 8003982:	1512      	asrs	r2, r2, #20
 8003984:	f000 8089 	beq.w	8003a9a <__ieee754_sqrt+0x16e>
 8003988:	2500      	movs	r5, #0
 800398a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800398e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003996:	07d2      	lsls	r2, r2, #31
 8003998:	bf5c      	itt	pl
 800399a:	005b      	lslpl	r3, r3, #1
 800399c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80039a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80039a4:	bf58      	it	pl
 80039a6:	0064      	lslpl	r4, r4, #1
 80039a8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80039ac:	0062      	lsls	r2, r4, #1
 80039ae:	2016      	movs	r0, #22
 80039b0:	4629      	mov	r1, r5
 80039b2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80039b6:	1076      	asrs	r6, r6, #1
 80039b8:	190f      	adds	r7, r1, r4
 80039ba:	429f      	cmp	r7, r3
 80039bc:	bfde      	ittt	le
 80039be:	1bdb      	suble	r3, r3, r7
 80039c0:	1939      	addle	r1, r7, r4
 80039c2:	192d      	addle	r5, r5, r4
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	3801      	subs	r0, #1
 80039c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80039cc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80039d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80039d4:	d1f0      	bne.n	80039b8 <__ieee754_sqrt+0x8c>
 80039d6:	4604      	mov	r4, r0
 80039d8:	2720      	movs	r7, #32
 80039da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80039de:	428b      	cmp	r3, r1
 80039e0:	eb0c 0e00 	add.w	lr, ip, r0
 80039e4:	dc02      	bgt.n	80039ec <__ieee754_sqrt+0xc0>
 80039e6:	d113      	bne.n	8003a10 <__ieee754_sqrt+0xe4>
 80039e8:	4596      	cmp	lr, r2
 80039ea:	d811      	bhi.n	8003a10 <__ieee754_sqrt+0xe4>
 80039ec:	f1be 0f00 	cmp.w	lr, #0
 80039f0:	eb0e 000c 	add.w	r0, lr, ip
 80039f4:	da56      	bge.n	8003aa4 <__ieee754_sqrt+0x178>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	db54      	blt.n	8003aa4 <__ieee754_sqrt+0x178>
 80039fa:	f101 0801 	add.w	r8, r1, #1
 80039fe:	1a5b      	subs	r3, r3, r1
 8003a00:	4641      	mov	r1, r8
 8003a02:	4596      	cmp	lr, r2
 8003a04:	bf88      	it	hi
 8003a06:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003a0a:	eba2 020e 	sub.w	r2, r2, lr
 8003a0e:	4464      	add	r4, ip
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	3f01      	subs	r7, #1
 8003a14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003a18:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003a1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003a20:	d1dd      	bne.n	80039de <__ieee754_sqrt+0xb2>
 8003a22:	4313      	orrs	r3, r2
 8003a24:	d01b      	beq.n	8003a5e <__ieee754_sqrt+0x132>
 8003a26:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003ad4 <__ieee754_sqrt+0x1a8>
 8003a2a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003ad8 <__ieee754_sqrt+0x1ac>
 8003a2e:	e9da 0100 	ldrd	r0, r1, [sl]
 8003a32:	e9db 2300 	ldrd	r2, r3, [fp]
 8003a36:	f7fc fb8f 	bl	8000158 <__aeabi_dsub>
 8003a3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4640      	mov	r0, r8
 8003a44:	4649      	mov	r1, r9
 8003a46:	f7fc ffbb 	bl	80009c0 <__aeabi_dcmple>
 8003a4a:	b140      	cbz	r0, 8003a5e <__ieee754_sqrt+0x132>
 8003a4c:	e9da 0100 	ldrd	r0, r1, [sl]
 8003a50:	e9db 2300 	ldrd	r2, r3, [fp]
 8003a54:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003a58:	d126      	bne.n	8003aa8 <__ieee754_sqrt+0x17c>
 8003a5a:	463c      	mov	r4, r7
 8003a5c:	3501      	adds	r5, #1
 8003a5e:	106b      	asrs	r3, r5, #1
 8003a60:	0864      	lsrs	r4, r4, #1
 8003a62:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003a66:	07ea      	lsls	r2, r5, #31
 8003a68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003a6c:	bf48      	it	mi
 8003a6e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8003a72:	4620      	mov	r0, r4
 8003a74:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003a78:	e76d      	b.n	8003956 <__ieee754_sqrt+0x2a>
 8003a7a:	0ae3      	lsrs	r3, r4, #11
 8003a7c:	3915      	subs	r1, #21
 8003a7e:	0564      	lsls	r4, r4, #21
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0fa      	beq.n	8003a7a <__ieee754_sqrt+0x14e>
 8003a84:	02d8      	lsls	r0, r3, #11
 8003a86:	d50a      	bpl.n	8003a9e <__ieee754_sqrt+0x172>
 8003a88:	f1c2 0020 	rsb	r0, r2, #32
 8003a8c:	fa24 f000 	lsr.w	r0, r4, r0
 8003a90:	1e55      	subs	r5, r2, #1
 8003a92:	4094      	lsls	r4, r2
 8003a94:	4303      	orrs	r3, r0
 8003a96:	1b4a      	subs	r2, r1, r5
 8003a98:	e776      	b.n	8003988 <__ieee754_sqrt+0x5c>
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	e7f0      	b.n	8003a80 <__ieee754_sqrt+0x154>
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	3201      	adds	r2, #1
 8003aa2:	e7ef      	b.n	8003a84 <__ieee754_sqrt+0x158>
 8003aa4:	4688      	mov	r8, r1
 8003aa6:	e7aa      	b.n	80039fe <__ieee754_sqrt+0xd2>
 8003aa8:	f7fc fb58 	bl	800015c <__adddf3>
 8003aac:	e9da 8900 	ldrd	r8, r9, [sl]
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	f7fc ff78 	bl	80009ac <__aeabi_dcmplt>
 8003abc:	b120      	cbz	r0, 8003ac8 <__ieee754_sqrt+0x19c>
 8003abe:	1ca1      	adds	r1, r4, #2
 8003ac0:	bf08      	it	eq
 8003ac2:	3501      	addeq	r5, #1
 8003ac4:	3402      	adds	r4, #2
 8003ac6:	e7ca      	b.n	8003a5e <__ieee754_sqrt+0x132>
 8003ac8:	3401      	adds	r4, #1
 8003aca:	f024 0401 	bic.w	r4, r4, #1
 8003ace:	e7c6      	b.n	8003a5e <__ieee754_sqrt+0x132>
 8003ad0:	7ff00000 	.word	0x7ff00000
 8003ad4:	20000068 	.word	0x20000068
 8003ad8:	20000070 	.word	0x20000070

08003adc <_init>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	bf00      	nop
 8003ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae2:	bc08      	pop	{r3}
 8003ae4:	469e      	mov	lr, r3
 8003ae6:	4770      	bx	lr

08003ae8 <_fini>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr
